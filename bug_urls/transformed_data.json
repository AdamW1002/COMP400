{
  "0": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "1": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "2": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "3": {
    "body": "Refutation soundness bug on Z3 trunk. z3-4.8.8 returns the correct result which is `sat`. \r\n```\r\n[581] % z3-4.8.8 small.smt2\r\nsat\r\n[582] % z3release small.smt2\r\nunsat\r\n[583] % \r\n[583] % cat small.smt2\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(assert (= (str.substr a 0 (str.len b)) \"B\"))\r\n(assert (= (str.replace a b \"\") (str.++ \"A\" b)))\r\n(check-sat)\r\n[584] %\r\n```\r\nCommit: 395a3042623d1bbd1cd15b3c5b11c52aff4b5270\r\nOS: Ubuntu 18.04\r\n\r\nNB: Fixed",
    "priority": 0
  },
  "4": {
    "body": "```\r\n[648] % z3-4.8.7 small.smt2\r\nunsat\r\n[649] % z3 small.smt2\r\nsat\r\n[650] % z3 model_validate=true small.smt2\r\nsat\r\n(error \"line 5 column 10: an invalid model was generated\")\r\n[651] % \r\n[651] % cat small.smt2\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(assert (= (str.++ (str.substr \"1\" 0 (str.len a)) \"0\") b))\r\n(assert (< (str.to.int b) 0))\r\n(check-sat)\r\n[652] %\r\n```",
    "priority": 1
  },
  "5": {
    "body": "Hi,\r\nFor this case, Z3 gives an invalid model for the formula:\r\n```\r\n[90] % ./z3debug model_validate=true small.smt2\r\nsat\r\n(error \"line 4 column 10: an invalid model was generated\")\r\n(model \r\n  (define-fun a () String\r\n    \"\\x00\\x00\\f\")\r\n)\r\n[91] % cat small.smt2 \r\n(declare-fun a () String)\r\n(assert (= (str.at (str.substr (str.substr a 1 (- (str.len a) 1)) 1 \r\n        (- (str.len (str.substr a 1 (- (str.len a) ))) 1)) 0) \"\\f\"))\r\n(check-sat)  \r\n(get-model)      \r\n[92] % \r\n```\r\n\r\nUbuntu 18.04\r\nCommit: db9d6d1",
    "priority": 1
  },
  "6": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(set-logic ALL)(declare-fun QFYTjoo_new () Int)(declare-fun DlqpfIW_new () Int)(declare-fun IcTSpor_new () Int)(declare-fun pclIuXt_new () Int)(declare-fun NEXCQtF_new () Int)(declare-fun xnbQxWN_new () Int)(declare-fun IrJEuXI_new () Int)(declare-fun nNChjFs_new () Int)(declare-fun puEBwYN_new () Int)(declare-fun QWjBzHC_new () Int)(declare-fun sopWFKn_new () Int)(declare-fun vEEUsHa_new () Int)(declare-fun kAdFbmi_new () Int)(declare-fun VOlcMOP_new () Int)(declare-fun BueQASA_new () Int)(declare-fun ndfZUwN_new () Int)(declare-fun obWVHpT_new () Int)(declare-fun UVgkblP_new () Int)(declare-fun nAGYFTC_new () Int)(declare-fun gZwKvSn_new () Int)(declare-fun lRzOrzO_new () Int)(declare-fun DBItqbo_new () Int)(declare-fun shifted1_P_2 () Bool)(declare-fun shifted1_P_3 () Bool)(declare-fun shifted1_P_4 () Bool)(declare-fun shifted1_P_5 () Bool)(declare-fun shifted1_P_6 () Bool)(declare-fun shifted1_P_7 () Bool)(declare-fun shifted1_P_8 () Bool)(declare-fun shifted1_P_9 () Bool)(declare-fun shifted1_P_10 () Bool)(declare-fun shifted1_P_11 () Bool)(declare-fun shifted1_P_12 () Bool)(declare-fun shifted1_P_13 () Bool)(declare-fun shifted1_P_14 () Bool)(declare-fun shifted1_P_15 () Int)(declare-fun shifted1_P_16 () Int)(declare-fun shifted1_P_17 () Bool)(declare-fun shifted1_P_18 () Bool)(declare-fun shifted1_P_19 () Int)(declare-fun shifted1_P_20 () Int)(declare-fun shifted1_P_21 () Bool)(declare-fun shifted1_P_22 () Bool)(declare-fun shifted1_P_23 () Int)(declare-fun shifted1_P_24 () Int)(declare-fun shifted1_P_25 () Bool)(declare-fun shifted1_P_26 () Bool)(declare-fun shifted1_P_27 () Bool)(declare-fun shifted1_P_28 () Bool)(declare-fun shifted1_P_29 () Bool)(declare-fun shifted1_P_30 () Bool)(declare-fun shifted1_P_31 () Bool)(declare-fun shifted1_P_32 () Int)(declare-fun shifted1_P_33 () Int)(declare-fun shifted1_P_34 () Int)(declare-fun shifted1_P_35 () Bool)(declare-fun shifted1_P_36 () Int)(declare-fun shifted1_P_37 () Int)(declare-fun shifted1_P_38 () Int)(declare-fun shifted1_P_39 () Int)(declare-fun shifted1_P_40 () Bool)(declare-fun shifted1_P_41 () Bool)(declare-fun shifted1_P_42 () Int)(declare-fun shifted1_P_43 () Int)(declare-fun shifted1_P_44 () Bool)(declare-fun shifted1_P_45 () Bool)(declare-fun shifted1_P_46 () Int)(declare-fun shifted1_P_47 () Int)(declare-fun shifted1_P_48 () Int)(declare-fun shifted1_P_49 () Bool)(declare-fun shifted1_P_50 () Int)(declare-fun shifted1_P_51 () Int)(declare-fun shifted1_P_63 () Int)(declare-fun shifted1_dz () Int)(declare-fun shifted1_rz () Bool)(declare-fun shifted2_x38_plus () Int)(declare-fun shifted2_x38_minus () Int)(declare-fun shifted2_x36_plus () Int)(declare-fun shifted2_x36_minus () Int)(declare-fun shifted2_x31_plus () Int)(declare-fun shifted2_x31_minus () Int)(declare-fun shifted2_x30_plus () Int)(declare-fun shifted2_x30_minus () Int)(declare-fun shifted2_x26_plus () Int)(declare-fun shifted2_x26_minus () Int)(declare-fun shifted2_x22_plus () Int)(declare-fun shifted2_x22_minus () Int)(declare-fun shifted2_x20_plus () Int)(declare-fun shifted2_x20_minus () Int)(declare-fun shifted2_x18_plus () Int)(declare-fun shifted2_x18_minus () Int)(declare-fun shifted2_x17_plus () Int)(declare-fun shifted2_x17_minus () Int)(declare-fun shifted2_x15_plus () Int)(declare-fun shifted2_x15_minus () Int)(declare-fun shifted2_x14_plus () Int)(declare-fun shifted2_x14_minus () Int)(declare-fun shifted2_x13_plus () Int)(declare-fun shifted2_x13_minus () Int)(declare-fun shifted2_x10_plus () Int)(declare-fun shifted2_x10_minus () Int)(declare-fun shifted2_x9_plus () Int)(declare-fun shifted2_x9_minus () Int)(declare-fun shifted2_x8_plus () Int)(declare-fun shifted2_x8_minus () Int)(declare-fun shifted2_x6_plus () Int)(declare-fun shifted2_x6_minus () Int)(declare-fun shifted2_x4_plus () Int)(declare-fun shifted2_x4_minus () Int)(declare-fun shifted2_x3_plus () Int)(declare-fun shifted2_x3_minus () Int)(declare-fun shifted2_x39_plus () Int)(declare-fun shifted2_x39_minus () Int)(declare-fun shifted2_x37_plus () Int)(declare-fun shifted2_x37_minus () Int)(declare-fun shifted2_x33_plus () Int)(declare-fun shifted2_x33_minus () Int)(declare-fun shifted2_x32_plus () Int)(declare-fun shifted2_x32_minus () Int)(declare-fun shifted2_x29_plus () Int)(declare-fun shifted2_x29_minus () Int)(declare-fun shifted2_x28_plus () Int)(declare-fun shifted2_x28_minus () Int)(declare-fun shifted2_x27_plus () Int)(declare-fun shifted2_x27_minus () Int)(declare-fun shifted2_x25_plus () Int)(declare-fun shifted2_x25_minus () Int)(declare-fun shifted2_x12_plus () Int)(declare-fun shifted2_x12_minus () Int)(declare-fun shifted2_x11_plus () Int)(declare-fun shifted2_x11_minus () Int)(declare-fun shifted2_x5_plus () Int)(declare-fun shifted2_x5_minus () Int)(declare-fun shifted2_x2_plus () Int)(declare-fun shifted2_x2_minus () Int)(declare-fun shifted2_x1_plus () Int)(declare-fun shifted2_x1_minus () Int)(declare-fun shifted2_x23_plus () Int)(declare-fun shifted2_x23_minus () Int)(declare-fun shifted2_x19_plus () Int)(declare-fun shifted2_x19_minus () Int)(declare-fun shifted2_x0_plus () Int)(declare-fun shifted2_x0_minus () Int)(declare-fun shifted2_x35_plus () Int)(declare-fun shifted2_x35_minus () Int)(declare-fun shifted2_x34_plus () Int)(declare-fun shifted2_x34_minus () Int)(declare-fun shifted2_x24_plus () Int)(declare-fun shifted2_x24_minus () Int)(declare-fun shifted2_x21_plus () Int)(declare-fun shifted2_x21_minus () Int)(declare-fun shifted2_x7_plus () Int)(declare-fun shifted2_x7_minus () Int)(declare-fun shifted2_x16_plus () Int)(declare-fun shifted2_x16_minus () Int)(assert (<= (- 4) (- QFYTjoo_new shifted2_x0_plus)))(assert (<= (- QFYTjoo_new shifted2_x0_plus) 3))(assert (<= (- 2) (- DlqpfIW_new shifted2_x3_minus)))(assert (<= (- DlqpfIW_new shifted2_x3_minus) 1))(assert (<= (- 4) (- (- IcTSpor_new (- 169)) shifted2_x35_minus)))(assert (<= (- (- IcTSpor_new (- 169)) shifted2_x35_minus) 3))(assert (<= (- 2) (- pclIuXt_new shifted2_x21_plus)))(assert (<= (- pclIuXt_new shifted2_x21_plus) 1))(assert (<= (- 4) (- NEXCQtF_new shifted2_x31_plus)))(assert (<= (- NEXCQtF_new shifted2_x31_plus) 3))(assert (<= (- 2) (div xnbQxWN_new shifted2_x36_minus)))(assert (<= (div xnbQxWN_new shifted2_x36_minus) 1))(assert (<= 0 shifted1_P_32))(assert (<= (div IrJEuXI_new shifted2_x10_plus) 7))(assert (<= 0 (- (- nNChjFs_new (- 542)) shifted2_x20_plus)))(assert (<= (- (- nNChjFs_new (- 542)) shifted2_x20_plus) 7))(assert (<= 0 shifted1_P_34))(assert (<= (div puEBwYN_new shifted2_x17_plus) 7))(assert (<= 0 shifted1_P_36))(assert (<= (- QWjBzHC_new shifted2_x35_minus) 7))(assert (<= 0 (- (- sopWFKn_new (- 756)) shifted2_x2_plus)))(assert (<= shifted1_P_37 7))(assert (<= 0 (- (- vEEUsHa_new (- 786)) shifted2_x25_minus)))(assert (<= shifted1_P_38 7))(assert (<= 0 shifted1_P_39))(assert (<= shifted1_P_39 7))(assert (<= 0 shifted1_P_42))(assert (<= (div VOlcMOP_new shifted2_x12_minus) 7))(assert (<= 0 shifted1_P_43))(assert (<= (- (- BueQASA_new 883) shifted2_x1_plus) 7))(assert (<= 0 (div ndfZUwN_new shifted2_x36_plus)))(assert (<= (div ndfZUwN_new shifted2_x36_plus) 7))(assert (<= 0 shifted1_P_47))(assert (<= (- obWVHpT_new shifted2_x9_minus) 7))(assert (<= 0 shifted1_P_48))(assert (<= (div UVgkblP_new shifted2_x14_plus) 7))(assert (<= 0 shifted1_P_50))(assert (<= shifted1_P_50 7))(assert (<= (- 32) (- gZwKvSn_new shifted2_x12_minus)))(assert (<= (- gZwKvSn_new shifted2_x12_minus) 31))(assert (<= (- 32) (- (- lRzOrzO_new 626) shifted2_x10_minus)))(assert (<= (- (- lRzOrzO_new 626) shifted2_x10_minus) 31))(assert (let ((?v_0 (not shifted1_P_3)) (?v_3 (not shifted1_P_9))) (let ((?v_2 (not (ite ?v_0 false (ite (not shifted1_P_4) (or (or shifted1_P_5 shifted1_P_6) shifted1_P_7) false)))) (?v_1 (not (not shifted1_P_2))) (?v_5 (not shifted1_P_31)) (?v_4 (not shifted1_P_30))) (let ((?v_7 (ite ?v_4 0 (ite ?v_5 shifted1_P_32 shifted1_P_33))) (?v_6 (not (not shifted1_P_29)))) (let ((?v_10 (ite ?v_6 ?v_7 (ite ?v_4 0 (ite ?v_5 shifted1_P_33 (div puEBwYN_new shifted2_x17_plus))))) (?v_8 (ite (not (not shifted1_P_35)) ?v_7 (ite ?v_4 0 (ite ?v_5 (- QWjBzHC_new shifted2_x35_minus) (- (- sopWFKn_new (- 756)) shifted2_x2_plus))))) (?v_9 (not (not shifted1_P_41)))) (let ((?v_11 (ite ?v_9 ?v_7 (ite ?v_4 0 (ite ?v_5 (div VOlcMOP_new shifted2_x12_minus) shifted1_P_32)))) (?v_12 (ite (not (not shifted1_P_45)) ?v_7 (ite ?v_4 0 (ite ?v_5 (div ndfZUwN_new shifted2_x36_plus) shifted1_P_47))))) (let ((?v_14 (= (+ (ite (> (ite (not (not shifted1_P_28)) ?v_10 (ite ?v_6 ?v_8 (ite ?v_4 0 (ite ?v_5 shifted1_P_37 (- (- vEEUsHa_new (- 786)) shifted2_x25_minus))))) shifted1_P_39) 256 0) (+ (ite (> ?v_8 (- kAdFbmi_new shifted2_x25_minus)) 128 0) (+ (ite (> (ite (not (not shifted1_P_40)) ?v_11 (ite ?v_9 ?v_8 (ite ?v_4 0 (ite ?v_5 shifted1_P_43 shifted1_P_36)))) (- kAdFbmi_new shifted2_x25_minus)) 64 0) (+ (ite (> ?v_10 (- kAdFbmi_new shifted2_x25_minus)) 32 0) (+ (ite (> ?v_7 (- kAdFbmi_new shifted2_x25_minus)) 16 0) (+ (ite (> ?v_11 shifted1_P_39) 8 0) (+ (ite (> (ite (not (not shifted1_P_44)) ?v_10 (ite ?v_6 ?v_12 (ite ?v_4 0 (ite ?v_5 (- obWVHpT_new shifted2_x9_minus) shifted1_P_48)))) shifted1_P_39) 4 0) (+ (ite (> ?v_12 (- kAdFbmi_new shifted2_x25_minus)) 2 0) (ite (> (ite (not (not shifted1_P_49)) ?v_11 (ite ?v_9 ?v_12 (ite ?v_4 0 (ite ?v_5 shifted1_P_50 shifted1_P_46)))) shifted1_P_39) 1 0))))))))) 401)) (?v_13 (not (not (or (not (ite ?v_1 (ite ?v_2 (ite ?v_0 shifted1_P_8 (ite ?v_3 shifted1_P_10 shifted1_P_8)) shifted1_P_8) false)) (not (ite ?v_1 (ite ?v_2 (ite ?v_0 shifted1_P_11 (ite ?v_3 (not (= (ite (not (not shifted1_P_12)) 0 (+ (+ (+ (+ (+ (+ (+ (+ (ite (and (and shifted1_P_13 shifted1_P_14) (< shifted1_P_15 0)) 1 0) (ite (and shifted1_P_13 (< (- DlqpfIW_new shifted2_x3_minus) 0)) 1 0)) (ite (and (and shifted1_P_13 shifted1_P_17) shifted1_P_18) 1 0)) (ite (and shifted1_P_14 (< shifted1_P_19 0)) 1 0)) (ite (< (- pclIuXt_new shifted2_x21_plus) 0) 1 0)) (ite (and shifted1_P_17 shifted1_P_21) 1 0)) (ite (and (and shifted1_P_22 shifted1_P_14) (< (- NEXCQtF_new shifted2_x31_plus) 0)) 1 0)) (ite (and shifted1_P_22 (< (div xnbQxWN_new shifted2_x36_minus) 0)) 1 0)) (ite (and (and shifted1_P_22 shifted1_P_17) shifted1_P_25) 1 0))) 0)) shifted1_P_11)) shifted1_P_11) false)))))) (?v_15 (ite (not (not (or (not shifted1_P_8) (not shifted1_P_11)))) shifted1_P_26 shifted1_P_27))) (= (+ (* 2 shifted1_dz) 1) (- (ite (ite ?v_13 false (ite ?v_1 (ite ?v_2 (ite ?v_0 shifted1_P_27 (ite ?v_3 (and ?v_14 (< shifted1_P_63 0)) shifted1_P_27)) shifted1_P_27) false)) 1 0) (ite (ite ?v_13 false (ite ?v_1 (ite ?v_2 (ite ?v_0 ?v_15 (ite ?v_3 (and ?v_14 (< shifted1_P_51 0)) ?v_15)) ?v_15) false)) 1 0))))))))))(assert (>= shifted2_x38_plus 0))(assert (>= shifted2_x38_minus 0))(assert (>= (div ndfZUwN_new shifted1_P_46) 0))(assert (>= (div xnbQxWN_new shifted1_P_24) 0))(assert (>= (- NEXCQtF_new shifted1_P_23) 0))(assert (>= shifted2_x31_minus 0))(assert (>= shifted2_x30_plus 0))(assert (>= shifted2_x30_minus 0))(assert (>= shifted2_x26_plus 0))(assert (>= shifted2_x26_minus 0))(assert (>= shifted2_x22_plus 0))(assert (>= shifted2_x22_minus 0))(assert (>= (- (- nNChjFs_new (- 542)) shifted1_P_33) 0))(assert (>= shifted2_x20_minus 0))(assert (>= shifted2_x18_plus 0))(assert (>= shifted2_x18_minus 0))(assert (>= shifted2_x17_plus 0))(assert (>= shifted2_x17_minus 0))(assert (>= shifted2_x15_plus 0))(assert (>= shifted2_x15_minus 0))(assert (>= (div UVgkblP_new shifted1_P_48) 0))(assert (>= shifted2_x14_minus 0))(assert (>= shifted2_x13_plus 0))(assert (>= shifted2_x13_minus 0))(assert (>= (div IrJEuXI_new shifted1_P_32) 0))(assert (>= (- (- lRzOrzO_new 626) shifted1_P_63) 0))(assert (>= shifted2_x9_plus 0))(assert (>= (- obWVHpT_new shifted1_P_47) 0))(assert (>= shifted2_x8_plus 0))(assert (>= shifted2_x8_minus 0))(assert (>= shifted2_x6_plus 0))(assert (>= shifted2_x6_minus 0))(assert (>= shifted2_x4_plus 0))(assert (>= shifted2_x4_minus 0))(assert (>= shifted2_x3_plus 0))(assert (>= (- DlqpfIW_new shifted1_P_16) 0))(assert (>= shifted2_x39_plus 0))(assert (>= shifted2_x39_minus 0))(assert (>= shifted2_x37_plus 0))(assert (>= shifted2_x37_minus 0))(assert (>= shifted2_x33_plus 0))(assert (>= shifted2_x33_minus 0))(assert (>= shifted2_x32_plus 0))(assert (>= shifted2_x32_minus 0))(assert (>= shifted2_x29_plus 0))(assert (>= shifted2_x29_minus 0))(assert (>= shifted2_x28_plus 0))(assert (>= shifted2_x28_minus 0))(assert (>= shifted2_x27_plus 0))(assert (>= shifted2_x27_minus 0))(assert (>= shifted2_x25_plus 0))(assert (>= (- kAdFbmi_new shifted1_P_39) 0))(assert (>= shifted2_x12_plus 0))(assert (>= (div VOlcMOP_new shifted1_P_42) 0))(assert (>= shifted2_x11_plus 0))(assert (>= shifted2_x11_minus 0))(assert (>= shifted2_x5_plus 0))(assert (>= shifted2_x5_minus 0))(assert (>= (- DBItqbo_new shifted1_dz) 0))(assert (>= shifted2_x2_minus 0))(assert (>= (- (- BueQASA_new 883) shifted1_P_43) 0))(assert (>= shifted2_x1_minus 0))(assert (>= shifted2_x23_plus 0))(assert (>= shifted2_x23_minus 0))(assert (>= shifted2_x19_plus 0))(assert (>= shifted2_x19_minus 0))(assert (>= shifted2_x0_plus 0))(assert (>= shifted2_x0_minus 0))(assert (>= shifted2_x35_plus 0))(assert (>= (- (- IcTSpor_new (- 169)) shifted1_P_19) 0))(assert (>= shifted2_x34_plus 0))(assert (>= shifted2_x34_minus 0))(assert (>= shifted2_x24_plus 0))(assert (>= shifted2_x24_minus 0))(assert (>= (- pclIuXt_new shifted1_P_20) 0))(assert (>= shifted2_x21_minus 0))(assert (>= shifted2_x7_plus 0))(assert (>= shifted2_x7_minus 0))(assert (>= shifted2_x16_plus 0))(assert (>= shifted2_x16_minus 0))(assert (<= (+ shifted2_x38_plus (* (- 1) shifted2_x38_minus) (* (- 1) (div ndfZUwN_new shifted1_P_46)) (div xnbQxWN_new shifted1_P_24) (- NEXCQtF_new shifted1_P_23) (* (- 1) shifted2_x31_minus) shifted2_x30_plus (* (- 1) shifted2_x30_minus) (* (- 1) shifted2_x26_plus) shifted2_x26_minus (* (- 1) shifted2_x22_plus) shifted2_x22_minus (* (- 1) (- (- nNChjFs_new (- 542)) shifted1_P_33)) shifted2_x20_minus (* (- 1) shifted2_x18_plus) shifted2_x18_minus (* (- 1) (div puEBwYN_new shifted1_P_34)) shifted2_x17_minus shifted2_x15_plus (* (- 1) shifted2_x15_minus) shifted2_x14_plus (* (- 1) shifted2_x14_minus) (* (- 1) shifted2_x13_plus) shifted2_x13_minus shifted2_x10_plus (* (- 1) (- (- lRzOrzO_new 626) shifted1_P_63)) (* (- 1) shifted2_x9_plus) (- obWVHpT_new shifted1_P_47) (* (- 1) shifted2_x8_plus) shifted2_x8_minus (* 2 shifted2_x6_plus) (* (- 2) shifted2_x6_minus) (* (- 1) shifted2_x4_plus) shifted2_x4_minus shifted2_x3_plus (* (- 1) shifted2_x3_minus) ) (- 1) ) )(assert (<= (+ shifted2_x39_plus (* (- 1) shifted2_x39_minus) (* (- 1) shifted2_x37_plus) shifted2_x37_minus (div ndfZUwN_new shifted1_P_46) (* (- 1) (div xnbQxWN_new shifted1_P_24)) shifted2_x33_plus (* (- 1) shifted2_x33_minus) shifted2_x32_plus (* (- 1) shifted2_x32_minus) shifted2_x29_plus (* (- 1) shifted2_x29_minus) (* (- 1) shifted2_x28_plus) shifted2_x28_minus (* (- 1) shifted2_x27_plus) shifted2_x27_minus shifted2_x25_plus (* (- 1) (- (- vEEUsHa_new (- 786)) shifted1_P_38)) (* (- 1) shifted2_x22_plus) shifted2_x22_minus (* (- 1) shifted2_x15_plus) shifted2_x15_minus shifted2_x13_plus (* (- 1) shifted2_x13_minus) (* 2 shifted2_x12_plus) (* (- 2) (div VOlcMOP_new shifted1_P_42)) (* (- 1) shifted2_x11_plus) shifted2_x11_minus (* (- 1) shifted2_x10_plus) (- (- lRzOrzO_new 626) shifted1_P_63) (* (- 1) shifted2_x5_plus) shifted2_x5_minus (- DBItqbo_new shifted1_dz) (* (- 1) shifted2_x2_minus) shifted2_x1_plus (* (- 1) shifted2_x1_minus) ) 1 ) )(assert (<= (+ shifted2_x39_plus (* (- 1) shifted2_x39_minus) (* (- 1) shifted2_x37_plus) shifted2_x37_minus (* 2 shifted2_x33_plus) (* (- 2) shifted2_x33_minus) (* (- 1) (- NEXCQtF_new shifted1_P_23)) shifted2_x31_minus (* (- 1) shifted2_x30_plus) shifted2_x30_minus shifted2_x28_plus (* (- 1) shifted2_x28_minus) (* (- 1) shifted2_x27_plus) shifted2_x27_minus shifted2_x26_plus (* (- 1) shifted2_x26_minus) (* (- 1) shifted2_x23_plus) shifted2_x23_minus (* (- 1) shifted2_x22_plus) shifted2_x22_minus shifted2_x19_plus (* (- 1) shifted2_x19_minus) (* (- 1) shifted2_x18_plus) shifted2_x18_minus shifted2_x8_plus (* (- 1) shifted2_x8_minus) shifted2_x6_plus (* (- 1) shifted2_x6_minus) shifted2_x5_plus (* (- 1) shifted2_x5_minus) (* (- 1) shifted2_x3_plus) shifted2_x3_minus (* (- 1) shifted2_x1_plus) shifted2_x1_minus (* 2 (- QFYTjoo_new shifted1_P_15)) (* (- 2) shifted2_x0_minus) ) (- 1) ) )(assert (<= (+ shifted2_x39_plus (* (- 1) shifted2_x39_minus) (* (- 1) (div ndfZUwN_new shifted1_P_46)) shifted2_x36_minus (* (- 1) shifted2_x35_plus) (- QWjBzHC_new shifted1_P_36) shifted2_x34_plus (* (- 1) shifted2_x34_minus) shifted2_x32_plus (* (- 1) shifted2_x32_minus) shifted2_x26_plus (* (- 1) shifted2_x26_minus) (* (- 1) shifted2_x24_plus) shifted2_x24_minus shifted2_x20_plus (* (- 1) shifted2_x20_minus) (* (- 2) shifted2_x17_plus) (* 2 shifted2_x17_minus) (* (- 1) (div UVgkblP_new shifted1_P_48)) shifted2_x14_minus (* (- 1) shifted2_x13_plus) shifted2_x13_minus (* (- 1) shifted2_x11_plus) shifted2_x11_minus (* (- 1) shifted2_x8_plus) shifted2_x8_minus (* (- 1) shifted2_x6_plus) shifted2_x6_minus shifted2_x5_plus (* (- 1) shifted2_x5_minus) shifted2_x1_plus (* (- 1) shifted2_x1_minus) ) 1 ) )(assert (<= (+ shifted2_x37_plus (* (- 1) shifted2_x37_minus) shifted2_x36_plus (* (- 1) shifted2_x36_minus) shifted2_x33_plus (* (- 1) shifted2_x33_minus) shifted2_x32_plus (* (- 1) shifted2_x32_minus) shifted2_x29_plus (* (- 1) shifted2_x29_minus) (* 2 (- nAGYFTC_new shifted1_P_50)) (* (- 2) shifted2_x27_minus) shifted2_x25_plus (* (- 1) (- (- vEEUsHa_new (- 786)) shifted1_P_38)) shifted2_x24_plus (* (- 1) shifted2_x24_minus) shifted2_x18_plus (* (- 1) shifted2_x18_minus) (* (- 1) shifted2_x15_plus) shifted2_x15_minus (* (- 1) shifted2_x12_plus) (div VOlcMOP_new shifted1_P_42) (* (- 1) shifted2_x11_plus) shifted2_x11_minus shifted2_x8_plus (* (- 1) shifted2_x8_minus) shifted2_x4_plus (* (- 1) shifted2_x4_minus) (* (- 2) (- (- sopWFKn_new (- 756)) shifted1_P_37)) (* 2 shifted2_x2_minus) (- (- BueQASA_new 883) shifted1_P_43) (* (- 1) shifted2_x1_minus) ) (- 1) ) )(assert (<= (+ shifted2_x36_plus (* (- 1) (div xnbQxWN_new shifted1_P_24)) (* (- 1) shifted2_x34_plus) shifted2_x34_minus (* (- 1) shifted2_x30_plus) shifted2_x30_minus (* (- 1) shifted2_x29_plus) shifted2_x29_minus shifted2_x27_plus (* (- 1) shifted2_x27_minus) (* (- 1) shifted2_x22_plus) shifted2_x22_minus (* (- 1) shifted2_x21_plus) shifted2_x21_minus (* (- 2) (- (- nNChjFs_new (- 542)) shifted1_P_33)) (* 2 shifted2_x20_minus) (* (- 1) shifted2_x17_plus) shifted2_x17_minus (* (- 1) shifted2_x11_plus) shifted2_x11_minus shifted2_x10_plus (* (- 1) (- (- lRzOrzO_new 626) shifted1_P_63)) shifted2_x8_plus (* (- 1) shifted2_x8_minus) shifted2_x7_plus (* (- 1) shifted2_x7_minus) shifted2_x4_plus (* (- 1) shifted2_x4_minus) (- (- sopWFKn_new (- 756)) shifted1_P_37) (* (- 1) shifted2_x2_minus) (- QFYTjoo_new shifted1_P_15) (* (- 1) shifted2_x0_minus) ) 0 ) )(assert (<= (+ shifted2_x39_plus (* (- 1) shifted2_x39_minus) shifted2_x37_plus (* (- 1) shifted2_x37_minus) (* (- 1) shifted2_x35_plus) shifted2_x35_minus (* (- 1) shifted2_x34_plus) shifted2_x34_minus (* (- 2) shifted2_x31_plus) (* 2 shifted2_x31_minus) (- nAGYFTC_new shifted1_P_50) (* (- 1) shifted2_x27_minus) shifted2_x25_plus (* (- 1) shifted2_x25_minus) shifted2_x21_plus (* (- 1) shifted2_x21_minus) shifted2_x18_plus (* (- 1) shifted2_x18_minus) (* (- 1) shifted2_x16_plus) shifted2_x16_minus (* (- 1) shifted2_x10_plus) shifted2_x10_minus shifted2_x8_plus (* (- 1) shifted2_x8_minus) shifted2_x7_plus (* (- 1) shifted2_x7_minus) (* (- 2) shifted2_x6_plus) (* 2 shifted2_x6_minus) shifted2_x5_plus (* (- 1) shifted2_x5_minus) shifted2_x1_plus (* (- 1) shifted2_x1_minus) ) 0 ) )(assert (<= (+ shifted2_x39_plus (* (- 1) shifted2_x39_minus) (* (- 1) shifted2_x35_plus) shifted2_x35_minus (* (- 1) shifted2_x34_plus) shifted2_x34_minus (* (- 1) shifted2_x33_plus) shifted2_x33_minus shifted2_x30_plus (* (- 1) shifted2_x30_minus) shifted2_x26_plus (* (- 1) shifted2_x26_minus) (* (- 1) shifted2_x25_plus) shifted2_x25_minus shifted2_x24_plus (* (- 1) shifted2_x24_minus) shifted2_x22_plus (* (- 1) shifted2_x22_minus) (* (- 1) (- pclIuXt_new shifted1_P_20)) shifted2_x21_minus (* (- 1) shifted2_x18_plus) shifted2_x18_minus shifted2_x15_plus (* (- 1) shifted2_x15_minus) (* (- 1) shifted2_x7_plus) shifted2_x7_minus (* (- 1) shifted2_x5_plus) shifted2_x5_minus (* (- 1) shifted2_x0_plus) shifted2_x0_minus ) 0 ) )(assert (<= (+ shifted2_x38_plus (* (- 1) shifted2_x38_minus) (* (- 1) shifted2_x32_plus) shifted2_x32_minus (* (- 2) (- NEXCQtF_new shifted1_P_23)) (* 2 shifted2_x31_minus) (* (- 1) shifted2_x30_plus) shifted2_x30_minus (* 2 shifted2_x25_plus) (* (- 2) (- kAdFbmi_new shifted1_P_39)) shifted2_x24_plus (* (- 1) shifted2_x24_minus) (* (- 1) (- (- nNChjFs_new (- 542)) shifted1_P_33)) shifted2_x20_minus (div puEBwYN_new shifted1_P_34) (* (- 1) shifted2_x17_minus) (div UVgkblP_new shifted1_P_48) (* (- 1) shifted2_x14_minus) (div IrJEuXI_new shifted1_P_32) (* (- 1) (- (- lRzOrzO_new 626) shifted1_P_63)) (* 2 shifted2_x5_plus) (* (- 2) shifted2_x5_minus) (* (- 1) shifted2_x4_plus) shifted2_x4_minus (* (- 1) (- (- sopWFKn_new (- 756)) shifted1_P_37)) shifted2_x2_minus (* (- 1) (- (- BueQASA_new 883) shifted1_P_43)) shifted2_x1_minus (* (- 1) shifted2_x0_plus) shifted2_x0_minus ) 0 ) )(assert (<= (+ shifted2_x38_plus (* (- 1) shifted2_x38_minus) (* (- 1) shifted2_x34_plus) shifted2_x34_minus (* (- 2) shifted2_x31_plus) (* 2 shifted2_x31_minus) (* (- 2) shifted2_x22_plus) (* 2 shifted2_x22_minus) (* (- 1) (- pclIuXt_new shifted1_P_20)) shifted2_x21_minus shifted2_x19_plus (* (- 1) shifted2_x19_minus) shifted2_x16_plus (* (- 1) shifted2_x16_minus) (* (- 1) shifted2_x15_plus) shifted2_x15_minus shifted2_x13_plus (* (- 1) shifted2_x13_minus) (* (- 1) shifted2_x11_plus) shifted2_x11_minus shifted2_x10_plus (* (- 1) (- (- lRzOrzO_new 626) shifted1_P_63)) (* (- 1) shifted2_x6_plus) shifted2_x6_minus shifted2_x5_plus (* (- 1) shifted2_x5_minus) (* (- 1) shifted2_x3_plus) (- DlqpfIW_new shifted1_P_16) (* (- 1) (- (- BueQASA_new 883) shifted1_P_43)) shifted2_x1_minus ) 1 ) )(assert (<= (+ shifted2_x39_plus (* (- 1) shifted2_x39_minus) (* (- 1) shifted2_x35_plus) (- (- IcTSpor_new (- 169)) shifted1_P_19) (* (- 1) shifted2_x33_plus) shifted2_x33_minus (- NEXCQtF_new shifted1_P_23) (* (- 1) shifted2_x31_minus) shifted2_x30_plus (* (- 1) shifted2_x30_minus) shifted2_x26_plus (* (- 1) shifted2_x26_minus) (* 2 shifted2_x25_plus) (* (- 2) (- (- vEEUsHa_new (- 786)) shifted1_P_38)) (* 3 shifted2_x23_plus) (* (- 3) shifted2_x23_minus) (* (- 1) shifted2_x22_plus) shifted2_x22_minus (- (- nNChjFs_new (- 542)) shifted1_P_33) (* (- 1) shifted2_x20_minus) (* (- 1) shifted2_x19_plus) shifted2_x19_minus (* (- 1) shifted2_x12_plus) (- gZwKvSn_new shifted1_P_51) (* (- 2) shifted2_x7_plus) (* 2 shifted2_x7_minus) shifted2_x5_plus (* (- 1) shifted2_x5_minus) shifted2_x2_plus (* (- 1) shifted2_x2_minus) ) 1 ) )(assert (<= (+ shifted2_x37_plus (* (- 1) shifted2_x37_minus) (- NEXCQtF_new shifted1_P_23) (* (- 1) shifted2_x31_minus) (* (- 1) (- nAGYFTC_new shifted1_P_50)) shifted2_x27_minus shifted2_x26_plus (* (- 1) shifted2_x26_minus) (* 2 shifted2_x24_plus) (* (- 2) shifted2_x24_minus) shifted2_x22_plus (* (- 1) shifted2_x22_minus) (* (- 1) shifted2_x21_plus) shifted2_x21_minus (- (- nNChjFs_new (- 542)) shifted1_P_33) (* (- 1) shifted2_x20_minus) (* (- 1) shifted2_x19_plus) shifted2_x19_minus shifted2_x18_plus (* (- 1) shifted2_x18_minus) (* (- 2) (div puEBwYN_new shifted1_P_34)) (* 2 shifted2_x17_minus) shifted2_x12_plus (* (- 1) shifted2_x12_minus) shifted2_x10_plus (* (- 1) shifted2_x10_minus) (* (- 1) shifted2_x7_plus) shifted2_x7_minus ) 1 ) )(assert (<= (+ shifted2_x39_plus (* (- 1) shifted2_x39_minus) (* (- 2) shifted2_x38_plus) (* 2 shifted2_x38_minus) (* (- 1) shifted2_x37_plus) shifted2_x37_minus (* (- 1) shifted2_x34_plus) shifted2_x34_minus (* (- 1) shifted2_x24_plus) shifted2_x24_minus (* (- 1) (- pclIuXt_new shifted1_P_20)) shifted2_x21_minus shifted2_x19_plus (* (- 1) shifted2_x19_minus) shifted2_x17_plus (* (- 1) shifted2_x17_minus) shifted2_x13_plus (* (- 1) shifted2_x13_minus) (* (- 1) shifted2_x12_plus) (div VOlcMOP_new shifted1_P_42) (* (- 1) shifted2_x8_plus) shifted2_x8_minus (* (- 1) shifted2_x3_plus) (- DlqpfIW_new shifted1_P_16) (* (- 1) shifted2_x2_plus) shifted2_x2_minus (- QFYTjoo_new shifted1_P_15) (* (- 1) shifted2_x0_minus) ) 0 ) )(assert (<= (+ shifted2_x38_plus (* (- 1) shifted2_x38_minus) shifted2_x34_plus (* (- 1) shifted2_x34_minus) (* (- 1) shifted2_x32_plus) shifted2_x32_minus shifted2_x28_plus (* (- 1) shifted2_x28_minus) shifted2_x27_plus (* (- 1) shifted2_x27_minus) shifted2_x25_plus (* (- 1) (- kAdFbmi_new shifted1_P_39)) (* (- 2) shifted2_x24_plus) (* 2 shifted2_x24_minus) shifted2_x23_plus (* (- 1) shifted2_x23_minus) shifted2_x19_plus (* (- 1) shifted2_x19_minus) (* (- 1) shifted2_x13_plus) shifted2_x13_minus (* (- 1) shifted2_x6_plus) shifted2_x6_minus shifted2_x4_plus (* (- 1) shifted2_x4_minus) shifted2_x1_plus (* (- 1) shifted2_x1_minus) (* (- 1) shifted2_x0_plus) shifted2_x0_minus ) 1 ) )(assert (<= (+ (* 2 shifted2_x38_plus) (* (- 2) shifted2_x38_minus) (* 2 (div ndfZUwN_new shifted1_P_46)) (* (- 2) shifted2_x36_minus) shifted2_x33_plus (* (- 1) shifted2_x33_minus) (* (- 1) shifted2_x29_plus) shifted2_x29_minus (* (- 1) shifted2_x28_plus) shifted2_x28_minus (* (- 2) shifted2_x25_plus) (* 2 (- kAdFbmi_new shifted1_P_39)) shifted2_x22_plus (* (- 1) shifted2_x22_minus) (* (- 2) (- (- nNChjFs_new (- 542)) shifted1_P_33)) (* 2 shifted2_x20_minus) (* (- 1) shifted2_x18_plus) shifted2_x18_minus (div puEBwYN_new shifted1_P_34) (* (- 1) shifted2_x17_minus) shifted2_x11_plus (* (- 1) shifted2_x11_minus) shifted2_x9_plus (* (- 1) (- obWVHpT_new shifted1_P_47)) shifted2_x2_plus (* (- 1) shifted2_x2_minus) (* (- 1) shifted2_x1_plus) shifted2_x1_minus ) (- 1) ) )(assert (<= (+ shifted2_x39_plus (* (- 1) shifted2_x39_minus) (* (- 2) shifted2_x37_plus) (* 2 shifted2_x37_minus) (div ndfZUwN_new shifted1_P_46) (* (- 1) (div xnbQxWN_new shifted1_P_24)) (* (- 1) shifted2_x35_plus) (- (- IcTSpor_new (- 169)) shifted1_P_19) shifted2_x31_plus (* (- 1) shifted2_x31_minus) shifted2_x22_plus (* (- 1) shifted2_x22_minus) shifted2_x21_plus (* (- 1) shifted2_x21_minus) (- (- nNChjFs_new (- 542)) shifted1_P_33) (* (- 1) shifted2_x20_minus) shifted2_x19_plus (* (- 1) shifted2_x19_minus) shifted2_x16_plus (* (- 1) shifted2_x16_minus) (* (- 2) shifted2_x15_plus) (* 2 shifted2_x15_minus) shifted2_x10_plus (* (- 1) shifted2_x10_minus) (* (- 1) shifted2_x8_plus) shifted2_x8_minus (- DBItqbo_new shifted1_dz) (* (- 1) shifted2_x2_minus) ) 0 ) )(assert (<= (+ shifted2_x37_plus (* (- 1) shifted2_x37_minus) (div ndfZUwN_new shifted1_P_46) (* (- 1) shifted2_x36_minus) (* 2 shifted2_x35_plus) (* (- 2) (- (- IcTSpor_new (- 169)) shifted1_P_19)) (* 2 shifted2_x33_plus) (* (- 2) shifted2_x33_minus) shifted2_x32_plus (* (- 1) shifted2_x32_minus) (* (- 1) (- NEXCQtF_new shifted1_P_23)) shifted2_x31_minus (* (- 1) shifted2_x30_plus) shifted2_x30_minus shifted2_x28_plus (* (- 1) shifted2_x28_minus) (* (- 1) shifted2_x26_plus) shifted2_x26_minus (* 2 shifted2_x23_plus) (* (- 2) shifted2_x23_minus) (* (- 2) shifted2_x19_plus) (* 2 shifted2_x19_minus) shifted2_x18_plus (* (- 1) shifted2_x18_minus) shifted2_x8_plus (* (- 1) shifted2_x8_minus) ) 0 ) )(assert (<= (+ shifted2_x39_plus (* (- 1) shifted2_x39_minus) shifted2_x38_plus (* (- 1) shifted2_x38_minus) shifted2_x37_plus (* (- 1) shifted2_x37_minus) shifted2_x26_plus (* (- 1) shifted2_x26_minus) (* (- 1) shifted2_x23_plus) shifted2_x23_minus shifted2_x22_plus (* (- 1) shifted2_x22_minus) (* (- 1) shifted2_x14_plus) shifted2_x14_minus (* (- 1) shifted2_x13_plus) shifted2_x13_minus (* (- 1) shifted2_x11_plus) shifted2_x11_minus shifted2_x7_plus (* (- 1) shifted2_x7_minus) shifted2_x4_plus (* (- 1) shifted2_x4_minus) (* (- 1) (- (- sopWFKn_new (- 756)) shifted1_P_37)) shifted2_x2_minus (* (- 2) (- QFYTjoo_new shifted1_P_15)) (* 2 shifted2_x0_minus) ) (- 1) ) )(assert (<= (+ shifted2_x38_plus (* (- 1) shifted2_x38_minus) (* (- 1) shifted2_x37_plus) shifted2_x37_minus shifted2_x34_plus (* (- 1) shifted2_x34_minus) shifted2_x33_plus (* (- 1) shifted2_x33_minus) shifted2_x32_plus (* (- 1) shifted2_x32_minus) (* (- 1) shifted2_x31_plus) shifted2_x31_minus shifted2_x30_plus (* (- 1) shifted2_x30_minus) shifted2_x25_plus (* (- 1) (- kAdFbmi_new shifted1_P_39)) shifted2_x22_plus (* (- 1) shifted2_x22_minus) (* (- 1) shifted2_x15_plus) shifted2_x15_minus (* (- 1) shifted2_x9_plus) (- obWVHpT_new shifted1_P_47) (* (- 1) shifted2_x7_plus) shifted2_x7_minus (* (- 1) (- (- sopWFKn_new (- 756)) shifted1_P_37)) shifted2_x2_minus ) 0 ) )(assert (<= (+ shifted2_x39_plus (* (- 1) shifted2_x39_minus) (* (- 1) shifted2_x37_plus) shifted2_x37_minus (* (- 1) shifted2_x35_plus) (- (- IcTSpor_new (- 169)) shifted1_P_19) shifted2_x32_plus (* (- 1) shifted2_x32_minus) shifted2_x28_plus (* (- 1) shifted2_x28_minus) (* (- 1) shifted2_x26_plus) shifted2_x26_minus shifted2_x22_plus (* (- 1) shifted2_x22_minus) (* (- 1) (- pclIuXt_new shifted1_P_20)) shifted2_x21_minus (* 2 shifted2_x7_plus) (* (- 2) shifted2_x7_minus) (* (- 1) shifted2_x6_plus) shifted2_x6_minus (* (- 1) shifted2_x4_plus) shifted2_x4_minus shifted2_x3_plus (* (- 1) (- DlqpfIW_new shifted1_P_16)) (* (- 1) (- (- BueQASA_new 883) shifted1_P_43)) shifted2_x1_minus ) (- 1) ) )(assert (<= (+ shifted2_x38_plus (* (- 1) shifted2_x38_minus) (* (- 1) shifted2_x37_plus) shifted2_x37_minus (div ndfZUwN_new shifted1_P_46) (* (- 1) (div xnbQxWN_new shifted1_P_24)) (* (- 1) shifted2_x34_plus) shifted2_x34_minus (* (- 1) shifted2_x32_plus) shifted2_x32_minus shifted2_x26_plus (* (- 1) shifted2_x26_minus) (* (- 1) shifted2_x25_plus) (- (- vEEUsHa_new (- 786)) shifted1_P_38) (* (- 2) shifted2_x22_plus) (* 2 shifted2_x22_minus) (* (- 1) shifted2_x19_plus) shifted2_x19_minus (* (- 1) shifted2_x15_plus) shifted2_x15_minus (* (- 1) shifted2_x14_plus) shifted2_x14_minus shifted2_x13_plus (* (- 1) shifted2_x13_minus) (* (- 1) shifted2_x11_plus) shifted2_x11_minus ) 0 ) )(assert (<= (+ shifted2_x39_plus (* (- 1) shifted2_x39_minus) shifted2_x37_plus (* (- 1) shifted2_x37_minus) shifted2_x33_plus (* (- 1) shifted2_x33_minus) (* (- 1) (- NEXCQtF_new shifted1_P_23)) shifted2_x31_minus shifted2_x30_plus (* (- 1) shifted2_x30_minus) shifted2_x29_plus (* (- 1) shifted2_x29_minus) shifted2_x27_plus (* (- 1) shifted2_x27_minus) (* (- 1) shifted2_x26_plus) shifted2_x26_minus shifted2_x22_plus (* (- 1) shifted2_x22_minus) (- pclIuXt_new shifted1_P_20) (* (- 1) shifted2_x21_minus) (* (- 1) shifted2_x20_plus) shifted2_x20_minus (div IrJEuXI_new shifted1_P_32) (* (- 1) (- (- lRzOrzO_new 626) shifted1_P_63)) shifted2_x3_plus (* (- 1) (- DlqpfIW_new shifted1_P_16)) ) (- 1) ) )(assert (<= (+ shifted2_x39_plus (* (- 1) shifted2_x39_minus) (* (- 2) shifted2_x37_plus) (* 2 shifted2_x37_minus) (* (- 1) shifted2_x35_plus) (- QWjBzHC_new shifted1_P_36) shifted2_x30_plus (* (- 1) shifted2_x30_minus) (* (- 2) shifted2_x27_plus) (* 2 shifted2_x27_minus) shifted2_x23_plus (* (- 1) shifted2_x23_minus) (- (- nNChjFs_new (- 542)) shifted1_P_33) (* (- 1) shifted2_x20_minus) (* (- 1) shifted2_x16_plus) shifted2_x16_minus shifted2_x13_plus (* (- 1) shifted2_x13_minus) (* (- 1) shifted2_x11_plus) shifted2_x11_minus (* (- 1) shifted2_x8_plus) shifted2_x8_minus ) (- 1) ) )(assert (<= (+ shifted2_x33_plus (* (- 1) shifted2_x33_minus) (* (- 1) shifted2_x29_plus) shifted2_x29_minus (* (- 1) shifted2_x26_plus) shifted2_x26_minus (* (- 1) shifted2_x25_plus) shifted2_x25_minus (* (- 2) shifted2_x23_plus) (* 2 shifted2_x23_minus) (- pclIuXt_new shifted1_P_20) (* (- 1) shifted2_x21_minus) (* (- 1) shifted2_x15_plus) shifted2_x15_minus (* (- 1) shifted2_x11_plus) shifted2_x11_minus (* 2 shifted2_x9_plus) (* (- 2) shifted2_x9_minus) (* (- 2) shifted2_x4_plus) (* 2 shifted2_x4_minus) (* (- 1) (- (- BueQASA_new 883) shifted1_P_43)) shifted2_x1_minus ) (- 1) ) )(assert (<= (+ shifted2_x32_plus (* (- 1) shifted2_x32_minus) shifted2_x29_plus (* (- 1) shifted2_x29_minus) (* (- 2) shifted2_x26_plus) (* 2 shifted2_x26_minus) (* (- 1) shifted2_x22_plus) shifted2_x22_minus (* 2 shifted2_x21_plus) (* (- 2) shifted2_x21_minus) (* (- 1) shifted2_x19_plus) shifted2_x19_minus shifted2_x15_plus (* (- 1) shifted2_x15_minus) (div IrJEuXI_new shifted1_P_32) (* (- 1) shifted2_x10_minus) (* (- 3) shifted2_x7_plus) (* 3 shifted2_x7_minus) shifted2_x6_plus (* (- 1) shifted2_x6_minus) (* (- 1) shifted2_x1_plus) shifted2_x1_minus ) 1 ) )(assert (>= (+ shifted2_x38_plus (* (- 1) shifted2_x38_minus) shifted2_x35_plus (* (- 1) (- (- IcTSpor_new (- 169)) shifted1_P_19)) shifted2_x33_plus (* (- 1) shifted2_x33_minus) (* (- 1) shifted2_x30_plus) shifted2_x30_minus (* (- 1) shifted2_x29_plus) shifted2_x29_minus (* (- 2) shifted2_x28_plus) (* 2 shifted2_x28_minus) (* (- 2) shifted2_x27_plus) (* 2 shifted2_x27_minus) (* (- 1) shifted2_x26_plus) shifted2_x26_minus (- (- nNChjFs_new (- 542)) shifted1_P_33) (* (- 1) shifted2_x20_minus) (* (- 1) shifted2_x18_plus) shifted2_x18_minus (div puEBwYN_new shifted1_P_34) (* (- 1) shifted2_x17_minus) shifted2_x16_plus (* (- 1) shifted2_x16_minus) (* (- 1) shifted2_x14_plus) shifted2_x14_minus (* (- 1) shifted2_x13_plus) shifted2_x13_minus (* (- 1) shifted2_x11_plus) shifted2_x11_minus (* (- 1) (div IrJEuXI_new shifted1_P_32)) shifted2_x10_minus shifted2_x8_plus (* (- 1) shifted2_x8_minus) (- (- sopWFKn_new (- 756)) shifted1_P_37) (* (- 1) shifted2_x2_minus) shifted2_x1_plus (* (- 1) shifted2_x1_minus) (- QFYTjoo_new shifted1_P_15) (* (- 1) shifted2_x0_minus) ) (- 1) ) )(assert (>= (+ shifted2_x39_plus (* (- 1) shifted2_x39_minus) shifted2_x38_plus (* (- 1) shifted2_x38_minus) shifted2_x37_plus (* (- 1) shifted2_x37_minus) (* (- 1) shifted2_x34_plus) shifted2_x34_minus shifted2_x31_plus (* (- 1) shifted2_x31_minus) (* (- 1) shifted2_x27_plus) shifted2_x27_minus (* (- 1) shifted2_x25_plus) shifted2_x25_minus (* (- 1) shifted2_x24_plus) shifted2_x24_minus (* (- 1) shifted2_x21_plus) shifted2_x21_minus (* (- 1) (- (- nNChjFs_new (- 542)) shifted1_P_33)) shifted2_x20_minus (* (- 1) shifted2_x19_plus) shifted2_x19_minus shifted2_x17_plus (* (- 1) shifted2_x17_minus) (* (- 1) shifted2_x15_plus) shifted2_x15_minus shifted2_x12_plus (* (- 1) (div VOlcMOP_new shifted1_P_42)) (* (- 1) shifted2_x11_plus) shifted2_x11_minus shifted2_x8_plus (* (- 1) shifted2_x8_minus) (* (- 1) shifted2_x6_plus) shifted2_x6_minus (* (- 1) shifted2_x3_plus) (- DlqpfIW_new shifted1_P_16) (* (- 1) (- (- sopWFKn_new (- 756)) shifted1_P_37)) shifted2_x2_minus (* 2 (- (- BueQASA_new 883) shifted1_P_43)) (* (- 2) shifted2_x1_minus) ) 1 ) )(assert (>= (+ shifted2_x34_plus (* (- 1) shifted2_x34_minus) shifted2_x33_plus (* (- 1) shifted2_x33_minus) shifted2_x32_plus (* (- 1) shifted2_x32_minus) (* (- 1) shifted2_x28_plus) shifted2_x28_minus (* (- 1) shifted2_x26_plus) shifted2_x26_minus (* 2 shifted2_x24_plus) (* (- 2) shifted2_x24_minus) (* (- 1) shifted2_x22_plus) shifted2_x22_minus shifted2_x21_plus (* (- 1) shifted2_x21_minus) (- (- nNChjFs_new (- 542)) shifted1_P_33) (* (- 1) shifted2_x20_minus) (* 2 shifted2_x19_plus) (* (- 2) shifted2_x19_minus) (* (- 1) shifted2_x13_plus) shifted2_x13_minus shifted2_x12_plus (* (- 1) (div VOlcMOP_new shifted1_P_42)) shifted2_x9_plus (* (- 1) shifted2_x9_minus) (* (- 1) shifted2_x7_plus) shifted2_x7_minus shifted2_x5_plus (* (- 1) shifted2_x5_minus) shifted2_x4_plus (* (- 1) shifted2_x4_minus) (* (- 1) shifted2_x3_plus) shifted2_x3_minus (* (- 1) (- DBItqbo_new shifted1_dz)) shifted2_x2_minus (- QFYTjoo_new shifted1_P_15) (* (- 1) shifted2_x0_minus) ) 0 ) )(assert (>= (+ shifted2_x39_plus (* (- 1) shifted2_x39_minus) shifted2_x38_plus (* (- 1) shifted2_x38_minus) (* (- 1) shifted2_x37_plus) shifted2_x37_minus (* (- 1) shifted2_x34_plus) shifted2_x34_minus (* (- 2) shifted2_x33_plus) (* 2 shifted2_x33_minus) (* (- 1) shifted2_x31_plus) shifted2_x31_minus shifted2_x29_plus (* (- 1) shifted2_x29_minus) (* (- 1) shifted2_x26_plus) shifted2_x26_minus (* (- 1) shifted2_x23_plus) shifted2_x23_minus shifted2_x15_plus (* (- 1) shifted2_x15_minus) shifted2_x13_plus (* (- 1) shifted2_x13_minus) (* (- 1) shifted2_x12_plus) (div VOlcMOP_new shifted1_P_42) shifted2_x11_plus (* (- 1) shifted2_x11_minus) shifted2_x7_plus (* (- 1) shifted2_x7_minus) (* (- 1) shifted2_x5_plus) shifted2_x5_minus (* (- 1) shifted2_x4_plus) shifted2_x4_minus (* 3 shifted2_x3_plus) (* (- 3) shifted2_x3_minus) ) (- 1) ) )(assert (>= (+ shifted2_x37_plus (* (- 1) shifted2_x37_minus) shifted2_x35_plus (* (- 1) (- QWjBzHC_new shifted1_P_36)) shifted2_x34_plus (* (- 1) shifted2_x34_minus) (* (- 2) (- nAGYFTC_new shifted1_P_50)) (* 2 shifted2_x27_minus) (* (- 1) shifted2_x26_plus) shifted2_x26_minus (* (- 1) shifted2_x24_plus) shifted2_x24_minus shifted2_x23_plus (* (- 1) shifted2_x23_minus) shifted2_x21_plus (* (- 1) shifted2_x21_minus) (* (- 1) (- (- nNChjFs_new (- 542)) shifted1_P_33)) shifted2_x20_minus shifted2_x19_plus (* (- 1) shifted2_x19_minus) (* (- 1) shifted2_x18_plus) shifted2_x18_minus shifted2_x15_plus (* (- 1) shifted2_x15_minus) (* (- 1) shifted2_x7_plus) shifted2_x7_minus (* (- 2) shifted2_x4_plus) (* 2 shifted2_x4_minus) shifted2_x3_plus (* (- 1) (- DlqpfIW_new shifted1_P_16)) (- (- BueQASA_new 883) shifted1_P_43) (* (- 1) shifted2_x1_minus) ) 0 ) )(assert (>= (+ shifted2_x35_plus (* (- 1) (- QWjBzHC_new shifted1_P_36)) (* (- 2) shifted2_x33_plus) (* 2 shifted2_x33_minus) (- NEXCQtF_new shifted1_P_23) (* (- 1) shifted2_x31_minus) (* (- 2) shifted2_x30_plus) (* 2 shifted2_x30_minus) (* (- 2) shifted2_x29_plus) (* 2 shifted2_x29_minus) (* (- 1) shifted2_x28_plus) shifted2_x28_minus shifted2_x27_plus (* (- 1) shifted2_x27_minus) (* (- 1) shifted2_x22_plus) shifted2_x22_minus (* (- 1) (- (- nNChjFs_new (- 542)) shifted1_P_33)) shifted2_x20_minus (* (- 1) (div puEBwYN_new shifted1_P_34)) shifted2_x17_minus shifted2_x12_plus (* (- 1) (div VOlcMOP_new shifted1_P_42)) shifted2_x11_plus (* (- 1) shifted2_x11_minus) (* (- 1) shifted2_x8_plus) shifted2_x8_minus shifted2_x7_plus (* (- 1) shifted2_x7_minus) (* (- 1) shifted2_x5_plus) shifted2_x5_minus shifted2_x4_plus (* (- 1) shifted2_x4_minus) ) 0 ) )(assert (>= (+ shifted2_x38_plus (* (- 1) shifted2_x38_minus) shifted2_x32_plus (* (- 1) shifted2_x32_minus) (* (- 1) (- NEXCQtF_new shifted1_P_23)) shifted2_x31_minus (* (- 2) shifted2_x26_plus) (* 2 shifted2_x26_minus) (* (- 1) shifted2_x25_plus) (- (- vEEUsHa_new (- 786)) shifted1_P_38) shifted2_x23_plus (* (- 1) shifted2_x23_minus) shifted2_x22_plus (* (- 1) shifted2_x22_minus) (* (- 1) shifted2_x21_plus) shifted2_x21_minus (* (- 1) shifted2_x19_plus) shifted2_x19_minus (* (- 1) shifted2_x18_plus) shifted2_x18_minus shifted2_x10_plus (* (- 1) shifted2_x10_minus) (* (- 1) shifted2_x9_plus) (- obWVHpT_new shifted1_P_47) (* (- 2) shifted2_x7_plus) (* 2 shifted2_x7_minus) (* (- 1) shifted2_x6_plus) shifted2_x6_minus (* (- 1) shifted2_x5_plus) shifted2_x5_minus (* (- 1) shifted2_x4_plus) shifted2_x4_minus ) 0 ) )(assert (>= (+ shifted2_x39_plus (* (- 1) shifted2_x39_minus) (* (- 1) shifted2_x37_plus) shifted2_x37_minus (* 2 shifted2_x33_plus) (* (- 2) shifted2_x33_minus) (* (- 1) shifted2_x32_plus) shifted2_x32_minus (* (- 2) shifted2_x24_plus) (* 2 shifted2_x24_minus) shifted2_x23_plus (* (- 1) shifted2_x23_minus) (* (- 1) (- pclIuXt_new shifted1_P_20)) shifted2_x21_minus shifted2_x18_plus (* (- 1) shifted2_x18_minus) (div puEBwYN_new shifted1_P_34) (* (- 1) shifted2_x17_minus) (* (- 1) shifted2_x12_plus) (- gZwKvSn_new shifted1_P_51) shifted2_x11_plus (* (- 1) shifted2_x11_minus) (* (- 1) shifted2_x7_plus) shifted2_x7_minus (* (- 1) shifted2_x6_plus) shifted2_x6_minus shifted2_x3_plus (* (- 1) (- DlqpfIW_new shifted1_P_16)) (- (- sopWFKn_new (- 756)) shifted1_P_37) (* (- 1) shifted2_x2_minus) (- (- BueQASA_new 883) shifted1_P_43) (* (- 1) shifted2_x1_minus) ) 0 ) )(assert (>= (+ (* 2 shifted2_x39_plus) (* (- 2) shifted2_x39_minus) shifted2_x34_plus (* (- 1) shifted2_x34_minus) (* (- 1) shifted2_x33_plus) shifted2_x33_minus shifted2_x32_plus (* (- 1) shifted2_x32_minus) (* 2 shifted2_x27_plus) (* (- 2) shifted2_x27_minus) (* (- 1) shifted2_x26_plus) shifted2_x26_minus (* (- 1) shifted2_x22_plus) shifted2_x22_minus shifted2_x20_plus (* (- 1) shifted2_x20_minus) shifted2_x19_plus (* (- 1) shifted2_x19_minus) (* (- 1) shifted2_x15_plus) shifted2_x15_minus (* (- 1) (div UVgkblP_new shifted1_P_48)) shifted2_x14_minus shifted2_x9_plus (* (- 1) shifted2_x9_minus) shifted2_x7_plus (* (- 1) shifted2_x7_minus) shifted2_x6_plus (* (- 1) shifted2_x6_minus) (* (- 1) shifted2_x4_plus) shifted2_x4_minus ) 0 ) )(assert (>= (+ shifted2_x38_plus (* (- 1) shifted2_x38_minus) (* (- 1) shifted2_x37_plus) shifted2_x37_minus shifted2_x36_plus (* (- 1) (div xnbQxWN_new shifted1_P_24)) shifted2_x33_plus (* (- 1) shifted2_x33_minus) (* (- 1) shifted2_x30_plus) shifted2_x30_minus shifted2_x29_plus (* (- 1) shifted2_x29_minus) (* (- 1) shifted2_x28_plus) shifted2_x28_minus (* (- 1) (- nAGYFTC_new shifted1_P_50)) shifted2_x27_minus shifted2_x22_plus (* (- 1) shifted2_x22_minus) (* (- 1) (- pclIuXt_new shifted1_P_20)) shifted2_x21_minus (* 2 (- (- nNChjFs_new (- 542)) shifted1_P_33)) (* (- 2) shifted2_x20_minus) (* (- 1) shifted2_x18_plus) shifted2_x18_minus (* (- 1) shifted2_x17_plus) shifted2_x17_minus shifted2_x3_plus (* (- 1) shifted2_x3_minus) (- (- BueQASA_new 883) shifted1_P_43) (* (- 1) shifted2_x1_minus) ) 1 ) )(assert (>= (+ (* 3 shifted2_x36_plus) (* (- 3) (div xnbQxWN_new shifted1_P_24)) (* (- 1) shifted2_x33_plus) shifted2_x33_minus (* (- 1) shifted2_x32_plus) shifted2_x32_minus shifted2_x26_plus (* (- 1) shifted2_x26_minus) (* (- 2) shifted2_x25_plus) (* 2 (- (- vEEUsHa_new (- 786)) shifted1_P_38)) (* (- 1) shifted2_x23_plus) shifted2_x23_minus (* (- 1) shifted2_x19_plus) shifted2_x19_minus shifted2_x18_plus (* (- 1) shifted2_x18_minus) (* (- 1) shifted2_x12_plus) (div VOlcMOP_new shifted1_P_42) shifted2_x11_plus (* (- 1) shifted2_x11_minus) shifted2_x9_plus (* (- 1) (- obWVHpT_new shifted1_P_47)) shifted2_x6_plus (* (- 1) shifted2_x6_minus) (* (- 1) shifted2_x3_plus) (- DlqpfIW_new shifted1_P_16) (* 2 (- (- sopWFKn_new (- 756)) shifted1_P_37)) (* (- 2) shifted2_x2_minus) (- (- BueQASA_new 883) shifted1_P_43) (* (- 1) shifted2_x1_minus) ) 1 ) )(assert (>= (+ shifted2_x39_plus (* (- 1) shifted2_x39_minus) shifted2_x38_plus (* (- 1) shifted2_x38_minus) (* (- 1) (- NEXCQtF_new shifted1_P_23)) shifted2_x31_minus shifted2_x30_plus (* (- 1) shifted2_x30_minus) shifted2_x29_plus (* (- 1) shifted2_x29_minus) shifted2_x26_plus (* (- 1) shifted2_x26_minus) (* (- 1) shifted2_x19_plus) shifted2_x19_minus shifted2_x17_plus (* (- 1) shifted2_x17_minus) shifted2_x16_plus (* (- 1) shifted2_x16_minus) shifted2_x13_plus (* (- 1) shifted2_x13_minus) (* (- 1) shifted2_x8_plus) shifted2_x8_minus shifted2_x6_plus (* (- 1) shifted2_x6_minus) (* (- 1) shifted2_x5_plus) shifted2_x5_minus shifted2_x4_plus (* (- 1) shifted2_x4_minus) (* 2 shifted2_x0_plus) (* (- 2) shifted2_x0_minus) ) 0 ) )(assert (>= (+ shifted2_x37_plus (* (- 1) shifted2_x37_minus) shifted2_x35_plus (* (- 1) (- QWjBzHC_new shifted1_P_36)) shifted2_x34_plus (* (- 1) shifted2_x34_minus) (- NEXCQtF_new shifted1_P_23) (* (- 1) shifted2_x31_minus) (* (- 1) shifted2_x28_plus) shifted2_x28_minus (* (- 1) shifted2_x26_plus) shifted2_x26_minus shifted2_x24_plus (* (- 1) shifted2_x24_minus) (* (- 1) shifted2_x22_plus) shifted2_x22_minus shifted2_x15_plus (* (- 1) shifted2_x15_minus) shifted2_x12_plus (* (- 1) (div VOlcMOP_new shifted1_P_42)) shifted2_x10_plus (* (- 1) shifted2_x10_minus) (* (- 1) shifted2_x9_plus) shifted2_x9_minus shifted2_x6_plus (* (- 1) shifted2_x6_minus) (* (- 1) shifted2_x5_plus) shifted2_x5_minus (* (- 1) shifted2_x4_plus) shifted2_x4_minus ) 0 ) )(assert (>= (+ shifted2_x36_plus (* (- 1) shifted2_x36_minus) shifted2_x34_plus (* (- 1) shifted2_x34_minus) (* (- 1) shifted2_x32_plus) shifted2_x32_minus (- NEXCQtF_new shifted1_P_23) (* (- 1) shifted2_x31_minus) (* (- 1) shifted2_x29_plus) shifted2_x29_minus shifted2_x27_plus (* (- 1) shifted2_x27_minus) shifted2_x24_plus (* (- 1) shifted2_x24_minus) (* (- 1) shifted2_x23_plus) shifted2_x23_minus (* (- 1) shifted2_x22_plus) shifted2_x22_minus (* (- 1) shifted2_x21_plus) shifted2_x21_minus (* (- 1) shifted2_x19_plus) shifted2_x19_minus shifted2_x18_plus (* (- 1) shifted2_x18_minus) (div UVgkblP_new shifted1_P_48) (* (- 1) shifted2_x14_minus) (* (- 1) shifted2_x9_plus) (- obWVHpT_new shifted1_P_47) (* (- 1) shifted2_x6_plus) shifted2_x6_minus ) (- 1) ) )(assert (>= (+ shifted2_x38_plus (* (- 1) shifted2_x38_minus) (* (- 1) (div ndfZUwN_new shifted1_P_46)) (div xnbQxWN_new shifted1_P_24) (* (- 1) shifted2_x35_plus) shifted2_x35_minus (* (- 1) shifted2_x34_plus) shifted2_x34_minus (* 2 shifted2_x33_plus) (* (- 2) shifted2_x33_minus) (* (- 1) shifted2_x27_plus) shifted2_x27_minus shifted2_x24_plus (* (- 1) shifted2_x24_minus) shifted2_x22_plus (* (- 1) shifted2_x22_minus) shifted2_x20_plus (* (- 1) shifted2_x20_minus) shifted2_x19_plus (* (- 1) shifted2_x19_minus) (* (- 2) shifted2_x13_plus) (* 2 shifted2_x13_minus) (* (- 1) shifted2_x8_plus) shifted2_x8_minus (* (- 1) shifted2_x7_plus) shifted2_x7_minus (* (- 1) shifted2_x5_plus) shifted2_x5_minus (* (- 1) (- (- BueQASA_new 883) shifted1_P_43)) shifted2_x1_minus ) 1 ) )(assert (>= (+ shifted2_x38_plus (* (- 1) shifted2_x38_minus) (* (- 1) shifted2_x35_plus) shifted2_x35_minus (* (- 1) shifted2_x31_plus) shifted2_x31_minus (* (- 2) shifted2_x27_plus) (* 2 shifted2_x27_minus) (* (- 1) shifted2_x23_plus) shifted2_x23_minus shifted2_x22_plus (* (- 1) shifted2_x22_minus) shifted2_x19_plus (* (- 1) shifted2_x19_minus) (* 4 shifted2_x18_plus) (* (- 4) shifted2_x18_minus) shifted2_x17_plus (* (- 1) shifted2_x17_minus) (* 2 (div UVgkblP_new shifted1_P_48)) (* (- 2) shifted2_x14_minus) (* (- 1) shifted2_x12_plus) (- gZwKvSn_new shifted1_P_51) shifted2_x11_plus (* (- 1) shifted2_x11_minus) shifted2_x6_plus (* (- 1) shifted2_x6_minus) (* (- 1) (- QFYTjoo_new shifted1_P_15)) shifted2_x0_minus ) 1 ) )(assert (>= (+ shifted2_x38_plus (* (- 1) shifted2_x38_minus) (* (- 1) shifted2_x37_plus) shifted2_x37_minus (* 2 shifted2_x30_plus) (* (- 2) shifted2_x30_minus) (* (- 1) shifted2_x23_plus) shifted2_x23_minus shifted2_x19_plus (* (- 1) shifted2_x19_minus) (* (- 1) shifted2_x17_plus) shifted2_x17_minus (* (- 1) shifted2_x16_plus) shifted2_x16_minus (* (- 2) shifted2_x11_plus) (* 2 shifted2_x11_minus) shifted2_x9_plus (* (- 1) (- obWVHpT_new shifted1_P_47)) (* (- 1) (- (- sopWFKn_new (- 756)) shifted1_P_37)) shifted2_x2_minus (* (- 1) shifted2_x0_plus) shifted2_x0_minus ) 0 ) )(assert (>= (+ shifted2_x39_plus (* (- 1) shifted2_x39_minus) (* (- 1) shifted2_x38_plus) shifted2_x38_minus shifted2_x33_plus (* (- 1) shifted2_x33_minus) (* (- 1) shifted2_x23_plus) shifted2_x23_minus shifted2_x22_plus (* (- 1) shifted2_x22_minus) shifted2_x19_plus (* (- 1) shifted2_x19_minus) shifted2_x17_plus (* (- 1) shifted2_x17_minus) shifted2_x10_plus (* (- 1) (- (- lRzOrzO_new 626) shifted1_P_63)) shifted2_x9_plus (* (- 1) shifted2_x9_minus) (* (- 1) shifted2_x7_plus) shifted2_x7_minus (* (- 1) shifted2_x6_plus) shifted2_x6_minus ) 0 ) )(assert (>= (+ shifted2_x39_plus (* (- 1) shifted2_x39_minus) (* (- 1) shifted2_x38_plus) shifted2_x38_minus (* (- 1) shifted2_x36_plus) shifted2_x36_minus (* (- 1) shifted2_x33_plus) shifted2_x33_minus shifted2_x32_plus (* (- 1) shifted2_x32_minus) (* (- 1) shifted2_x27_plus) shifted2_x27_minus (* 2 shifted2_x19_plus) (* (- 2) shifted2_x19_minus) shifted2_x11_plus (* (- 1) shifted2_x11_minus) (* (- 1) shifted2_x3_plus) (- DlqpfIW_new shifted1_P_16) (* (- 1) shifted2_x0_plus) shifted2_x0_minus ) (- 1) ) )(assert (>= (+ shifted2_x38_plus (* (- 1) shifted2_x38_minus) shifted2_x30_plus (* (- 1) shifted2_x30_minus) shifted2_x26_plus (* (- 1) shifted2_x26_minus) (* (- 1) shifted2_x23_plus) shifted2_x23_minus (div puEBwYN_new shifted1_P_34) (* (- 1) shifted2_x17_minus) shifted2_x16_plus (* (- 1) shifted2_x16_minus) shifted2_x7_plus (* (- 1) shifted2_x7_minus) shifted2_x6_plus (* (- 1) shifted2_x6_minus) (* (- 1) shifted2_x5_plus) shifted2_x5_minus (* 3 (- QFYTjoo_new shifted1_P_15)) (* (- 3) shifted2_x0_minus) ) 0 ) )(check-sat)(exit)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_arith_inv.h\r\nLine: 197\r\n!below_lower(v)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nSorry for dumping the unreduced formula, since this one is hard to reduce.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: ab9bcfd",
    "priority": 0
  },
  "7": {
    "body": "Hi all, \r\n\r\n```\r\n(declare-fun b () String)\r\n(declare-fun BmULJuj_new () String)\r\n(declare-fun a () String)\r\n(declare-fun shifted1_T2_2 () String)\r\n(declare-fun e () String)\r\n(declare-fun shifted2_value () String)\r\n(assert\r\n  (or\r\n    (and\r\n      (= (= \"\" e) (= e \"\"))\r\n      (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n      (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n      (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n      (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n      (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n      (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n      (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n      (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n      (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n      (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n      (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n      (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n      (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n      (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n      (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n      (not\r\n        (not (= (ite (= (str.at (str.substr\r\n                                   (str.substr BmULJuj_new (str.len shifted1_T2_2) (str.len shifted2_value))\r\n                                   0\r\n                                   (- (- (str.len (str.substr BmULJuj_new 0 (str.len shifted2_value))))))\r\n                                0)\r\n                        \"\")\r\n                        1\r\n                        0)\r\n             0)\r\n        )))))\r\n      (not\r\n        (not (= (ite (= (str.len (str.substr (str.substr b (str.len a) (str.len shifted2_value))\r\n                                             0\r\n                                             (- (- (str.len (str.substr BmULJuj_new (str.len shifted1_T2_2) (str.len shifted2_value))) 1) 0)))\r\n                        0)\r\n                     1\r\n                     0)\r\n                0)\r\n        )))\r\n      (not (= (ite (= (str.at (str.substr BmULJuj_new 0 (str.len shifted2_value)) 0) \"\\n\") 1 0) 0)))\r\n      (= 0 0)))\r\n      (= (ite (= (str.at (str.substr BmULJuj_new (str.len shifted1_T2_2) (str.len shifted2_value)) 0) \"\\r\") 1 0) 0))\r\n      (= (ite (= (str.at shifted2_value 0) \"\\n\") 1 0) 0))\r\n      (= (ite (= (str.at (str.substr b (str.len a) (str.len (str.substr BmULJuj_new (str.len shifted1_T2_2) (str.len shifted2_value)))) 0) \"\\t\") 1 0) 0))\r\n      (= (ite (= (str.at shifted2_value 0) \" \") 1 0) 0))\r\n      (= (ite (= (str.len (str.substr b (str.len a) (str.len shifted2_value))) 0) 1 0) 0)))))))))))))))))))))))))))))))))))))\r\n      (>= (- (str.len (str.substr shifted2_value 0 (- (- (str.len (str.substr BmULJuj_new (str.len shifted1_T2_2) (str.len shifted2_value))) 1) 0)))\r\n             (+ 0 1)) 0)))))))))))))))))))))))))))))))))\r\n      (>= 0 0)))))))))))))))))))))))))))))))))))))))))\r\n      (>= (- (+ (str.indexof (str.substr (str.substr b 0 (str.len shifted2_value))\r\n                                         0\r\n                                         (- (- (str.len (str.substr b (str.len a) (str.len shifted2_value))))))\r\n                             \" \" 0)\r\n                1))\r\n          0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\r\n      (>= (- (str.indexof (str.substr shifted2_value 0 (- (- (str.len shifted2_value) 1) 0)) \" \" 0)\r\n             0)\r\n          0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\r\n(assert (= b (str.++ a shifted2_value)(str.++ shifted1_T2_2 shifted2_value)))\r\n(check-sat)\r\n``` \r\non this formula `z3 --smt.string_solver=z3str3` gives `unsat` and prints out\r\n```\r\nunsat\r\nast_manager LEAKED: 13\r\nLeaked: #3038 := (str.++ ts1!tmp32[ts1!tmp32] $$_str11!tmp91[$$_str11!tmp91])\r\n(= x3!tmp60[x3!tmp60] #3038)\r\nid: 3662\r\n``` \r\nCVC4 as well as z3 without z3str3 option give a `sat` result on it.\r\n\r\nRevision: 18b8089\r\nOS: Ubuntu18.04",
    "priority": 0
  },
  "8": {
    "body": "Hi,\r\nthe following formula triggers a segfault when using `z3 smt.string_solver=z3str3`.\r\n\r\n```\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(declare-fun e () String)\r\n(declare-fun shifted1_T0_2 () String)\r\n(declare-fun shifted1_T1_2 () String)\r\n(declare-fun shifted1_T2_2 () String)\r\n(assert\r\n  (or\r\n    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n    (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and\r\n      (and (>= 1 0)))\r\n      (>= (+ (str.indexof (str.substr (str.substr a (str.len shifted1_T0_2) 0) 1 (- (str.len (str.substr a (str.len shifted1_T0_2) (str.len b))) )) \" \" 0) 1) 0))))))))\r\n      (>= (- 0) 0)))))))))))))))))))))\r\n      (>= 0 0)))))\r\n      (>= (- (str.indexof (str.substr b 1 (- (str.len (str.substr a (str.len shifted1_T0_2) (str.len b))) 1)) \" \" 0) 0) 0)))))))))))))))))))))))))))))))\r\n      (>= 0 0))))))))))))))\r\n      (>= 1 0)))))))\r\n      (>= 1 0))))))\r\n      (>= (- 0) 0))))))\r\n      (>= 0 0)))))))))))))))\r\n      (>= 1 0))\r\n      (>= (- (str.len (str.substr a (str.len shifted1_T0_2) (str.len b))) 1) 0))))))\r\n      (>= 1 0))))))\r\n      (>= (- (str.indexof (str.substr b 1 (- (str.len (str.substr a 0 (str.len b))) 1)) \" \" 0) 0) 0)))))))))))))))))))\r\n      (>= (- 0) 0)))\r\n      (>= (- (str.len b) 1) 0))))))))))))))))))))\r\n      (>= 1 0))))))))\r\n      (>= 0 0)))))))))))\r\n      (>= 0 0))))))\r\n      (>= 1 0))))\r\n      (>= 0 0)))))\r\n      (>= (- (str.len b) 1) 0)))))))\r\n      (>= (- (str.len (str.substr a 0 (str.len b))) 1) 0)))))                                                                                                                                                                                                    (>= 0 0))))))))))\r\n      (>= 1 0))))))))))))\r\n(assert (= e (str.++ (str.++ shifted1_T1_2 \"\") (str.++ shifted1_T2_2 \"2S3O9\"))))\r\n(check-sat)\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: 18b8089\r\n\r\n",
    "priority": 1
  },
  "9": {
    "body": "Hi,\r\n\r\nthe following formula causes an assertion failure when calling \"z3 --smt.string_solver=z3str3\".\r\n\r\nEDIT: we could it reduce the bug to the following:\r\n```\r\n(declare-fun s () String)\r\n(declare-fun x () Int)\r\n(assert (> x 6))\r\n(assert (>= (str.indexof s \"good\" x) 0))\r\n(check-sat\r\n```\r\n\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_justification.h\r\nLine: 184\r\nn1 != n2\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nRevision: 18b8089\r\nOS: Ubuntu 18.04",
    "priority": 1
  },
  "10": {
    "body": "Hi,\r\nFor this formula, \r\n```\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(declare-fun c () String)\r\n(declare-fun aa () String)\r\n(assert (>= (- (str.indexof (str.substr a 0 (str.len (str.substr b (str.len aa) (str.len c)))) \"*\" 0) 0) 0))\r\n(assert (>= (- (str.indexof (str.substr b 0 (str.len c)) \"*\" 0) 0) 0))\r\n(assert (str.in.re b (re.++ (str.to.re aa) (str.to.re c))))\r\n(check-sat)\r\n```\r\nz3str3 will throw out the following message:\r\n```\r\n$ z3 smt.string_solver=z3str3 file.smt2\r\nunknown\r\nast_manager LEAKED: 13\r\nLeaked: #1140 := (str.++ t0!tmp12[t0!tmp12] $$_str9!tmp48[$$_str9!tmp48])\r\n(= x3!tmp20[x3!tmp20] #1140)\r\nid: 1615\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 18b8089",
    "priority": 1
  },
  "11": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-const a String)\r\n(assert (str.in.re a (re.++ (str.to.re \"\") (re.* (str.to.re \"b\")))))\r\n(assert (str.in.re a (re.union (re.union (re.+ (str.to.re \"\")) (re.+ (str.to.re \"\"))) (str.to.re \"v\"))))\r\n(check-sat)    \r\n```\r\nZ3 reports `unsat`. But if I feed this model to the formula:\r\n```\r\n(define-fun a () String \"\")\r\n```\r\nz3 will report `sat`.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: ce06cd0",
    "priority": 1
  },
  "12": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(declare-fun c () String)\r\n(assert (str.in.re c (re.* (re.union (str.to.re \"aa\") (str.to.re \"\")))))\r\n(assert (= 0 (str.to.int (str.replace a b (str.at a (str.len a))))))\r\n(assert (= a (str.++ b c)))\r\n(check-sat)\r\n(get-model)\r\n```\r\nz3 will report sat and give the following model:\r\n```\r\n  (define-fun c () String\r\n    \"\")\r\n  (define-fun b () String\r\n    \"\")\r\n  (define-fun a () String\r\n    \"\")\r\n```\r\nIf I feed this model to the formula, z3 will report unsat.\r\n\r\nz3-4.8.5 and 4.8.6 also report sat on this case.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: f9b6e4e\r\n",
    "priority": 1
  },
  "13": {
    "body": "Hi, \r\n\r\nthe following formula triggers a crash in z3.\r\n\r\n```\r\n(declare-fun a () Real) \r\n(define-fun b () Real    (root-obj (+ (* (^ x 2)) (* (- 60) x) 1) 1)) \r\n(assert (= a b (/ a b))) \r\n(check-sat)    \r\n\r\n```\r\n\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/math/polynomial/upolynomial.cpp\r\nLine: 2756\r\nsign_a == eval_sign_at(sz, p, a)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n````\r\nOS: Ubuntu 18.04\r\nRevision: 3dcfbb8347485a01413bc85b2491598eec163c9e",
    "priority": 1
  },
  "14": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(declare-fun c () String)\r\n(declare-fun d () String)\r\n(assert \r\n(not (= \r\n        (str.suffixof (str.replace \"B\" (str.replace a b (str.at a (str.len a))) c) d) \r\n        (str.suffixof \"B\" (str.replace (str.replace a b (str.at a (str.len a))) (str.replace a b (str.at a (str.len a))) d)))))\r\n(assert (= a (str.++ b c)))\r\n(check-sat)\r\n(get-model)\r\n```\r\nz3 will incorrectly report sat and give a wrong model:\r\n```\r\n  (define-fun b () String\r\n    \"\")\r\n  (define-fun c () String\r\n    \"\")\r\n  (define-fun d () String\r\n    \"B\")\r\n  (define-fun a () String\r\n    \"\")\r\n```\r\nIf I feed this model to the formula, z3 will report unsat.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: bba9d11",
    "priority": 1
  },
  "15": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Int)\r\n(declare-fun b () String)\r\n(declare-fun c () String)\r\n(declare-fun d () String)\r\n(declare-fun f () String)\r\n(declare-fun e () Int)\r\n(declare-fun w () String)\r\n(declare-fun g () String)\r\n(declare-fun h () String)\r\n(declare-fun i () String)\r\n(declare-fun j () String)\r\n(declare-fun k () Bool)\r\n(declare-fun l () String)\r\n(declare-fun m () Int)\r\n(declare-fun n () Int)\r\n(declare-fun o () String)\r\n(declare-fun p () String)\r\n(declare-fun q () String)\r\n(declare-fun d () String)\r\n(declare-fun r () String)\r\n(declare-fun s () String)\r\n(declare-fun t () String)\r\n(declare-fun u () Bool)\r\n(declare-fun v () String)\r\n(assert (or\r\n            (and (=   (and (= l  (str.++ g h)g (str.++ i j))(= j \"__utmz=169413169.\")(not (str.in.re w (re.++   (str.to.re \"_\" )  (re.++   (str.to.re \"_\" ) (re.++  (str.to.re \"u\" \r\n) (re.++  (str.to.re \"t\" ) (re.++  (str.to.re \"m\" ) (re.++  (str.to.re \"z\" ) (re.++  (str.to.re \"=\" ) (re.++  (str.to.re \"1\" ) (re.++  (str.to.re \"6\" ) (re.++  (str.to.re \"9\" ) (r\r\ne.++  (str.to.re \"4\" ) (re.++  (str.to.re \"1\" ) (re.++  (str.to.re \"3\" ) (re.++  (str.to.re \"1\" ) (re.++  (str.to.re \"6\" ) (re.++  (str.to.re \"9\" )  (str.to.re \".\" )  ) ) ) ) ) ) \r\n) ) ) ) ) ) ) ) ) ) )))k (= \"\" l)) k)\r\n        (and (=\r\n                (and (= (div a e) m)(= (str.replace d h (str.at d (str.len d))) (str.++ o (str.replace (str.replace c w (str.at c (str.len c))) \"Mw7V\" (str.at c (str.len c)))))(= \r\nm (str.len s))(= (str.replace (str.replace c w (str.at c (str.len c))) \"Mw7V\" (str.at c (str.len c))) (str.++ q r))(= q (str.++ s t))(= (str.replace (str.replace f i (str.at f (st\r\nr.len f))) \"0oP6M\" (str.at f (str.len f))) \"__utmz=169413169.\")(not (str.in.re p (re.++   (str.to.re \"_\" )  (re.++   (str.to.re \"_\" ) (re.++  (str.to.re \"u\" ) (re.++  (str.to.re \"\r\nt\" ) (re.++  (str.to.re \"m\" ) (re.++  (str.to.re \"z\" ) (re.++  (str.to.re \"=\" ) (re.++  (str.to.re \"1\" ) (re.++  (str.to.re \"6\" ) (re.++  (str.to.re \"9\" ) (re.++  (str.to.re \"4\" )\r\n (re.++  (str.to.re \"1\" ) (re.++  (str.to.re \"3\" ) (re.++  (str.to.re \"1\" ) (re.++  (str.to.re \"6\" ) (re.++  (str.to.re \"9\" )  (str.to.re \".\" )  ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ))\r\n)\r\n                u\r\n                (= \"\" (str.substr b 0 (str.len (str.replace d h (str.at d (str.len d)))))))\r\n            u)))\r\n(assert (=  (div a n) n))\r\n(assert (= b c (str.++ (str.++ w \"Mw7V\") p)))\r\n(assert (= d (str.++ h v)))\r\n(assert (= f (str.++ (str.++ i \"0oP6M\") t)))\r\n(check-sat)\r\n```\r\nz3 will incorrectly report sat and give a wrong model:\r\n```\r\n(model\r\n  (define-fun p () String\r\n    \"__utmz=169413169.\\x00\")\r\n  (define-fun t () String\r\n    \"__utmz=169413169.\")\r\n  (define-fun n () Int\r\n    0)\r\n  (define-fun w () String\r\n    \"\")\r\n  (define-fun h () String\r\n    \"\\x00\")\r\n  (define-fun u () Bool\r\n    true)\r\n  (define-fun j () String\r\n    \"\")\r\n  (define-fun e () Int\r\n    0)\r\n  (define-fun o () String\r\n    \"\")\r\n  (define-fun i () String\r\n    \"\")\r\n  (define-fun q () String\r\n    \"__utmz=169413169.\")\r\n  (define-fun g () String\r\n    \"!0!\")\r\n  (define-fun s () String\r\n    \"\")\r\n  (define-fun l () String\r\n    \"\")\r\n  (define-fun a () Int\r\n    (- 1))\r\n  (define-fun m () Int\r\n    0)\r\n  (define-fun v () String\r\n    \"__utmz=169413169.\\x00\")\r\n  (define-fun r () String\r\n    \"\\x00\")\r\n  (define-fun f () String\r\n    \"0oP6M__utmz=169413169.\")\r\n  (define-fun d () String\r\n    \"\\x00__utmz=169413169.\\x00\")\r\n  (define-fun b () String\r\n    \"Mw7V__utmz=169413169.\\x00\")\r\n  (define-fun c () String\r\n    \"Mw7V__utmz=169413169.\\x00\")\r\n  (define-fun k () Bool\r\n    false)\r\n)\r\n```\r\nIf I feed this model to the formula, z3 will report unsat.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: bba9d11",
    "priority": 1
  },
  "16": {
    "body": "Hi,\r\n\r\nOn the following formula z3 gives an assertion failure\r\n\r\n```\r\n(declare-fun a () Int)\r\n(declare-fun b () Int)\r\n(declare-fun c () Int)\r\n(declare-fun d () Int)\r\n(declare-fun f () Int)\r\n(declare-fun e () Int)\r\n(declare-fun g () Int)\r\n(assert (or  (and (let ((?h (<= 0 e)) (?i (<= e f)) (?j (< f d))) (and ?h ?i ?j) ))    \r\n        (forall ((?k Int))    (= 0   ?k ) ) ))\r\n(assert (= g (div a c)))\r\n(assert (= d (div b g)))\r\n(assert (= g (div b d)))\r\n(check-sat)\r\n```\r\n\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_arith_nl.h\r\nLine: 1553\r\nn != nm\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 74aa47f ",
    "priority": 1
  },
  "17": {
    "body": "Hi,\r\n\r\nHere is a QF_NRA crash case. \r\n\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(assert (or (= c 0) (> (* 2 (/ a b)) 0)))\r\n(assert (= b (/ a d) d (/ a b)))\r\n(check-sat)\r\n```\r\n\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/nlsat/nlsat_solver.cpp\r\nLine: 1154\r\nvalue(l) == l_undef\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n\r\n```\r\nRevision: 0b06a9b\r\nOS: Ubuntu 18.04",
    "priority": 1
  },
  "18": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun p () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun k () Real)\r\n(declare-fun e () Real)\r\n(declare-fun q () Real)\r\n(assert (or\r\n            (not (exists ((f Real))\r\n                (=>\r\n                (and\r\n                    (>= c 0)\r\n                    (> (/ b q) 2)\r\n                    (>= (/ p q) 1)\r\n                    (<= d 12)\r\n                    (>= (/ p q) (- (* 1 k)))\r\n                    (<= (/ p q) (+ 10 k)))\r\n                (<= (+ (* (- 2) (- a e)) d) 12))))\r\n            (exists ((o Real))\r\n                (forall ((g Real))\r\n                    (exists ((h Real))\r\n                        (and\r\n                            (or\r\n                                (>= g (* (- 3) h) 57)\r\n                                (and (> (* 79 o) 8 (+ g h) 0) (= h 0))\r\n                                (< 0 (+ g h) 0))\r\n                            (> (+ (* (- 97) o) g) 0)))))))\r\n(assert (= a (+ c e)(* d q)(/ b q)))\r\n(assert (= q (/ b k)))\r\n(check-sat)\r\n(get-model)\r\n```\r\nZ3 reports `sat` on this `unsat` formula, and gives a wrong model:\r\n```\r\n(model \r\n  (define-fun k () Real\r\n    (- 6.0))\r\n  (define-fun b () Real\r\n    (- 6.0))\r\n  (define-fun q () Real\r\n    1.0)\r\n  (define-fun p () Real\r\n    5.0)\r\n  (define-fun d () Real\r\n    (- 6.0))\r\n  (define-fun e () Real\r\n    (- (/ 1.0 8.0)))\r\n  (define-fun c () Real\r\n    (- (/ 47.0 8.0)))\r\n  (define-fun a () Real\r\n    (- 6.0))\r\n)\r\n```\r\nIf I feed this model to the formula, z3 will report `unsat`\r\n\r\nOS: Ubuntu 18.04\r\nRevision: a1d3aca",
    "priority": 1
  },
  "19": {
    "body": "For the following formula z3 (configured with `d` option) crashes with an assertion error.\r\n\r\n```\r\n(set-logic NRA)                                                                 \r\n(assert                                                                         \r\n(forall ((a Real))                                                              \r\n    (exists ((b Real))                                                          \r\n        (forall ((c Real))                                                      \r\n            (exists ((|| Real))                                                 \r\n                (forall ((d Real))                                              \r\n                    (exists ((e Real))                                          \r\n                        (forall ((s Real))                                      \r\n                            (exists ((f Real))                                  \r\n                                (let ((g 0) (h 0) (i 0) (j c))        \r\n                                (let ((k (<= j i)) (l s) (z d) (w f))          \r\n                                (let ((m w) (n 0))                        \r\n                                (let ((o (<= a n)))            \r\n                                (let ((x (or o (<= m z )))(p ||)         \r\n                                      (q e) (r (<= b g)))  \r\n                                      (or r (<= q p) x (<= l h) k))) ) ) ) ) ) ) ) ) ) ) ) ) \r\n                                                                                \r\n(assert (exists ((y Real)) (forall ((t Real)) (exists ((u Real)) \r\n    (let ((v u)) (or (and (< u 0) (or (= y 0)(= v 0))) (<= t 0)))))))                                   \r\n(check-sat)\r\n```\r\n\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/nlsat/nlsat_solver.cpp\r\nLine: 1150\r\nmax_var(l) == m_xk\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nRevision: 69abe16\r\nOS: Ubuntu 18.04",
    "priority": 1
  },
  "20": {
    "body": "On the following formula z3 crashes with assertion violation (We configured z3 with the  `-d` option).\r\n\r\n```\r\n(set-logic NRA)\r\n(declare-fun a () Real)\r\n(assert  \r\n    (forall ((|| Real) )\r\n        (exists ((b Real) )\r\n            (forall ((c Real) )\r\n                (exists ((d Real) )\r\n                    (forall ((r Real) )\r\n                        (exists ((e Real) )\r\n                            (forall ((y Real) )\r\n                                (exists ((f Real) )\r\n                                    (let ((t (<= r 3)) (g 7)(h 7)(i 5)(j y)) \r\n                                    (let ((k (<= j i)) (l 0)) \r\n                                    (let ((u (<= b l)) (v (<= e h)) (m 0)(n  ||)) \r\n                                    (let ((o (<= n m)) (w (<=  c g)) (p f))                       \r\n                                    (let ((q (<= (+ d p) 2))) (or  q  w o  v  u  k t)))))))))))))) \r\n)\r\n(assert (exists ((s Real)) (forall ((x Real)) (or (and (>= a 0) (= x 0)) (= s 0))) ))\r\n(check-sat)\r\n```\r\n\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/nlsat/nlsat_solver.cpp\r\nLine: 1284\r\ncheck_satisfied(m_clauses)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n\r\n```\r\nOS: Ubuntu 18.04\r\nRevision:   77ef40a",
    "priority": 1
  },
  "21": {
    "body": "Hi, for the following formula z3 (compiled with assertions enabled) crashes with  an assertion violation\r\n\r\n```\r\n(declare-fun a () String)                                                       \r\n(declare-fun b () String)                                                       \r\n(declare-fun c () String)                                                       \r\n(assert                                                                         \r\n  (not                                                                          \r\n    (= (str.substr a 0 (str.len b)) \"\")                                         \r\n  )                                                                             \r\n)                                                                               \r\n(assert                                                                         \r\n  (and                                                                          \r\n    (=                                                                          \r\n      (ite                                                                      \r\n        (=                                                                      \r\n          (str.len                                                              \r\n            (str.substr (str.replace (str.replace a b \"\") \"29M8u\" \"\") 1 (- (str.len c) 1))\r\n          )                                                                     \r\n          0                                                                     \r\n        )                                                                       \r\n        1                                                                       \r\n        0                                                                       \r\n      )                                                                         \r\n      (ite                                                                      \r\n        (=                                                                      \r\n          (str.at (str.replace (str.replace a b \"\") \"29M8u\" \"\") 0)              \r\n          \"\"                                                                    \r\n        )                                                                       \r\n        1                                                                       \r\n        0                                                                       \r\n      )                                                                         \r\n      (ite                                                                      \r\n        (=                                                                      \r\n          (str.len (str.replace (str.replace a b \"\") \"29M8u\" \"\"))               \r\n          0                                                                     \r\n        )                                                                       \r\n        1                                                                       \r\n        0                                                                       \r\n      )                                                                         \r\n      0                                                                         \r\n    )                                                                           \r\n    (>=                                                                         \r\n      (-                                                                        \r\n        (str.len (str.replace (str.replace a b \"\") \"29M8u\" \"\"))                 \r\n        1                                                                       \r\n      )                                                                         \r\n      0                                                                         \r\n    )                                                                           \r\n  )                                                                             \r\n)                                                                               \r\n(check-sat)                                                                           \r\n```\r\n\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_seq.cpp\r\nLine: 2240\r\nlen1 == len2\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 69abe16",
    "priority": 0
  },
  "22": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () String)     \r\n(declare-fun b () String)     \r\n(declare-fun c () String)     \r\n(assert (= (str.substr a 0 (str.len b)) \"\"))     \r\n(assert (=      \r\n            (ite      \r\n                (= (str.len (str.substr (str.replace (str.replace a b \"\") \"29M8u\" \"\") 1 (- (str.len c) 1))) 0) 1 0\r\n            )      \r\n            0       \r\n        )      \r\n)     \r\n(check-sat)   \r\n```\r\nZ3 will crash with this error message:\r\n```\r\nFailed to verify: get_length(e, len1)\r\n*** stack smashing detected ***: <unknown> terminated\r\n[1]    65175 abort      z3/build-2019-09-14-69abe16-no_asserts/z3\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 69abe16\r\n\r\n",
    "priority": 1
  },
  "23": {
    "body": "Hi, \r\nFor this formula:\r\n```\r\n(set-logic NRA)\r\n(assert\r\n (exists ((a Real))\r\n  (forall ((b Real))\r\n   (exists ((c Real))\r\n    (and\r\n     (< (+ a (* 2 c)) 0)\r\n     (or (not (= a 0)) (< b 0))\r\n     (not (= (+ b c) 0))\r\n     (> c 0)\r\n     )\r\n    )\r\n   )\r\n  )\r\n )\r\n(check-sat)   \r\n```\r\nZ3 latest version will hang on it:\r\n```\r\n$ timeout -s 9 120 z3 test.smt2\r\nKilled\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 0c972b8bee766c92f48a56b172fba3a33cd359a2",
    "priority": 1
  },
  "24": {
    "body": "Hi,\r\n\r\nfor this formula, we fed the model to formula and got `unsat`. Double-checking with CVC4 yields\r\n`unsat`.\r\n\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun f () Real)\r\n(declare-fun e () Real)\r\n(declare-fun g () Real)\r\n(declare-fun j () Real)\r\n(declare-fun k () Real)\r\n(declare-fun h () Real)\r\n(declare-fun m () Real)\r\n(declare-fun i () Real)\r\n(assert\r\n  (not\r\n    (exists\r\n      ((l Real))\r\n      (=>\r\n        (and\r\n          (=> (<= 0 l) (< l g (* e l) 0))\r\n          (>= (/ c m) 0)\r\n        )\r\n        (<=\r\n          (- f k)\r\n          (*\r\n            (/ 1 2)\r\n            (+\r\n              (* (* 2 (/ c m)) j)\r\n              (* 2 (- f k))\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )\r\n)\r\n(assert (= h (/ a e) (* b h)))\r\n(assert (= h (/ b g) (/ c m)))\r\n(assert (= j (/ d i)))\r\n(assert (= i (/ d j)))\r\n(check-sat)\r\n\r\n```\r\nModel:\r\n```\r\n  (define-fun j () Real\r\n    (- 1.0))\r\n  (define-fun d () Real\r\n    (- (/ 1.0 2.0)))\r\n  (define-fun i () Real\r\n    (/ 1.0 2.0))\r\n  (define-fun c () Real\r\n    (- 1.0))\r\n  (define-fun m () Real\r\n    0.0)\r\n  (define-fun b () Real\r\n    1.0)\r\n  (define-fun g () Real\r\n    1.0)\r\n  (define-fun a () Real\r\n    (- (/ 1.0 8.0)))\r\n  (define-fun e () Real\r\n    (- (/ 1.0 8.0)))\r\n  (define-fun h () Real\r\n    1.0)\r\n  (define-fun f () Real\r\n    0.0)\r\n  (define-fun k () Real\r\n    0.0)\r\n```\r\n\r\nOS: Ubuntu 18.05\r\nRevision: 0c972b8",
    "priority": 1
  },
  "25": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(set-logic NRA)\r\n(assert\r\n    (forall\r\n      ((b Real))\r\n      (exists\r\n        ((c Real))\r\n        (and\r\n          (< c 4)\r\n          (not (= c (- 2)))\r\n          (not (= c 0))\r\n          (or\r\n            (and\r\n              (not\r\n                (= (+ (* 8 b) (* 5 c)) 8)\r\n              )\r\n              (<\r\n                (+ (* (- 80) b) (* (- 6) c))\r\n                5\r\n              )\r\n            )\r\n            (and\r\n              (< (* (- 3) b) 1)\r\n              (>= b 8)\r\n            )\r\n        )\r\n      )\r\n    )\r\n  )\r\n)\r\n(check-sat)\r\n```\r\nlatest Z3 reports `sat` on this `unsat` formula, while z3-4.8.5-stable reports `unsat`.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 63840806d84c4205952fe97a572b4cbf398ad273",
    "priority": 1
  },
  "26": {
    "body": "Hi, \r\nFor this formula:\r\n```\r\n(set-logic NRA)\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun f () Real)\r\n(assert\r\n  (=>\r\n    (exists\r\n      ((e Real))\r\n      (=> (and (= a 2) (< c b)) (or (< f 0) (> (* e f) f) (= a 2)))\r\n    )\r\n    (forall\r\n      ((i Real))\r\n      (exists\r\n        ((j Real))\r\n        (exists\r\n          ((k Real))\r\n          (forall\r\n            ((l Real))\r\n            (<=\r\n              (+ j (* 17 l) (* 2 k) (* (- 1) i))\r\n              1\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )\r\n)\r\n(check-sat)\r\n(get-model)\r\n```\r\nz3 will report `sat`, and give a model:\r\n```\r\n(model \r\n  (define-fun f () Real\r\n    0.0)\r\n  (define-fun b () Real\r\n    0.0)\r\n  (define-fun a () Real\r\n    0.0)\r\n  (define-fun c () Real\r\n    0.0)\r\n  (define-fun d () Real\r\n    0.0)\r\n)\r\n\r\n```\r\nIf I feed this model to the formula, z3 will report `unsat`.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 0d3fed9a6ad844c0b65130b2013e7372dd16d92f",
    "priority": 1
  },
  "27": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () String) \r\n(declare-fun b () String) \r\n(declare-fun c () String)\r\n(declare-fun d () String)\r\n(declare-fun e () String)\r\n(assert\r\n  (not\r\n    (=\r\n      (str.replace\r\n        (str.++ \"A\" (str.substr a 0 (str.len c)))\r\n        \"A\"\r\n        (str.substr b 0 (str.len d))\r\n      )\r\n      (str.replace (str.substr a 0 (str.len c)) \"\" d)\r\n    )\r\n  )\r\n)\r\n(assert (= b (str.++ d e)))\r\n(check-sat)   \r\n(get-model)\r\n```\r\nz3 reports `sat` on this formula and gives a incorrect model:\r\n```\r\n(model \r\n  (define-fun d () String\r\n    \"!0!\")\r\n  (define-fun e () String\r\n    \"\")\r\n  (define-fun b () String\r\n    \"!0!\")\r\n  (define-fun a () String\r\n    \"\")\r\n  (define-fun c () String\r\n    \"\")\r\n)\r\n```\r\nIf I feed this model to the formula, z3 will repot `unsat`\r\n\r\nOS: Ubuntu 18.04\r\nReversion: 68e4ed3",
    "priority": 1
  },
  "28": {
    "body": "Hi, \r\nthe following unsatisfiable formula is reported satisfiable by z3 \r\n\r\n````\r\n(declare-fun x () String)\r\n(declare-fun y () String)\r\n(declare-fun z () String)\r\n(assert\r\n  (not\r\n    (=\r\n      (str.contains y (str.replace \"A\" (str.replace (str.++ x z) x \"\") z))\r\n      (str.contains y \"A\")\r\n    )\r\n  )\r\n)\r\n(check-sat)     \r\n`````\r\nWe have double-checked the formula with CVC4 which gives unsat. We fed the model to the formula which is unsat as well. \r\n\r\nRevision: 000e485 \r\nOS: Ubuntu 18.04 ",
    "priority": 1
  },
  "29": {
    "body": "Hi, \r\nfor this formula z3 gives a wrong model \r\n\r\n````\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(declare-fun f () Real)\r\n(declare-fun g () Real)\r\n(declare-fun h () Real)\r\n(declare-fun i () Real)\r\n(declare-fun j () Real)\r\n(declare-fun k () Real)\r\n(assert\r\n  (not\r\n    (exists\r\n      ((l Real))\r\n      (=>\r\n        (and\r\n          (=\r\n            (<= 0 l)\r\n            (>= (+ (* e l) (/ c j)) 0)\r\n          )\r\n          (>= (/ b i) 0)\r\n        )\r\n        (<=\r\n          (- d g)\r\n          (*\r\n            (/ 1 2)\r\n            (+\r\n              (* e (* (/ b i) (/ b i)))\r\n              (* (* 2 (/ b i)) k)\r\n              (* 2 (- d g))\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )\r\n)\r\n(assert (= h (/ a e) (* f f)))\r\n(assert (= k (/ c j) (/ c k)))\r\n(check-sat)\r\n(get-model)\r\n```` \r\n\r\nModel:\r\n````  \r\n(define-fun k () Real\r\n    (- (/ 1.0 4.0)))\r\n  (define-fun c () Real\r\n    (/ 1.0 16.0))\r\n  (define-fun j () Real\r\n    (- (/ 1.0 4.0)))\r\n  (define-fun a () Real\r\n    (- 1.0))\r\n  (define-fun e () Real\r\n    0.0)\r\n  (define-fun b () Real\r\n    (- 1.0))\r\n  (define-fun i () Real\r\n    (- 1.0))\r\n  (define-fun f () Real\r\n    (- 1.0))\r\n  (define-fun h () Real\r\n    1.0)\r\n  (define-fun d () Real\r\n    0.0)\r\n  (define-fun g () Real\r\n    0.0)\r\n````\r\nThe model is wrong since the first `and` evaluates to `false` as `-1/4 >= 0` does not hold for \r\n` (>= (+ (* e l) (/ c j)) 0)`. In turn, the outermost   `(=>` evaluates to true which is negated by a `not`, i.e. the first assertion simplifies to false. Feeding the model to the formula results in an assertion violation\r\n\r\n````\r\nASSERTION VIOLATION\r\nFile: ../src/qe/qsat.cpp\r\nLine: 631\r\nvalidate_defs(\"check_sat\")\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```` \r\n\r\nRevision: 000e485794992c2e30a2052ce5be65f1e55e331d (assertions enabled)\r\nOS: Ubuntu 18.04\r\n\r\n",
    "priority": 1
  },
  "30": {
    "body": "Here is another unsat string formula which z3 reports sat. Both arguments to the outermost or \r\nare unsat. For the second argument there is a `false` included in the formula (see the \"MARKER\" comment). Or's first argument, the not, has a \"(=\" inside of it, which has two equivalent replace expressions (i.e. that part should be satisfiable) which makes it unsat.\r\n\r\nCross-checking: z3 4.8.5: `sat`,  CVC4: `unsat` \r\n\r\n```\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(declare-fun c () String)\r\n(declare-fun d () String)\r\n\r\n(assert\r\n  (or\r\n    ;; unsat\r\n    (not\r\n      ;; sat\r\n      (=\r\n        (str.replace\r\n          (str.++ (str.substr a 0 (str.len b)) (str.substr a 0 (str.len b)))\r\n          \"B\"\r\n          c\r\n        )\r\n        (str.++ (str.replace b \"B\" c) (str.substr a 0 (str.len b)))\r\n      )\r\n    )\r\n    ;; unsat\r\n    (and\r\n      false ;; MARKER\r\n      (=\r\n        (ite\r\n          (=\r\n            (str.at (str.substr a (str.len b) (str.len d)) (- (str.len d) 1))\r\n            \"\"\r\n          )\r\n          1\r\n          0\r\n        )\r\n        0\r\n      )\r\n      (=\r\n        (ite\r\n          (=\r\n            (str.at (str.substr a (str.len b) (str.len d)) (- (str.len d) 1))\r\n            \"\r\n            \"\r\n          )\r\n          1\r\n          0\r\n        )\r\n        0\r\n      )\r\n    )\r\n  )\r\n)\r\n(assert (= a (str.++ b d)))\r\n(check-sat)\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: ffc696e63424d18b6bb989844bac4c84ea8dfa12",
    "priority": 1
  },
  "31": {
    "body": "Hi \r\nFor this unsatisfiable QF_SLIA formula, z3 reports `sat`.  We also checked z3 v. 4.8.5 and CVC4, both correctly report `unsat`.\r\n\r\n```\r\n(declare-fun a () String)\r\n(declare-fun b () Int)\r\n(declare-fun c () String)\r\n(declare-fun d () String)\r\n(declare-fun g () Int)\r\n(declare-fun e () String)\r\n(declare-fun f () Int)\r\n(assert\r\n  (or\r\n    (not\r\n      (=\r\n        (str.prefixof (str.replace c \"A\" \"A\") d)\r\n        (str.prefixof (str.substr a 0 (str.len c)) d)\r\n      )\r\n    )\r\n    (not (= (str.substr \"A\" f f) \"\"))\r\n  )\r\n)\r\n(assert (= a (str.++ c e)))\r\n(assert (= b (div b f) f (div b g)))\r\n(check-sat)\r\n````\r\nOS: Ubuntu 18.04\r\nRevision\u00c2\u00b4:  ffc696e63424d18b6bb989844bac4c84ea8dfa12",
    "priority": 1
  },
  "32": {
    "body": "Hi, \r\nfor the following formula z3 will incorrectly report `sat`.\r\n\r\n````\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(declare-fun c () String)\r\n(declare-fun d () String)\r\n(assert (= a (str.++ b d))) \r\n(assert\r\n  (or\r\n    (and\r\n        (= (str.indexof (str.substr a 0 (str.len b)) \"=\" 0) 0)\r\n        (= (str.indexof b \"=\" 0) 1) \r\n    ) \r\n    (not \r\n      (= (str.suffixof \"A\" d) (str.suffixof \"A\" (str.replace c c d)))\r\n    )\r\n  )\r\n)\r\n(check-sat)\r\n````\r\nWe crosschecked with CVC4 which correctly returns `unsat` on this formula.\r\n\r\nOS: Ubuntu18.04\r\nRevision: eea041383d171b09964d443553096faf75ce5b4f",
    "priority": 1
  },
  "33": {
    "body": "Hi, \r\n\r\nfor this unsatisfiable formula, z3 reports `sat`. Feeding the model to the formula gives `unsat`.\r\nWe cross-checked with z3-4.8.5 and CVC4. Both  give the correct answer -  `unsat`.\r\n\r\n```\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(declare-fun f () Real)\r\n(declare-fun o () Real)\r\n(declare-fun g () Real)\r\n(declare-fun h () Real)\r\n(declare-fun i () Real)\r\n(declare-fun j () Real)\r\n(declare-fun k () Real)\r\n(declare-fun l () Real)\r\n(declare-fun m () Real)\r\n(declare-fun n () Real)\r\n(declare-fun q () Real)\r\n(declare-fun p () Real)\r\n(assert\r\n  (or\r\n    (and\r\n      (not\r\n        (exists\r\n          ((ac Real))\r\n          (=>\r\n            (= c e)\r\n            (=\r\n              (= 0.0 b)\r\n              (= (= (<= ac b) (<= 0 h)) (= o 2.0))\r\n            )\r\n          )\r\n        )\r\n      )\r\n      (not\r\n        (exists\r\n          ((a Real))\r\n          (=>\r\n            (and\r\n              (=>\r\n                (<= l 0)\r\n                (and (<= (* c l) (- d)) (<= l k))\r\n              )\r\n              (= f i)\r\n              (<= 0.0 a)\r\n              (<\r\n                (+ i (/ 0 (* 2.0 g)))\r\n                f\r\n              )\r\n              (<= j d)\r\n              (< 0.0 k)\r\n            )\r\n            (< f 0 (/ 0 0) f)\r\n          )\r\n        )\r\n      )\r\n    )\r\n    (not\r\n      (exists\r\n        ((ae Real))\r\n        (=>\r\n          (and\r\n            (=>\r\n              (<= ae m)\r\n              (>=\r\n                (+ n (* (- 5) (* ae ae)) (* ae q))\r\n                0\r\n              )\r\n            )\r\n            (=\r\n              n\r\n              (+ (* 5 (* p p)) (* q p))\r\n            )\r\n            (>= p 0)\r\n            (<= p (/ 6 5))\r\n          )\r\n          (<= (+ m p) (/ 16 5))\r\n        )\r\n      )\r\n    )\r\n  )\r\n)\r\n(check-sat)\r\n```\r\nRevision: ffc696e63424d18b6bb989844bac4c84ea8dfa12\r\nOS: Ubuntu18.04",
    "priority": 1
  },
  "34": {
    "body": "Hi, \r\nFor this formula:\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun d () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun o () Real)\r\n(declare-fun g () Real)\r\n(declare-fun k () Real)\r\n(declare-fun l () Real)\r\n(declare-fun e () Real)\r\n(declare-fun f () Real)\r\n(declare-fun m () Real)\r\n\r\n(assert (or\r\n    (not (exists ((h Real))\r\n            (=>\r\n                (and (= (<= h (/ d k)) (>= (+ (* c h) (/ b m)) 0)) (>= o 0))\r\n                (<= g (* (/ 1 2) (+ (* c (/ d k) (/ d k)) (* (* 2 (/ d k)) o) (* 2 g)))))))\r\n    (not (exists ((i Real))\r\n        (=> (> l 0) (= (>= e 0) (= (= (<= i e) (<= 0 f)) (= m 2))))))))\r\n(assert (= a  (/ a c)))\r\n(assert (= o m (/ b o)))\r\n(check-sat)\r\n(get-model)\r\n```\r\nz3 reports `sat` on this `unsat` formula and gives an incorrect model:\r\n```\r\n  (define-fun o () Real\r\n    1.0)\r\n  (define-fun b () Real\r\n    1.0)\r\n  (define-fun a () Real\r\n    (- (/ 1.0 2.0)))\r\n  (define-fun c () Real\r\n    1.0)\r\n  (define-fun m () Real\r\n    1.0)\r\n  (define-fun d () Real\r\n    (/ 1.0 8.0))\r\n  (define-fun k () Real\r\n    0.0)\r\n  (define-fun f () Real\r\n    (- (/ 1.0 8.0)))\r\n  (define-fun e () Real\r\n    1.0)\r\n  (define-fun l () Real\r\n    1.0)\r\n```\r\nIf I feed this model to the formula, z3 will report `unsat`.\r\nz3-4.8.5 stable version will hang on this case.\r\n\r\nOS:Ubuntu18.04\r\nRevision: 9fa9aa09ff12d81ae0c2bcbf5225d305eda242e2\r\n\r\n\r\n",
    "priority": 1
  },
  "35": {
    "body": "Changing the order of the first two asserts changes the checking result from `unsat` to `sat`. Renaming `shifted1_value1` changes the checking result as well. CVC4 gives `sat` for this formula. We tried our best to reduce the formula, but couldn't get it smaller.    \r\n\r\n```\r\n(declare-fun a () String)  \r\n(declare-fun b () String) \r\n(declare-fun c () String) \r\n(declare-fun d () String)  \r\n(declare-fun shifted1_value1 () String) \r\n(declare-fun f () String)   \r\n(declare-fun g () String) \r\n\r\n(assert (not (str.contains f \"H\")))\r\n\r\n(assert \r\n    (and \r\n        (not (str.contains (str.substr c 0 (str.len f)) \"G\")) \r\n        (not (str.contains (str.substr c 0 (str.len f)) \"F\")) \r\n    )\r\n)\r\n\r\n(assert (= d \"cachecontrol\"))\r\n(assert \r\n    (and \r\n        (not (str.contains f \"E\")) \r\n        (not (str.contains f \"D\")) \r\n        (not (str.contains f \"C\"))\r\n    )\r\n)\r\n(assert \r\n    (and \r\n        (not (str.contains (str.substr c 0 (str.len f)) \"A\")) \r\n        (not (= (str.at (str.substr c 0 (str.len f)) (- (str.len f) 1)) \"\\v\"))\r\n    )\r\n)\r\n(assert (not (= (str.at f (- (str.len f) 1)) \"\\r\")))\r\n(assert \r\n    (and \r\n        (not (= (str.at (str.substr c 0 (str.len f)) (- (str.len (str.substr c 0 (str.len f))) 1)) \"\\n\"))\r\n        (not (= (str.at (str.substr c 0 (str.len f)) (- (str.len f) 1)) \"\\t\")) \r\n        (not (= (str.at (str.substr c 0 (str.len f)) (- (str.len f) 1)) \" \"))\r\n    )\r\n)         \r\n(assert (not (= (str.at f 0) \"\\f\")))\r\n(assert \r\n    (and   \r\n        (not (= (str.at (str.substr c 0 (str.len f)) 0) \"\\v\")) \r\n        (not (= (str.at (str.substr c 0 (str.len f)) 0) \"\\r\"))\r\n    )\r\n)\r\n(assert \r\n    (and \r\n        (not (= (str.at (str.substr c 0 (str.len f)) 0) \"\\v\")) \r\n        (not (= (str.at (str.substr c 0 (str.len f)) 0) \"\\r\")) \r\n    )\r\n)\r\n(assert \r\n    (and \r\n        (not (= (str.at f 0) \"\\n\")) \r\n        (not (= (str.at f 0) \"\\t\"))\r\n        (= (str.indexof f \"=\" 0) (- 1)) \r\n        (not (= (str.len f) 0)) \r\n    )\r\n)\r\n(assert\r\n    (and\r\n        (not (= ( str.at (str.substr c 0 (str.len f)) 0) \" \"))\r\n        (= ( str.indexof (str.substr c 0  (str.len f)) \"=\" 0) (- 1)) \r\n    )\r\n)\r\n\r\n(assert (not (str.contains f \",\")))\r\n\r\n(assert \r\n(<= 0 (+ (str.indexof (str.substr shifted1_value1 0 (str.indexof (str.substr b 0 (str.len shifted1_value1)) \"=\" 0)) \"N\" 0) 1))  \r\n)\r\n(assert \r\n    (<= 0 (- (str.len ( str.substr (str.substr b 0 (str.len shifted1_value1)) 0 (- ( str.indexof shifted1_value1 \"=\" 0) 0))) (+ ( str.indexof ( str.substr (str.substr b 0 (str.len shifted1_value1)) 0 (- ( str.indexof shifted1_value1 \"=\" 0) 0)) \"N\" 0) 1))) \r\n)\r\n(assert \r\n    (<= 0 (- (+ ( str.indexof ( str.substr (str.substr b 0 (str.len shifted1_value1)) 0  ( str.indexof (str.substr b 0 (str.len shifted1_value1)) \"=\" 0)) \"N\" 0) 1)))\r\n)\r\n(assert \r\n    (<= 0 (+ ( str.indexof ( str.substr (str.substr b 0 (str.len shifted1_value1)) 0 (- ( str.indexof shifted1_value1 \"=\" 0) 0)) \"N\" 0) 1)) \r\n)\r\n(assert \r\n(<= 0 (- (str.len ( str.substr shifted1_value1 0 (- ( str.indexof (str.substr b 0 (str.len shifted1_value1)) \"=\" 0) 0))) (+ ( str.indexof ( str.substr shifted1_value1 0 (- (str.indexof (str.substr b 0 (str.len shifted1_value1)) \"=\" 0) 0)) \"N\" 0) 1))) \r\n)\r\n(assert \r\n(<= 0 (- (str.len ( str.substr shifted1_value1 0 (- ( str.indexof (str.substr b 0 (str.len shifted1_value1)) \"=\" 0) 0))) (+ ( str.indexof ( str.substr shifted1_value1 0 (- (str.indexof (str.substr b 0 (str.len shifted1_value1)) \"=\" 0) 0)) \"N\" 0) 1))) \r\n)\r\n(assert\r\n(<= 0 (- (str.len ( str.substr shifted1_value1 0 (- ( str.indexof shifted1_value1 \"=\" 0) 0))) (+ ( str.indexof ( str.substr shifted1_value1 0 (- ( str.indexof shifted1_value1 \"=\" 0) 0)) \"N\" 0) 1)))  \r\n)\r\n(assert (<= 0 (str.indexof (str.substr b 0 (str.len shifted1_value1)) \"=\" 0)))\r\n(assert (<= 0 (- (str.indexof shifted1_value1 \"=\" 0))))\r\n(assert (<= 0 (+ (str.indexof (str.substr b 0 (str.len shifted1_value1)) \"=\" 0) 1)))\r\n(assert (<= 0 (- (str.len (str.substr b 0 (str.len shifted1_value1)))  (+ ( str.indexof shifted1_value1 \"=\" 0) 1))) )\r\n(assert (<= 0 (-  (+ ( str.indexof (str.substr c 0 (str.len f)) \"S\" 0) 1))))\r\n(assert (<= 0 (- (str.len f) (+ ( str.indexof f \"S\" 0) 1))))\r\n(assert (<= 0 (- (str.len (str.substr c 0 (str.len f))) (+ ( str.indexof (str.substr c 0 (str.len f)) \"S\" 0) 1))))\r\n(assert (<= 0  (+ ( str.indexof f \"S\" 0) 1)))\r\n(assert (<= 0 (+ (str.indexof (str.substr c 0 (str.len f)) \"S\" 0) 1)))\r\n(assert (<= 0 (- (str.len (str.substr c 0 (str.len f))) (+ ( str.indexof f \"S\" 0) 1))))  \r\n(assert (= (not (= \"\" g)) true (= (str.replace (str.replace a d \"\") \"Pkgwt\" \"\") \"Example:\"))) \r\n(assert (= a (str.++ (str.++ d \"Pkgwt\") g))) \r\n(assert (= b (str.++ shifted1_value1 g))) \r\n(assert (= c (str.++ f g))) \r\n(check-sat)\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: e2d91ce1fcdded463bb2c9ae21317641e406eddb ",
    "priority": 1
  },
  "36": {
    "body": "Hi, \r\nFor this formula:\r\n```\r\n(declare-fun a () Real) \r\n(declare-fun b () Real) \r\n(declare-fun c () Real) \r\n(declare-fun d () Real) \r\n(declare-fun e () Real) \r\n(declare-fun f () Real) \r\n(declare-fun g () Real)\r\n(declare-fun j () Real) \r\n(declare-fun k () Real) \r\n(assert (or\r\n    (not                  ;false\r\n        (=>               \r\n            (and            \r\n                (= k 1.0)\r\n                (= k 0.0) \r\n                (<= 1.0 f)) \r\n            (<= a (+ g b)))) \r\n    (and                    ;false\r\n        (forall ((?d Real)) ;false\r\n            (and                      \r\n                (or                  \r\n                    (<= 0.0 (+ (- b) ?d)) \r\n                    (= (- b f) 0.0))      \r\n                (and \r\n                    (not (= d 0)) \r\n                    (not (= d 1.0)))))\r\n        (and \r\n            (exists ((?h Real)) \r\n                (forall ((?d Real)) \r\n                    (exists ((?e Real)) \r\n                        (and \r\n                            (or \r\n                                (= j 0) \r\n                                (not (= (+ (- ?h) (- b f)) 0.0))) \r\n                            (or \r\n                                (and (< 0.0 ?h) (= ?e 0)) \r\n                                (or (<= (- b f) 0.0) (= (- b f) 0))) \r\n                            (and \r\n                                (<= 0.0 (+ ?e (* 2.0 ?d) (* (- 2.0) ?h))) \r\n                                (<= (+ ?d (* (- 2.0) ?h)) 0.00))))))\r\n            (exists ((?h Real))\r\n                (or \r\n                    (forall ((?e Real))\r\n                        (or \r\n                            (<= ?h 0.0) \r\n                            (= (+ ?e f) 0.0)))\r\n                    (and \r\n                        (or \r\n                            (not (= (+ (* (- 1.0) ?h) (* 2.0 j)) (- 1.0)))\r\n                            (not (= (+ (* (- 2.0) ?h) (* (- 2.0) j)) 2.0)))\r\n                        (forall ((?d Real)) \r\n                            (=  (* 2.0 ?d) ?h)))))))))\r\n(assert (= b (+ j f)))  \r\n(assert (= c (* e g)))  \r\n\r\n(check-sat)\r\n(get-model)\r\n```\r\nZ3 will report `sat` on this `unsat` formula and with the invalid model, while cvc4 reports `unsat`:\r\n```\r\n(model\r\n  (define-fun g () Real\r\n    (- 1.0))\r\n  (define-fun e () Real\r\n    (- (/ 1.0 8.0)))\r\n  (define-fun c () Real\r\n    (/ 1.0 8.0))\r\n  (define-fun f () Real\r\n    (/ 2.0 3.0))\r\n  (define-fun j () Real\r\n    (- (/ 2.0 3.0)))\r\n  (define-fun b () Real\r\n    0.0)\r\n  (define-fun d () Real\r\n    (/ 1.0 2.0))\r\n  (define-fun a () Real\r\n    0.0)\r\n  (define-fun k () Real\r\n    2.0)\r\n)\r\n```\r\nIf I feed this model to the formula, z3 will report `unsat`. z3-4.8.5 also reports `unsat`.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: e1fd167e01d74353431c683b9533c75b2074e087",
    "priority": 1
  },
  "37": {
    "body": "````\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun i () Real)\r\n(declare-fun e () Real)\r\n(declare-fun ep () Real)\r\n(declare-fun f () Real)\r\n(declare-fun j () Real)\r\n(declare-fun g () Real)\r\n(assert\r\n  (or\r\n    (not\r\n      (exists\r\n        ((h Real))\r\n        (=>\r\n          (and (= 0.0 (/ b j)) (< 0.0 e))\r\n        (=> (= 0.0 i) (= (= (<= 0.0 h)  (<= h ep)) (= 1.0 2.0)))  ;; LINE 18\r\n        )\r\n    )\r\n  )\r\n\r\n    (not\r\n      (exists\r\n        ((h Real))\r\n        (=> (<= 0.0 (/ a h)) (= 0 (/ c e)))\r\n      )\r\n    )\r\n  )\r\n)\r\n(assert (= c (/ c g) g 0))\r\n(assert (= ep (/ d f)))\r\n(check-sat)\r\n````\r\nz3 crashes on the this formula reporting: \r\n\r\nFailed to verify: m_util.is_numeral(rhs, _k)\r\n[2]    25133 segmentation fault (core dumped)  /home/dominik/repositories/smtfuzzer/solvers/z3/z3 \r\n\r\nOS: Ubuntu 18.06\r\nRevision: e1fd167e01d74353431c683b9533c75b2074e087",
    "priority": 1
  },
  "38": {
    "body": "Hi, \r\nFor this String formula:\r\n```\r\n(declare-fun a () String)\r\n(assert (not (= \"\" ( str.substr a 0 1))))\r\n(assert (= \"\" ( str.substr a 1 1)))\r\n(check-sat)\r\n```\r\nZ3 incorrectly reports `unsat`, while the latest release Z3-4.8.5 can give `sat` result with model:\r\n```\r\n(model\r\n  (define-fun a () String\r\n    \"\\x00\")\r\n)\r\n```\r\nAfter feeding this model to the formula, z3 can report sat.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: aff4b30\r\n",
    "priority": 1
  },
  "39": {
    "body": "```\r\n(declare-fun a () Real)\r\n(assert\r\n (forall\r\n  ((e Real))\r\n  (exists\r\n   ((f Real))\r\n   (forall\r\n    ((c Real))\r\n    (or\r\n     (exists\r\n      ((h Real))\r\n      (forall\r\n       ((i Real))\r\n       (= (+ h i) (/ a a))\r\n       )\r\n      )\r\n     (< c (+ e f))\r\n     )\r\n    )\r\n   )\r\n  )\r\n )\r\n(assert (< 0 (/ a a)))\r\n(check-sat)\r\n```\r\nZ3 gets segmentation fault on this formula which should be `unsat`. Stable release Z3-4.8.5 reports `unsat` successfully. \r\n\r\nOS: Ubuntu 18.04\r\nReversion: cfb4d289b8b2e210c1bf6d4ae07dbefe193ea363",
    "priority": 1
  },
  "40": {
    "body": "```\r\n(declare-fun b () Real) \r\n(declare-fun c () Real)  \r\n(assert\r\n  (forall\r\n    ((d Real))\r\n    (exists\r\n      ((e Real))\r\n      (or\r\n        (not\r\n          (=\r\n            (+ e (/ c c))\r\n            0\r\n          )\r\n        )\r\n        (not (= d 0))\r\n      )\r\n    )\r\n  )\r\n)\r\n(assert\r\n  (or\r\n    (forall\r\n      ((e Real))\r\n      (exists\r\n        ((f Real))\r\n        (forall\r\n          ((h Real))\r\n          (or\r\n            (exists\r\n              ((i Real))\r\n              (forall\r\n                ((g Real))\r\n                (= 0 (+ g i))\r\n              )\r\n            )\r\n            (forall\r\n              ((i Real))\r\n              (exists\r\n                ((g Real))\r\n                (or\r\n                  (< e 0)\r\n                  (< 0 h)\r\n                  (< 0 f)\r\n                  (< e 1)\r\n                  (exists\r\n                    ((g Real))\r\n                    (or\r\n                      (= 0 b)\r\n                      (not (= e 0))\r\n                    )\r\n                  )\r\n                )\r\n              )\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n    (forall\r\n      ((d Real))\r\n      (exists\r\n        ((f Real))\r\n        (and\r\n          (exists\r\n            ((h Real))\r\n            (not (= f 0))\r\n          )\r\n          (exists\r\n            ((h Real))\r\n            (or\r\n              (< 0 d)\r\n              (exists\r\n                ((g Real))\r\n                (and\r\n                  (< 0 (* (- 1) h))\r\n                  (= h (+ (* 3 h) (* 3 f)) 1)\r\n                  (< 0 (+ g b))\r\n                )\r\n              )\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )\r\n)\r\n(check-sat)\r\n```\r\nThe formula is satisfable. Z3 reports `unsat` on this formula while CVC4 reports `sat`. \r\nIf I feed the following model to the formula, Z3 will report `sat`\r\n```\r\n(define-fun b () Real\r\n    1.0)\r\n  (define-fun c () Real\r\n    1.0)\r\n```\r\n Stable release Z3-4.8.5 reports `sat` successfully.\r\n\r\nOS: Ubuntu 18.04\r\nReversion: cfb4d289b8b2e210c1bf6d4ae07dbefe193ea363\r\n",
    "priority": 1
  },
  "41": {
    "body": "```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(declare-fun f () Real)\r\n(assert\r\n(and\r\n (> 0 (- d f))\r\n (= d (ite (>= (/ a c) f) (+ b f) f))\r\n (> 0 (/ a (/ c e)))\r\n (or (= e 1.0) (= e 2.0))\r\n (> d 0)\r\n (= c 0)\r\n )\r\n)\r\n(check-sat)\r\n```\r\nFor this formula, Z3 reports `sat`, while CVC4 reports `unsat`,.\r\nZ3 gives the following model:\r\n```\r\n(model \r\n  (define-fun e () Real 1.0)\r\n  (define-fun f () Real 2.0)\r\n  (define-fun a () Real 1.0)\r\n  (define-fun b () Real (- 1.0))\r\n  (define-fun c () Real 0.0)\r\n  (define-fun d () Real 1.0)\r\n)\r\n```\r\nIf I feed this model to the formula, Z3 reports `unsat`.\r\n\r\nOS: Ubuntu 18.04\r\nReversion: 5de35d46eb30f46f02bfcb29c05b292482eca51a",
    "priority": 1
  },
  "42": {
    "body": "```\r\n(declare-fun a () Int)\r\n(declare-fun d () Int) \r\n(declare-fun k () Int)\r\n(declare-fun b () String) \r\n(declare-fun ae () String) \r\n(declare-fun c () String)  \r\n(declare-fun af () String) \r\n(declare-fun i () String)\r\n(declare-fun j () String) \r\n(declare-fun ah () String) \r\n(declare-fun m () String) \r\n(declare-fun l () String)\r\n(declare-fun q () String)   \r\n(declare-fun n () String) \r\n(declare-fun s () String) \r\n(declare-fun r () String) \r\n(declare-fun aj () String) \r\n(declare-fun e () Bool) \r\n(declare-fun f () Bool)  \r\n(declare-fun g () Bool)  \r\n(declare-fun h () Bool) \r\n(declare-fun o () Bool) \r\n(declare-fun p () Bool) \r\n(assert (= e (not (= (/ a d) (- 1))) (= \"\" ( str.substr i 0 (str.len q)))(= f (not (= e o)))))    \r\n(assert (ite (not (= h e)) (and (= k 0 (str.len ( str.substr b 0 (str.len j)))) (= ( str.substr ae 0 (str.len ah)) \"\" ( str.substr c 0 (str.len m)) l)) (and (=  0 (str.len ( str.substr b 0 (str.len j)))) (not ( str.in.re ae (str.to.re \"=\")))))) \r\n(assert (= (= g p) (not (= (/ a d)  1))(not (= h p)) (and  (= b ( str.++ (str.substr c (str.len m) (str.len n)) b )( str.++ s (str.substr b (str.len j) (str.len ( str.substr af 0 (str.len r))))))(not (= aj \"\")))))\r\n(check-sat)\r\n```\r\nz3 reports `unknown` for this formula which is satisfiable, while cvc4 reports `sat` just in a second.\r\nThe stable version of z3 (4.8.5) reports `sat` on this case. I tried my best to reduce the case, but it cannot be reduced further.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 88aa689a70819f464ce5edf02e807b357d1b393a",
    "priority": 1
  },
  "43": {
    "body": "For this piece of code:\r\n```\r\n(declare-fun a () Real) \r\n(declare-fun b () Real)  \r\n(declare-fun c () Real) \r\n(declare-fun d () Real) \r\n(declare-fun j () Real) \r\n(declare-fun e () Real) \r\n(assert (not (exists ((f Real)) \r\n    (=> \r\n       (and (< (/ 0 0) c) (< (/ 0 (* 2.0 b)) d) ) \r\n       (= (= 0.0 a) (not (=> (<= f a) (<= e j))))\r\n    )))) \r\n(check-sat) \r\n```\r\nZ3 reports `unsat` while CVC4 reports `sat` and gives the model:\r\n```\r\n(define-fun a () Real 0.0)\r\n(define-fun b () Real 0.0)\r\n(define-fun c () Real 1.0)\r\n(define-fun d () Real 1.0)\r\n(define-fun j () Real 0.0)\r\n(define-fun e () Real 0.0)\r\n```\r\nwhich satisfies the formula. \r\nSo the formula should be `sat` and Z3 doesn't give the expected answer. \r\n\r\nOS: Ubuntu 18.04\r\nReversion: 60c504f4ef64eaf085b1fec2773704cd1102c611\r\n ",
    "priority": 1
  },
  "44": {
    "body": "```\r\n(declare-fun a () Real)  \r\n(declare-fun b () Real)  \r\n(declare-fun c () Real)  \r\n(declare-fun d () Real)  \r\n(declare-fun e () Real)  \r\n(declare-fun f () Real)   \r\n(assert (not (exists ((g Real)) \r\n    (= (and (< 0.0 b)) (= (= 0.0 a) (not (= (<= g a) (<= e d)))))))\r\n\r\n)  \r\n(assert (not  (= (<= 0.0  c) (or  (< (* c f) (/ 0 0))))))   \r\n(check-sat)\r\n\r\n```\r\nz3 returns `unknown`  for this formula which  is unsatisfiable. Z3 seems to need quite some memory for this formula. Solving it ~100 times in a  row occasionally results in an out of memory error or a segfault. \r\n\r\nOS: Ubuntu 19.04\r\nRevision: 60c504f4ef64eaf085b1fec2773704cd1102c611\r\n\r\n\r\n",
    "priority": 1
  },
  "45": {
    "body": "```\r\n(declare-fun a () Real)  \r\n(declare-fun b () Real)  \r\n(declare-fun c () Real)  \r\n(declare-fun d () Real)  \r\n(declare-fun g () Real)   \r\n(declare-fun e () Real)  \r\n(declare-fun f () Real)  \r\n(declare-fun j () Real)  \r\n(declare-fun k () Real)   \r\n(declare-fun h () Real)  \r\n(declare-fun i () Real)  \r\n(declare-fun n () Real)   \r\n\r\n(assert \r\n    (not (exists ((l Real))          \r\n        (=> (and (and (< 0 e) (< (/ 0 (* 2.0 c)) f)) (< 0.0 c))          \r\n        (=> (= 0.0 b) (not (=> (<= l b) (<= k j)) )))\r\n    ))\r\n)  \r\n\r\n(assert \r\n    (not (exists ((m Real)) \r\n         (=> \r\n            (and (and (and (and (=> (<= i 0) (and (<= 0.0 (+ (* e i) n) (- a g))))                          \r\n                 (<= 0.0 (- d))) (<= 0.0 n) ) (< h 0)) (< 0.0 (- a g)))          \r\n            (or  (< h (* (- d) n)) (<  (/ 0 0) h))) \r\n    ))\r\n)   \r\n(check-sat)                           \r\n(get-model)\r\n```\r\n\r\nZ3 reports SAT and gives the following incorrect model:\r\n\r\n```\r\n(model \r\n  (define-fun g () Real\r\n    1.0)\r\n  (define-fun a () Real\r\n    2.0)\r\n  (define-fun h () Real\r\n    (- (/ 1.0 2.0)))\r\n  (define-fun n () Real\r\n    (- (/ 1.0 2.0)))\r\n  (define-fun d () Real\r\n    (/ 1.0 4.0))\r\n  (define-fun i () Real\r\n    (- 2.0))\r\n  (define-fun e () Real\r\n    (- (/ 1.0 2.0)))\r\n  (define-fun b () Real\r\n    (- (/ 1.0 2.0)))\r\n  (define-fun j () Real\r\n    (- (/ 1.0 2.0)))\r\n  (define-fun k () Real\r\n    (/ 1.0 2.0))\r\n  (define-fun c () Real\r\n    1.0)\r\n  (define-fun f () Real\r\n    (/ 1.0 2.0))\r\n)\r\n```\r\nIn the first assert statement `(< 0 e) ` is `false` (as e =-1/2)) and consequently the two sourrounding `(and` blocks evaluate to `false`. As a consequence the precondition of the`(=>` statement is also `false` and `(not  ((m Real)) (exists true)) ` remains which evaluates to `false`.\r\n\r\nWe doublechecked with cvc4 SMT solver which reports UNSAT for this formula.\r\n\r\nOS: Ubuntu 19.04\r\nRevision: 60c504f4ef64eaf085b1fec2773704cd1102c611",
    "priority": 1
  },
  "46": {
    "body": "```\r\n(declare-fun a () String)     \r\n(declare-fun b () String)      \r\n(declare-fun d () String)     \r\n(declare-fun i () String)    \r\n(declare-fun e () String)          \r\n(declare-fun h () String)            \r\n(assert  (= 0 (str.len d)))            \r\n(assert (= \"\" ( str.substr a 0 (str.len ( str.substr b (str.len e) (str.len h))))))     \r\n(assert (not (= d h )))     \r\n(assert (= a ( str.++ i h )))     \r\n(assert (= b ( str.++ e h )))          \r\n(check-sat)    \r\n```\r\nZ3 reports SAT for this unsatisfiable formula. We doublechecked with cvc4 which reported UNSAT. Z3 reports this model which does not satisfy the constraint `(assert (= \"\" ( str.substr a 0 (str.len ( str.substr b (str.len e) (str.len h))))))`     \r\n\r\n\r\n```\r\n(model \r\n  (define-fun i () String\r\n    \"\")\r\n  (define-fun h () String\r\n    \"\\x00\")\r\n  (define-fun e () String\r\n    \"\\x00\")\r\n  (define-fun d () String\r\n    \"\")\r\n  (define-fun b () String\r\n    \"\\x00\\x00\")\r\n  (define-fun a () String\r\n    \"\\x00\")\r\n)\r\n\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: db274ebe01ba81195b30b848d77386ffa2fff865 ",
    "priority": 1
  },
  "47": {
    "body": "Hi,\r\nThe following trace shows a refutational soundness bug in Z3 on a QF_NIRA formula.\r\n\r\n```\r\n[562] % z3release small.smt2\r\nsat\r\n[563] % z3release smt.threads=2 small.smt2\r\nunsat\r\n[564] % \r\n[564] % cat small.smt2\r\n(set-logic QF_NIRA)\r\n(declare-fun a () Real)\r\n(assert\r\n (<\r\n (* a\r\n  (/ 1\r\n  (/ (- 2) a\r\n   (- a\r\n   (* a\r\n    (mod (to_int a)\r\n    (to_int\r\n     (/ a\r\n     (* a\r\n      (div (to_int (/ (- 9) 800))\r\n      (to_int (/ a a))))))))))))\r\n (- a)))\r\n(assert (<= 0 a))\r\n(check-sat)\r\n[565] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 2f756da",
    "priority": 1
  },
  "48": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "49": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "50": {
    "body": "(smt.arith.solver=6) Soundness bug on QF_S  formula. smt.arith.solver=6 seems to be wrong.\r\n```\r\n[556] % z3release smt.arith.solver=6 small.smt2\r\nsat\r\n[557] % z3release smt.arith.solver=2 small.smt2\r\nunsat\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () String)\r\n(declare-fun var_9 () String)\r\n(assert (str.in_re (str.++ \"z\" var_9) (re.* (str.to_re \"z\"))))\r\n(assert (str.in_re (str.++ \"a\" var_9) (re.+ (re.range \"a\" \"u\"))))\r\n(assert (str.in_re (str.++ \"a\" a) (re.opt (re.range \"a\" \"u\"))))\r\n(assert (not (str.in_re (str.++ \"a\" a \"za\" var_9) (re.opt (re.++ (str.to_re \"a\") (re.* (str.to_re \"z\")) (str.to_re \"a\"))))))\r\n(check-sat)\r\n[559] %\r\n```\r\nCommit: 7708874",
    "priority": 0
  },
  "51": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "52": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "53": {
    "body": "Here is a refutation soundness bug in z3str3:\r\n```\r\n[548] % z3release small.smt2\r\nsat\r\n[549] % z3release smt.string_solver=z3str3 small.smt2\r\nunsat\r\n[550] % cat small.smt2\r\n(declare-fun x () String)\r\n(declare-fun y () String)\r\n(assert (str.in_re (str.++ x \"c\" y) (re.++ (re.* (str.to_re \"c\")) (re.union (str.to_re \"a\") (str.to_re \"b\")))))\r\n(check-sat)\r\n[551] %\r\n```\r\nIt would be related to https://github.com/Z3Prover/z3/issues/4590\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 02084dc",
    "priority": 0
  },
  "54": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "55": {
    "body": "Hi @mtrberzi \r\n\r\nOn the following file i get `unsat` with z3str3\r\n[qf_s.smt2](https://github.com/Z3Prover/z3/files/4974901/100.smt2.zip)\r\n\r\nz3-seq correctly return `sat`\r\n\r\ncommit: e63992c8bd99ce0fbc1c76575646387f8411c216\r\n",
    "priority": 1
  },
  "56": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 1
  },
  "57": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "58": {
    "body": "Refutation soundness bug on Z3 trunk. z3-4.8.8 returns the correct result which is `sat`. \r\n```\r\n[581] % z3-4.8.8 small.smt2\r\nsat\r\n[582] % z3release small.smt2\r\nunsat\r\n[583] % \r\n[583] % cat small.smt2\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(assert (= (str.substr a 0 (str.len b)) \"B\"))\r\n(assert (= (str.replace a b \"\") (str.++ \"A\" b)))\r\n(check-sat)\r\n[584] %\r\n```\r\nCommit: 395a3042623d1bbd1cd15b3c5b11c52aff4b5270\r\nOS: Ubuntu 18.04\r\n\r\nNB: Fixed",
    "priority": 0
  },
  "59": {
    "body": "Refutation soundness bug on Z3 trunk. z3-4.8.8 returns the correct result which is `sat`. \r\n```\r\n[581] % z3-4.8.8 small.smt2\r\nsat\r\n[582] % z3release small.smt2\r\nunsat\r\n[583] % \r\n[583] % cat small.smt2\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(assert (= (str.substr a 0 (str.len b)) \"B\"))\r\n(assert (= (str.replace a b \"\") (str.++ \"A\" b)))\r\n(check-sat)\r\n[584] %\r\n```\r\nCommit: 395a3042623d1bbd1cd15b3c5b11c52aff4b5270\r\nOS: Ubuntu 18.04\r\n\r\nNB: Fixed",
    "priority": 0
  },
  "60": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "61": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 1
  },
  "62": {
    "body": "Refutation soundness bug on Z3 trunk. z3-4.8.8 returns the correct result which is `sat`. \r\n```\r\n[581] % z3-4.8.8 small.smt2\r\nsat\r\n[582] % z3release small.smt2\r\nunsat\r\n[583] % \r\n[583] % cat small.smt2\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(assert (= (str.substr a 0 (str.len b)) \"B\"))\r\n(assert (= (str.replace a b \"\") (str.++ \"A\" b)))\r\n(check-sat)\r\n[584] %\r\n```\r\nCommit: 395a3042623d1bbd1cd15b3c5b11c52aff4b5270\r\nOS: Ubuntu 18.04\r\n\r\nNB: Fixed",
    "priority": 0
  },
  "63": {
    "body": "Refutation soundness bug on Z3 trunk. z3-4.8.8 returns the correct result which is `sat`. \r\n```\r\n[581] % z3-4.8.8 small.smt2\r\nsat\r\n[582] % z3release small.smt2\r\nunsat\r\n[583] % \r\n[583] % cat small.smt2\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(assert (= (str.substr a 0 (str.len b)) \"B\"))\r\n(assert (= (str.replace a b \"\") (str.++ \"A\" b)))\r\n(check-sat)\r\n[584] %\r\n```\r\nCommit: 395a3042623d1bbd1cd15b3c5b11c52aff4b5270\r\nOS: Ubuntu 18.04\r\n\r\nNB: Fixed",
    "priority": 0
  },
  "64": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[527] % z3-4.8.5 small.smt2\nunsat\nsat\n[528] % z3-4.8.6 small.smt2\nunsat\nsat\n[529] % z3-4.8.7 small.smt2\nunsat\nsat\n[530] % z3-4.8.8 small.smt2\nunsat\nsat\n[531] % z3release small.smt2\nunsat\nsat\n[532] % \n[532] % cat small.smt2\n(declare-fun a () (_ BitVec 1))\n(declare-fun b () (_ BitVec 1))\n(assert (= (bvnand a (bvnand b b)) a))\n(check-sat-using (then simplify reduce-invertible default))\n(check-sat)\n[533] %\n```\n\nOS: Ubuntu 18.04\nCommit: d6ad371\n",
    "priority": 1
  },
  "65": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[600] % cvc4 -q small.smt2\nsat\n[601] % z3release small.smt2\nsat\n[602] % z3release smt.string_solver=z3str3 rewriter.flat=false smt.threads=2 small.smt2\nunsat\n[603] % cat small.smt2\n(declare-fun a () Int)\n(declare-fun b () Int)\n(declare-fun c () String)\n(declare-fun d () String)\n(declare-fun e () String)\n(declare-fun f () String)\n(declare-fun g () String)\n(declare-fun h () String)\n(declare-fun i () String)\n(declare-fun j () String)\n(declare-fun k () String)\n(declare-fun l () String)\n(declare-fun m () String)\n(declare-fun n () String)\n(declare-fun o () String)\n(declare-fun p () String)\n(declare-fun q () Bool)\n(declare-fun r () String)\n(assert\n (ite q\n (and (= b a) (= r (str.++ d m)) (= a (str.len n)) (= 0 (str.len d))\n  (= m (str.++ h k)) (= h (str.++ n p)) (= p \"zzaaaaaaaaaaaaaac\"))\n (= b 0)))\n(assert (< 0 b))\n(assert (= r (str.++ f c i)))\n(assert (= (+ b 7) (str.len f)))\n(assert (= (= r (str.++ g j l o) \"zzaaabaaaaaaaaaac\")\n     (not (str.in_re e (str.to_re \"c\")))))\n(check-sat)\n[604] %\n```\n\nOS: Ubuntu 18.04\nCommit: d1d1411\n",
    "priority": 0
  },
  "66": {
    "body": "\n```\n[850] % time z3release small.smt2\nsat\nreal\t0m0.654s\nuser\t0m0.065s\nsys\t0m0.004s\n[851] % time cvc4 --strings-exp -q small.smt2\nsat\nreal\t0m0.179s\nuser\t0m0.140s\nsys\t0m0.004s\n[852] % timeout -s 9 10 z3release smt.string_solver=z3str3 small.smt2\nKilled\n[853] % time z3release smt.string_solver=z3str3 smt.threads=2 small.smt2\nunsat\nreal\t0m1.329s\nuser\t0m0.434s\nsys\t0m0.016s\n[854] % \n[854] % cat small.smt2\n(declare-fun a () String)\n(declare-fun b () String)\n(assert (= (str.replace (str.++ a \"B\" a b) \"A\" \"\") (str.++ (str.replace (str.++ a b) \"A\" \"\") b)))\n(check-sat)\n[855] %\n```\n\nOS: Ubuntu 18.04\nCommit: ed92b84\n",
    "priority": 0
  },
  "67": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[589] % z3release small.smt2\nsat\n[590] % z3release smt.string_solver=z3str3 small.smt2\nsat\n[591] % z3release smt.string_solver=z3str3 smt.threads=2 small.smt2\nunsat\n[592] % \n[592] % cat small.smt2\n(declare-fun a () String)\n(assert (not (str.contains (str.substr a 0 (- (str.len (str.substr a 0 (- (str.len a) 10))) 1)) \"F\")))\n(assert (str.contains (str.substr a 10 (str.len a)) \"F\"))\n(assert\n (= (ite (str.contains (str.substr a 0 (- (str.len a) 10)) \"C\") 1 0)\n (ite (str.contains (str.substr a 0 (- (str.len a) 0)) \"B\") 1 0)\n (ite (str.contains (str.substr a 0 (- (str.len a) 10)) \"A\") 1 0) 0))\n(assert (str.prefixof \"abcdefg00\" a))\n(assert (str.contains a \"100\"))\n(check-sat)\n[593] %\n```\n\nOS: Ubuntu 18.04\nCommit: 1c760b0\n",
    "priority": 0
  },
  "68": {
    "body": "Hi,\r\nFor this case, Z3  gives an incorrect answer:\r\n```\r\n[589] % z3-4.8.5 small.smt2\r\nsat\r\n[590] % z3-4.8.6 small.smt2\r\nsat\r\n[591] % z3-4.8.7 small.smt2\r\nsat\r\n[592] % z3-4.8.8 small.smt2\r\nunsat\r\n[593] % z3release small.smt2\r\nunsat\r\n[594] % cat small.smt2\r\n(declare-fun a () String)\r\n(assert\r\n (xor\r\n (= (str.in.re a (str.to.re \"B\"))\r\n  (str.in.re a (re.union (str.to.re \"B\") (str.to.re \"BB\"))))\r\n (= (str.in.re a (re.union (re.inter (str.to.re \"A\") re.allchar) (str.to.re \"B\")))\r\n  (str.in.re a (re.union (str.to.re \"A\") (str.to.re \"B\"))))))\r\n(check-sat)\r\n[595] %\r\n```\r\nThe formula is sat (e.g., with a =\"BB\").\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 1c760b0\r\n",
    "priority": 0
  },
  "69": {
    "body": "Hi,\r\nFor this case, Z3  gives an incorrect answer:\r\n```\r\n[610] % z3release small.smt2\r\nsat\r\n[611] % z3release smt.string_solver=z3str3 smt.threads=2 small.smt2\r\nunsat\r\n[612] % cat small.smt2\r\n(declare-fun s () String)\r\n(declare-fun t () String)\r\n(assert (= t (str.substr s 0 (- (str.len s) 1))))\r\n(assert (str.contains (str.substr t 0 (- (str.len s) 1 (str.indexof t \"a\" 0))) \"a\"))\r\n(assert (str.contains t \"a\"))\r\n(assert (= (str.indexof s \"=\" 0) 0))\r\n(check-sat)\r\n[613] %\r\n```\r\nIt might be related to https://github.com/Z3Prover/z3/issues/4338.\r\nWithout the smt.threads=2, z3str3 seems to hang.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 1c760b0\r\n",
    "priority": 0
  },
  "70": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[539] % z3release small.smt2\nunsat\nsat\n[540] % cat small.smt2\n(declare-fun c () Int)\n(declare-fun a () Int)\n(declare-fun b () Int)\n(assert (> a 0 c (* a b)))\n(assert (= b (div c a)))\n(check-sat-using (then purify-arith ctx-solver-simplify))\n(check-sat)\n[541] %\n```\n\nOS: Ubuntu 18.04\nCommit: ce07138\n",
    "priority": 1
  },
  "71": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[561] % z3release small.smt2\nunsat\nsat\n[562] % cat small.smt2\n(set-option :smt.phase_selection 5)\n(declare-fun x () String)\n(assert (= (str.in.re x (re.++ (str.to.re \"B\") (re.+ (str.to.re \"B\")))) (str.in.re x (str.to.re \"BB\"))))\n(assert (not (= (str.in.re x re.allchar) (str.in.re x (re.union (str.to.re \"A\") (str.to.re \"B\"))))))\n(check-sat-using ctx-solver-simplify)\n(check-sat)\n[563] %\n```\n\nOS: Ubuntu 18.04\nCommit: ce07138\n",
    "priority": 0
  },
  "72": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[580] % z3release small.smt2\nsat\n[581] % z3release smt.string_solver=z3str3 smt.threads=2 small.smt2\nunsat\n[582] % cat small.smt2\n(declare-fun s () String)\n(declare-fun t () String)\n(assert (= t (str.substr s 0 (str.indexof s \"b\"))))\n(assert\n (not\n (str.contains\n  (str.substr\n  (str.substr s 0 (- (str.indexof s \"b\")))\n  (+ (str.indexof t \"a\") 1)\n  (str.len t))\n  \"a\")))\n(assert (str.contains t \"a\"))\n(check-sat)\n[583] %\n```\n\nOS: Ubuntu 18.04\nCommit: ce07138\n",
    "priority": 0
  },
  "73": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[601] % z3release small.smt2\nsat\n[602] % z3release smt.string_solver=z3str3 small.smt2\nunsat\n[603] % cat small.smt2\n(declare-fun a () String)\n(declare-fun b () String)\n(assert (str.in.re a (re.+ (re.union (str.to.re \"z\") (str.to.re \"b\")))))\n(assert (str.in.re a (re.opt (re.range \"a\" \"u\"))))\n(assert (str.in.re (str.++ \"b\" b) (re.opt (re.range \"a\" \"u\"))))\n(assert (not (str.in.re (str.++ \"b\" a) (re.opt (re.+ (re.+ (str.to.re \"a\")))))))\n(check-sat)\n[604] %\n```\n\nOS: Ubuntu 18.04\nCommit: ce07138\n",
    "priority": 0
  },
  "74": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[578] % z3release small.smt2\nsat\n[579] % z3release smt.string_solver=z3str3 small.smt2\nunsat\n[580] % \n[580] % cat small.smt2\n(declare-const a String)\n(assert (xor (distinct a \"01\") (> (str.to.int a) (- 2))))\n(check-sat)\n[581] %\n```\n\nOS: Ubuntu 18.04\nCommit: 127ef59\n",
    "priority": 1
  },
  "75": {
    "body": "\n```\n[547] % z3release small.smt2\nsat\n[548] % z3release smt.string_solver=z3str3 rewriter.flat=false smt.threads=3 small.smt2\nunsat\n[549] % cat small.smt2\n(declare-fun a () String)\n(assert (str.contains (str.substr a 0 (- (str.len a) (str.indexof a \"x\" 0))) \"y\"))\n(assert (str.contains (str.substr a 0 (- (str.indexof a \"x\" 0) 0)) \"z\"))\n(check-sat)\n[550] %\n```\n\nOS: Ubuntu 18.04\nCommit: 32055a3\n",
    "priority": 0
  },
  "76": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[539] % z3-4.8.5 small.smt2 \nunsat\nsat\n[540] % z3-4.8.6 small.smt2 \nunsat\nunsat\n[541] % z3-4.8.7 small.smt2 \nunsat\nunsat\n[542] % z3-4.8.8 small.smt2 \nunsat\nsat\n[543] % z3release small.smt2 \nunsat\nsat\n[544] % cat small.smt2 \n(declare-fun a () String)\n(assert (distinct (str.in.re a (re.inter (str.to.re \"B\") (re.+ (str.to.re \"B\"))))\n     (str.in.re a (str.to.re \"BB\"))))\n(assert (= (str.in.re a (re.union (str.to.re \"A\") (str.to.re \"B\")))\n     (str.in.re a (re.inter (str.to.re \"\") (str.to.re \"B\")))))\n(check-sat-using (then purify-arith nnf default))\n(check-sat)\n[545] %\n```\n\nOS: Ubuntu 18.04\nCommit: a14c2a3\n",
    "priority": 0
  },
  "77": {
    "body": "\n```\n[705] % z3-4.8.5 small.smt2\nsat\n[706] % z3-4.8.6 small.smt2\nsat\n[707] % z3-4.8.7 small.smt2\nunknown\n[708] % z3release small.smt2\nunsat\n[709] % z3release rewriter.flat=false small.smt2\nsat\n[710] % z3release smt.string_solver=z3str3 small.smt2\nASSERTION VIOLATION\nFile: ../src/smt/theory_str_regex.cpp\nLine: 1158\nUNREACHABLE CODE WAS REACHED.\nZ3 4.8.9.0\nPlease file an issue with this message and more detail about how you encountered it at https://github.com/Z3Prover/z3/issues/new\n[711] % \n[711] % cat small.smt2\n(declare-fun a () Int)\n(declare-fun b () Int)\n(declare-fun c () Int)\n(declare-fun d () Int)\n(declare-fun e () String)\n(declare-fun f () String)\n(declare-fun g () String)\n(declare-fun h () String)\n(declare-fun i () String)\n(declare-fun j () String)\n(declare-fun k () String)\n(declare-fun l () Int)\n(declare-fun m () Bool)\n(declare-fun n () Int)\n(assert (distinct \"\" k))\n(assert (= m (distinct c (- 1))))\n(assert\n (ite m\n (and (= c b) (= k g) (= b (str.len e)) (= g \"abcd\")\n  (not (str.in.re j (re.inter (str.to.re \"\") (str.to.re \"a\")))))\n (distinct d 1)))\n(assert (= l (+ c 8) n l))\n(assert (= a (div d n)))\n(assert (>= d n))\n(assert (= a (str.len f)))\n(assert (= k (str.++ h f i)))\n(check-sat)\n[712] %\n```\n\nOS: Ubuntu 18.04\nCommit: 9c97252\n",
    "priority": 1
  },
  "78": {
    "body": "\n```\n[615] % cvc4 small.smt2\nsat\n[616] % z3-4.8.7 small.smt2\nunknown\n[617] % \n[617] % cvc4 small.smt2\nsat\n[618] % z3 small.smt2\nunsat\n[619] % cat small.smt2\n(set-logic QF_NIRA)\n(declare-fun a () Int)\n(declare-fun b () Int)\n(declare-fun c () Int)\n(declare-fun d () Int)\n(declare-fun e () Int)\n(declare-fun f () Int)\n(declare-fun g () Int)\n(declare-fun h () Int)\n(assert (<= (/ 2 f b) g))\n(assert (<= (* g a (* a d)) (- 2)))\n(assert (<= (+ b (* 6 e) (* (- 25) c)) (+ h h (* (- 11) g)) 5))\n(check-sat)\n[620] %\n```\n\nOS: Ubuntu 18.04\nCommit: 9c97252\n",
    "priority": 1
  },
  "79": {
    "body": "\n```\n[632] % z3release small.smt2\nsat\n[633] % z3release proof=true small.smt2\nunsat\n[634] % cat small.smt2\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(declare-fun d () Real)\n(assert (= a (/ c b)))\n(assert (distinct (* b d) 0.0))\n(check-sat)\n[635] %\n```\n\nOS: Ubuntu 18.04\nCommit: 9c97252\n",
    "priority": 1
  },
  "80": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[612] % cvc4 small.smt2\nsat\n[613] % z3release small.smt2\nunsat\n[614] % \n[614] % cat small.smt2\n(set-logic ALL)\n(declare-fun a () Real)\n(assert\n (exists ((b Real))\n (and (< (* b (+ a 1)) 0)\n  (<= (* (- 2) a b) (mod (to_int b) (to_int (- 2 a))) 0))))\n(check-sat)\n[615] %\n```\n\nOS: Ubuntu 18.04\nCommit: 9c97252\n",
    "priority": 1
  },
  "81": {
    "body": "\n```\n[1203] % z3-4.8.7 small.smt2\nunknown\nunknown\n[1204] % z3release smt.arith.solver=2 small.smt2\nunknown\nunknown\n[1205] % z3release smt.arith.solver=6 small.smt2\nunsat\nsat\n[1206] % \n[1206] % cat small.smt2\n(declare-fun ab0c () Bool)\n(declare-fun ad () Real)\n(declare-fun ae () Real)\n(declare-fun ab0f () Bool)\n(declare-fun ab1aa () Bool)\n(declare-fun ab1f () Bool)\n(declare-fun ab0aa () Bool)\n(declare-fun af () Real)\n(declare-fun aab () Real)\n(declare-fun ag () Real)\n(declare-fun ah () Real)\n(declare-fun ai () Real)\n(declare-fun aa0aa () Bool)\n(declare-fun aa2c () Bool)\n(declare-fun aa2aa () Bool)\n(declare-fun aa1aa () Bool)\n(declare-fun aa3c () Bool)\n(declare-fun aa1f () Bool)\n(declare-fun aa2f () Bool)\n(declare-fun aa0l () Bool)\n(declare-fun aa1l () Bool)\n(declare-fun j () Real)\n(declare-fun aa2l () Bool)\n(declare-fun ak () Real)\n(declare-fun aa0c () Bool)\n(declare-fun aa1c () Bool)\n(declare-fun aa3f () Bool)\n(declare-fun al () Real)\n(declare-fun am () Real)\n(declare-fun an () Real)\n(declare-fun ao () Real)\n(declare-fun aa0f () Bool)\n(declare-fun aa3aa () Bool)\n(assert (let ((aap (<= al 0.0))) (let ((aaq (not aap))) (let ((aaak\n  aaq)) (let ((aaal (<= 0 j))) (let ((aaam aaal)) (let ((aaan aaak))\n  (let ((aaao (not aa0l))) (let ((aaap (not aa1l))) (let ((aq (not\n  ab0c))) (let ((aaat (* 2.0 3.0))) (let ((aaau (+ aaat 0.0))) (let\n  ((aaav 0)) (let ((aw (mod aaav (to_int aaau)))) (let ((c (or\n  aa1c))) (let ((aabq (not aa0f))) (let ((bt (not aa1f))) (let ((aabv\n  (not aa2f))) (let ((by (or aa3f))) (let ((aaca (not aa3f))) (let\n  ((aacc (not ab0f))) (let ((aacd (not ab1f))) (let ((aace aacc))\n  (let ((aacf (not aace))) (let ((ch (= aa1f c))) (let ((aacm ad))\n  (let ((aacn aacm)) (let ((aacp an)) (let ((aact (distinct ae 0.0)))\n  (let ((aacu (= aab ah))) (let ((aacw (= af ao))) (let ((aacx (and\n  aacu))) (let ((aacy (and aacx))) (let ((aacz (or aacy))) (let\n  ((aada (+ af 0.0))) (let ((aadb (= aada 0.0))) (let ((aadc (or aacf\n  aadb))) (let ((aadd (or aadc))) (let ((aade aacw)) (let ((aar (or\n  aade))) (let ((aadf (and aar aadd))) (let ((aadg (and aadf aacz)))\n  (let ((aadh (<= aab 0.0))) (let ((aadi aadh)) (let ((aas (and\n  aadi))) (let ((dj (or aa0f))) (let ((dk (or aa1f))) (let ((dm (and\n  aa3c))) (let ((dn (and aa2c))) (let ((do (or aa2f))) (let ((dp (xor\n  aa0c false))) (let ((dq (or aaca))) (let ((aads 0)) (let ((aadt (*\n  aads 1.0))) (let ((d (= aadt ah))) (let ((dw (and aas))) (let\n  ((aadz (and aact))) (let ((a (or aadz))) (let ((aaed (and aadg)))\n  (let ((aaee (and aaed))) (let ((aaef (and aaee))) (let ((aaeg (and\n  aaef))) (let ((aaeh (or aacd aaeg))) (let ((aaei (and aaeh))) (let\n  ((aaej (and aaei))) (let ((aaeo (+ aacn 0.0))) (let ((aaep (+ aacp\n  aaeo))) (let ((aaer (>= 0.0 aaep))) (let ((aaet (and aaer))) (let\n  ((fk (or (and (xor aabv false))))) (let ((fm (and (and (xor false\n  (or aabq)))))) (let ((fp (not ab0aa))) (let ((f (= a a))) (let ((fv\n  (= aa2aa a))) (let ((fw (= aa3aa a))) (let ((gp (= ak aab))) (let\n  ((gr (or (= ai an)))) (let ((gu (= ag af))) (and (not (xor (and\n  aaap aaao) (or aa2l aa1l))) (= ai 10.0) (= ak 0.0) (or (not aa3aa)\n  (and (not aa2aa) (not aa1aa))) aaam (<= 0.0 (+ (* 10.0 ai) (+ (* (-\n  49.0) (* am am)) (- 10.0 (- am))))) (not ab1aa) (= (+ am (mod 0\n  (to_int af))) 0.0) (= (+ (* 10.0 ai) (* (* (- 49.0) (* am am)) (+\n  (- 10.0 (- am)) (* (- 10.0) an)))) 0.0) (= aa1aa aa1f) (and (or\n  aa3aa (and (or (or (not aa0aa)))))) (and (and (and aaet))) aaej\n  aaan))))))))))))))))))))))))))))))))))))))))))))\n  )))))))))))))))))))))))))))))))))))\n(check-sat-using qflra)\n(check-sat)\n[1207] %\n```\n\nOS: Ubuntu 18.04\nCommit: e459cf4\n",
    "priority": 1
  },
  "82": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[1152] % z3-4.8.5 small.smt2\nunsat\nsat\n[1153] % z3-4.8.6 small.smt2\nunsat\nsat\n[1154] % z3-4.8.7 small.smt2\nunsat\nsat\n[1155] % z3 small.smt2\nunsat\nsat\n[1156] % cat small.smt2\n(declare-fun a () Real)\n(assert (forall ((b Real)) (= (= a b) (= b 0))))\n(check-sat-using qe)\n(check-sat)\n[1157] %\n```\n\nOS: Ubuntu 18.04\nCommit: 5b6255e\n",
    "priority": 0
  },
  "83": {
    "body": "\nZ3 has an unsoundness as this function is non-terminating but Z3's answer is `sat`.\n\n```\n[635] % cat bug.smt2 \n(define-fun-rec a ((b Int)) Int (ite (= b 0) 0 (+ (a b) b)))\n(check-sat)\n[636] % cat t.smt2 \n(declare-fun a (Int) Int)\n(assert (forall ((b Int)) (= (a b) (ite (= b 0) 0 (+ (a b) b)))))\n(check-sat)\n[637] % \n[637] % cvc4 --quant-anti-skolem -q bug.smt2\nunsat\n[638] % cvc4 --quant-anti-skolem -q t.smt2\nunsat\n[639] % z3 bug.smt2 \nsat\n[640] % timeout -s 9 8 z3 t.smt2 \nKilled\n[641] %\n```\n\nOS: Ubuntu 18.04\nCommit: 38e0968\n",
    "priority": 0
  },
  "84": {
    "body": "\n```\n[559] % z3-4.8.7 small.smt2\nsat\nsat\n[560] % z3 small.smt2\nsat\nunsat\n[561] % \n[561] % cat small.smt2\n(declare-fun a () Int)\n(declare-fun b () Int)\n(declare-fun c () Int)\n(declare-fun d () Int)\n(declare-fun e () Int)\n(declare-fun aa () Int)\n(assert (<= 0 a 200))\n(assert (>= c 0))\n(assert (> e 1))\n(assert (= (* c b) e))\n(assert (= (+ (* c (- 1)) (* d a)) (* aa (- 120)) a))\n(check-sat)\n(check-sat-using qfufbv)\n[562] \n```\n\nOS: Ubuntu 18.04\nCommit: a0de244\n",
    "priority": 1
  },
  "85": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[528] % z3 small.smt2 \nsat\nunsat\n[529] % cat small.smt2 \n(assert (forall ((a Int)) (distinct (mod a a) a)))\n(check-sat)\n(check-sat-using qe)\n[530] %\n```\n\nOS: Ubuntu 18.04\nCommit: 7f1b147\n",
    "priority": 1
  },
  "86": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n97] % ./z3release small.smt2 \nunsat\n[98] % ./cvc4 -q small.smt2 \nsat\n[99] % cat small.smt2 \n(declare-fun a () Bool)             \n(declare-fun b () Bool)           \n(declare-fun c () Bool)           \n(declare-fun d () Bool)           \n(declare-fun f () Bool)           \n(declare-fun e () Bool)           \n(declare-fun g () String)             \n(declare-fun h () String)              \n(declare-fun i () Bool)           \n(declare-fun j () Bool)            \n(declare-fun k () Bool)           \n(declare-fun l () Bool)            \n(declare-fun m () Bool)           \n(declare-fun n () Bool)           \n(declare-fun o () String)           \n(declare-fun p () Bool)                    \n(assert (distinct (= b k) (distinct \"-\" (str.substr g 0 (str.len o)))))           \n(assert (distinct i (= a j)))             \n(assert (distinct d (= e n)))          \n(assert (distinct (= b p) (distinct \"-\" (str.substr g 4 (str.len o)))))           \n(assert (= l (= b p) m (distinct \"\" (str.substr g 0 (str.len o))) (= f i)))            \n(assert (distinct c l))         \n(assert (distinct b (distinct k p)))           \n(assert (= c (distinct m p)))    \n(check-sat)                                                  \n[100] %\n```\n\nOS: Ubuntu 18.04\nCommit: 8fe3caa\n",
    "priority": 1
  },
  "87": {
    "body": "\nPotentially related: #4017\n```\n[646] % z3release small.smt2\nsat\n[647] % z3release smt.threads=2 small.smt2\nunsat\n[648] % cvc4 -q small.smt2\nsat\n[649] % \n[649] % cat small.smt2\n(declare-fun a () String)\n(declare-fun b () String)\n(assert (str.in.re (str.++ \"z\" b) (re.++ (re.* (re.union (str.to.re \"z\") (str.to.re \"\") (str.to.re \"b\"))) (re.union (str.to.re \"\") (str.to.re \"a\")))))\n(assert (not (str.in.re (str.++ a \"a\") (re.inter (re.* (str.to.re \"\")) (str.to.re \"\")))))\n(check-sat)\n[650] %\n```\n\nOS: Ubuntu 18.04\nCommit: dd064a5\n",
    "priority": 1
  },
  "88": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[619] % z3release small.smt2\nsat\n[620] % z3release smt.arith.solver=2 small.smt2\nsat\n[621] % z3release rewriter.flat=false smt.arith.solver=2 small.smt2\nunsat\n[622] % cat small.smt2\n(set-logic AUFNIRA)\n(declare-fun a () Int)\n(declare-fun b () Int)\n(assert (< a (- 1)))\n(assert (< b 0))\n(assert (distinct (* (* a b) b) a))\n(check-sat)\n[623] %\n```\n\nOS: Ubuntu 18.04\nCommit: dd064a5\n",
    "priority": 1
  },
  "89": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[1115] % z3-4.8.7 small.smt2\nsat\n[1116] % cvc4 -q --strings-exp small.smt2\nsat\n[1117] % z3release small.smt2\nunsat\n[1118] % \n[1118] % cat small.smt2\n(declare-fun a () String)\n(assert (= \"\" (str.replace \"\" a \"B\")))\n(check-sat)\n[1119] %\n```\n\nOS: Ubuntu 18.04\nCommit: bcbe802\n",
    "priority": 1
  },
  "90": {
    "body": "Hi,\nFor this case, Z3 smt.threads=2  gives an incorrect answer:\n```\n[1071] % z3release small.smt2\nsat\n[1072] % cvc4 -q small.smt2\nsat\n[1073] % z3release smt.threads=2 small.smt2\nunsat\n[1074] % \n[1074] % cat small.smt2\n(declare-fun a () String)\n(declare-fun b () String)\n(assert (str.in.re a (re.++ (re.* (re.union (str.to.re \"z\") (str.to.re \"a\"))) (str.to.re \"a\"))))\n(assert (not (str.in.re (str.++ \"b\" b) (re.inter (re.* (re.+ (str.to.re \"\"))) (str.to.re \"b\")))))\n(check-sat)\n[1075] %\n```\n\nOS: Ubuntu 18.04\nCommit: bcbe802\n",
    "priority": 1
  },
  "91": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[927] % z3release small.smt2\nunsat\nsat\n[928] % \n[928] % z3release rewriter.flat=false small.smt2\nSegmentation fault\n[929] % \n[929] % z3san rewriter.flat=false small.smt2\nASAN:DEADLYSIGNAL\n=================================================================\n==16910==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000003 (pc 0x000000000003 bp 0x7ffdc2926f00 sp 0x7ffdc2926bc8 T0)\n==16910==Hint: pc points to the zero page.\n==16910==The signal is caused by a READ memory access.\n==16910==Hint: address points to the zero page.\nASAN:DEADLYSIGNAL\nAddressSanitizer: nested bug in the same thread, aborting.\n[930] % \n[930] % cat small.smt2\n(define-funs-rec ((a () Int) (b ((c Int)) Bool)) (0 (ite (> c 5) false (ite true true (b 0)))))\n(assert (b 0))\n(check-sat-using horn)\n(check-sat)\n[931] %\n```\n\nOS: Ubuntu 18.04\nCommit: 3e9479d\n",
    "priority": 1
  },
  "92": {
    "body": "Hi,\nFor this case, Z3 smt.arith.solver=2 gives an incorrect answer:\n```\n[713] % z3release small.smt2\nsat\n[714] % z3release smt.arith.solver=2 small.smt2\nunsat\n[715] % cvc4 -q small.smt2\nsat\n[716] % \n[716] % cat small.smt2\n(declare-const s String)\n(assert (and (> (str.len s) 40) (= (str.at s 0) \"a\")))\n(check-sat)\n[717] %\n```\n\nOS: Ubuntu 18.04\nCommit: 164a73f\n",
    "priority": 1
  },
  "93": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[548] % z3 small.smt2\nsat\nunsat\n[549] % \n[549] % cat small.smt2\n(declare-fun a () (_ BitVec 1))\n(declare-fun b () (_ BitVec 1))\n(assert (forall ((c (_ BitVec 1))) (distinct (bvor c a) b)))\n(check-sat)\n(check-sat-using qe_rec)\n[550] %\n```\n\nOS: Ubuntu 18.04\nCommit: 164a73f\n",
    "priority": 1
  },
  "94": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[590] % z3-4.8.7 small.smt2\nsat\nsat\n[591] % z3 small.smt2\nsat\nunsat\n[592] % \n[592] % cat small.smt2\n(declare-fun a () Int)\n(declare-fun b () Int)\n(assert (distinct a b))\n(check-sat)\n(check-sat-using (then qe2 smt))\n[593] %\n```\n\nOS: Ubuntu 18.04\nCommit: 164a73f\n",
    "priority": 0
  },
  "95": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[577] % z3 small.smt2 \nsat\nunsat\n[578] % cat small.smt2 \n(declare-fun a () Bool)\n(declare-fun b () Bool)\n(assert (xor (xor a b) (and a b)))\n(check-sat)\n(check-sat-using (then nnf horn))\n[579] %\n```\n\nOS: Ubuntu 18.04\nCommit: 01c12c9\n",
    "priority": 1
  },
  "96": {
    "body": "\n```\n[662] % z3 small.smt2\nsat\n[663] % z3 smt.arith.solver=1 small.smt2\nunsat\n[664] % \n[664] % cat small.smt2\n(declare-fun s () String)\n(assert (not (str.in.re s (re.* (str.to.re \"a\")))))\n(check-sat)\n[665] %\n```\n\nOS: Ubuntu 18.04\nCommit: db9d6d1\n",
    "priority": 1
  },
  "97": {
    "body": "Hi,\r\nZ3 release gives different answers  for the two calls to check-sat, Z3 debug throws out an assertion violation\r\n```\r\n[797] % z3release small.smt2\r\nsat\r\nunsat\r\n[798] % z3 small.smt2\r\nsat\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.cpp\r\nLine: 2910\r\nto_app(get_fact(p1))->get_arg(1) == to_app(get_fact(p2))->get_arg(0)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[799] % \r\n[799] % cat small.smt2\r\n(set-option :proof true)\r\n(assert (distinct (ite (! true :lblpos l) 0 1) 0))\r\n(check-sat)\r\n(check-sat-using (then snf smt))\r\n[800] %\r\n```\r\n\r\nUbuntu 18.04\r\nCommit: 337c07a",
    "priority": 0
  },
  "98": {
    "body": "\n`z3 smt.arith.solver=2` returns the correct result while z3 without options is at fault.\n\n```\n[761] % z3 small.smt2\nsat\n[762] % z3 smt.arith.solver=2 small.smt2\nunsat\n[763] % cvc4 -q small.smt2\nunsat\n[764] % \n[764] % cat small.smt2\n(declare-fun a () Int)\n(assert (distinct 0 (div 0 a)))\n(assert (= 0 (div (- (* a a) a) a)))\n(check-sat)\n[765] %\n```\n\nOS: Ubuntu 18.04\nCommit: 3cae0b4\n",
    "priority": 1
  },
  "99": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(assert (or (not (>= (+ (* (- 2) c) a b) (- 5))) (< (+ (* (- 46) b) (* (- 22) c)) 0)))\n(push)\n(assert (or (not (< (+ c a) 2)) (> a 7)))\n(check-sat)\n(pop)\n(assert (or (> (+ b a) 2) (= (+ (* 30 b) a (* 8 11 c)) 0)))\n(assert (<= b 0))\n(push)\n(assert (> (+ (* (- 3) c) (* (- 7) a)) 3))\n(check-sat)\n(pop)\n(assert (<= (+ (* (- 33) a) (* (- 7) c)) 4))\n(assert (> (+ (* 30 a) (* 17 a) (* (- 48) a)) 9))\n(check-sat)\n(check-sat)\n(assert (not (= (* 4 c) 8)))\n(assert (or (> 0 c) (not (< (* 38 c) 5))))\n(assert (or (>= (- 33) 2)\n     (not (>= (* 17 c) 41))\n     (>= (mod (to_int (* 28 b)) (to_int (* (- 2) a))) 0)))\n(assert (or (= (+ (mod 4 (to_int a)) (* (- 22) b)) 0) (<= b 7)))\n(check-sat)\n```\nZ3 arith.solver=2  gives an incorrect answer:\n```\n[589] % cvc4 -q --incremental small.smt2\nsat\nsat\nsat\nsat\nsat\n[590] % z3 small.smt2\nsat\nsat\nsat\nsat\nsat\n[591] % z3 smt.arith.solver=2 small.smt2\nsat\nsat\nsat\nsat\nunsat\n[592] % \n[592] % cat small.smt2\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(assert (or (not (>= (+ (* (- 2) c) a b) (- 5))) (< (+ (* (- 46) b) (* (- 22) c)) 0)))\n(push)\n(assert (or (not (< (+ c a) 2)) (> a 7)))\n(check-sat)\n(pop)\n(assert (or (> (+ b a) 2) (= (+ (* 30 b) a (* 8 11 c)) 0)))\n(assert (<= b 0))\n(push)\n(assert (> (+ (* (- 3) c) (* (- 7) a)) 3))\n(check-sat)\n(pop)\n(assert (<= (+ (* (- 33) a) (* (- 7) c)) 4))\n(assert (> (+ (* 30 a) (* 17 a) (* (- 48) a)) 9))\n(check-sat)\n(check-sat)\n(assert (not (= (* 4 c) 8)))\n(assert (or (> 0 c) (not (< (* 38 c) 5))))\n(assert (or (>= (- 33) 2)\n     (not (>= (* 17 c) 41))\n     (>= (mod (to_int (* 28 b)) (to_int (* (- 2) a))) 0)))\n(assert (or (= (+ (mod 4 (to_int a)) (* (- 22) b)) 0) (<= b 7)))\n(check-sat)\n[593] %\n```\n\nOS: Ubuntu 18.04\nCommit: 2673807\n",
    "priority": 1
  },
  "100": {
    "body": "Hi,\nFor this formula:\n```\n(set-logic HORN)\n(declare-fun a () Bool)\n(declare-fun b () Bool)\n(assert (not (not (not (or (not b) a)))))\n(check-sat)\n```\nZ3  gives an incorrect answer:\n```\n[541] % cvc4 -q small.smt2\nsat\n[542] % z3 small.smt2\nunsat\n[543] % cat small.smt2\n(set-logic HORN)\n(declare-fun a () Bool)\n(declare-fun b () Bool)\n(assert (not (not (not (or (not b) a)))))\n(check-sat)\n[544] %\n```\n\nOS: Ubuntu 18.04\nCommit: 2673807\n",
    "priority": 1
  },
  "101": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Int)\n(declare-fun b () Int)\n(declare-fun c () Int)\n(declare-fun d () Int)\n(declare-fun e () Int)\n(declare-fun f () Int)\n(assert (and\n     (<= a 200)\n     (>= c 0 (- (* d b) 2) 0)\n     (= (+ (- c) e (* d a)) 1)\n     (= (* e 120) a)\n     (= 0 (/ 0 d))\n     (or (>= b 0) (= a 0) (>= 0 f 1))))\n(check-sat)\n```\nZ3 smt.arith.solver=2 rewriter.flat=false gives an incorrect answer:\n```\n[719] % z3 small.smt2\nsat\n[720] % z3 rewriter.flat=false small.smt2\nsat\n[721] % z3 smt.arith.solver=2 small.smt2\nsat\n[722] % z3 smt.arith.solver=2 rewriter.flat=false small.smt2\nunsat\n[723] % \n[723] % cat small.smt2\n(declare-fun a () Int)\n(declare-fun b () Int)\n(declare-fun c () Int)\n(declare-fun d () Int)\n(declare-fun e () Int)\n(declare-fun f () Int)\n(assert (and\n     (<= a 200)\n     (>= c 0 (- (* d b) 2) 0)\n     (= (+ (- c) e (* d a)) 1)\n     (= (* e 120) a)\n     (= 0 (/ 0 d))\n     (or (>= b 0) (= a 0) (>= 0 f 1))))\n(check-sat)\n[724] %\n```\n\nOS: Ubuntu 18.04\nCommit: 2673807\n",
    "priority": 1
  },
  "102": {
    "body": "\n```\n[649] % z3 small.smt2\nsat\nunsat\n[650] % \n[650] % cat small.smt2\n(assert\n (exists ((a Real))\n (forall ((b Real))\n  (xor (< b 0.0)\n  (> b (mod (to_int b) (to_int 0.0)))))))\n(check-sat)\n(check-sat-using horn)\n[651] %\n```\n\nOS: Ubuntu 18.04\nCommit: 6e8d900\n",
    "priority": 1
  },
  "103": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :fp.xform.elim_term_ite true)\n(declare-fun a (Bool Bool Int Int Int Int Int Int Int) Bool)\n(assert (forall ((b Int) (c Bool) (d Bool) (k Int) (e Int) (f Int) (l Int) (m Int) (n Int))\n     (=> (= b 0) (not d) (a c d f l m n k e b))))\n(assert (forall ((c Bool) (d Bool) (f Int) (l Int) (m Int) (n Int) (k Int) (e Int) (b Int)\n         (gm Int) (gf Int) (gk Int) (gb Int) (gc Bool) (gn Int) (ge Int) (gl Int) (gd Bool))\n     (let ((h (and (= e 1 (ite (= b n) l b)) (= gd (distinct b n)) (= ge 0))))\n      (let ((o (and (a c d f l m n k e b) h)))\n      (=> o (a gc gd gf gl gm gn gk ge gb))))))\n(assert (forall ((c Bool) (d Bool) (f Int) (l Int) (m Int) (n Int) (k Int) (e Int) (b Int))\n     (=> (a c d f l m n k e b) d false)))\n(check-sat)\n(check-sat-using horn)\n```\nZ3  gives an incorrect answer:\n```\n[540] % z3 small.smt2\nsat\nunsat\n[541] % cat small.smt2\n(set-option :fp.xform.elim_term_ite true)\n(declare-fun a (Bool Bool Int Int Int Int Int Int Int) Bool)\n(assert (forall ((b Int) (c Bool) (d Bool) (k Int) (e Int) (f Int) (l Int) (m Int) (n Int))\n     (=> (= b 0) (not d) (a c d f l m n k e b))))\n(assert (forall ((c Bool) (d Bool) (f Int) (l Int) (m Int) (n Int) (k Int) (e Int) (b Int)\n         (gm Int) (gf Int) (gk Int) (gb Int) (gc Bool) (gn Int) (ge Int) (gl Int) (gd Bool))\n     (let ((h (and (= e 1 (ite (= b n) l b)) (= gd (distinct b n)) (= ge 0))))\n      (let ((o (and (a c d f l m n k e b) h)))\n      (=> o (a gc gd gf gl gm gn gk ge gb))))))\n(assert (forall ((c Bool) (d Bool) (f Int) (l Int) (m Int) (n Int) (k Int) (e Int) (b Int))\n     (=> (a c d f l m n k e b) d false)))\n(check-sat)\n(check-sat-using horn)\n[542] %\n```\n\nOS: Ubuntu 18.04\nCommit: 5c9fd90\n",
    "priority": 1
  },
  "104": {
    "body": "```\r\n[505] % z3 bug.smt2 \r\nunsat\r\n[506] % cvc4 -q --uf-ho bug.smt2 \r\nsat\r\n[507] % cat bug.smt2 \r\n(set-logic HORN)\r\n(declare-fun a (Bool) Bool)\r\n(declare-fun b (Bool) Bool)\r\n(assert (= a b))\r\n(check-sat)\r\n[508] %```\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 5acf4b5\r\n",
    "priority": 1
  },
  "105": {
    "body": "\n```\n[760] % z3 small.smt2\nunsat\n[761] % cvc4 -q small.smt2\nsat\n[762] % cat small.smt2\n(set-logic HORN)\n(assert (= (mod 0 0) 0))\n(check-sat)\n[763] %\n```\n\nOS: Ubuntu 18.04\nCommit: 5acf4b5\n",
    "priority": 1
  },
  "106": {
    "body": "\n```\n[742] % z3 smt.arith.solver=6 rewriter.eq2ineq=true proof=true small.smt2\nsat\nunsat\n[743] % cat small.smt2\n(declare-fun a () Real)\n(assert (forall ((b Real)) (not (= (mod (to_int b) 2) a))))\n(check-sat)\n(check-sat-using (then purify-arith smt))\n[744] %\n```\n\nOS: Ubuntu 18.04\nCommit: b686bb6\n",
    "priority": 1
  },
  "107": {
    "body": "The following trace shows a soundness bug in z3debug. Setting the random seed to 6 is necessary to trigger the bug. \r\n```\r\n[759] % z3 bug.smt2 \r\nsat\r\n[760] % z3debug bug.smt2 \r\nunsat\r\n[761] % \r\n[761] % cat bug.smt2 \r\n(set-option :smt.random_seed 6)\r\n(declare-fun x () Int)\r\n(assert (= (mod (+ 130 x) 100) (mod (- 2 (* 7839 x)) 132)))\r\n(check-sat)\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 8d39694",
    "priority": 1
  },
  "108": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Int)\n(assert (= (div 1 a 2) (bv2nat ((_ int2bv 7) a))))\n(check-sat)\n```\nZ3 debug branch  gives an incorrect answer:\n```\n[740] % z3 small.smt2 \nsat\n[741] % z3debug small.smt2 \nunsat\n[742] % \n[742] % cat small.smt2 \n(declare-fun a () Int)\n(assert (= (div 1 a 2) (bv2nat ((_ int2bv 7) a))))\n(check-sat)\n```\n\nOS: Ubuntu 18.04\nCommit: 8d39694\n",
    "priority": 1
  },
  "109": {
    "body": "The below traces shows a soundness bug on the Z3's debug branch. Z3 master hangs on the same formula\r\n```\r\n[672] % timeout -s 9 30 z3 small.smt2\r\nsat\r\nKilled\r\n[673] % time z3debug small.smt2\r\nsat\r\nunsat\r\nreal    0m2.619s\r\nuser    0m2.557s\r\nsys 0m0.000s\r\n[674] % \r\n[674] % cat small.smt2\r\n(declare-fun a (Int Int) Bool)\r\n(assert (a 142 14))\r\n(assert (forall ((b Int) (c Int) (d Int) (e Int)) (or (a b c) \r\n        (distinct d (div b 241)) (distinct e c) (a d e))))\r\n(assert (a 7 150))\r\n(check-sat)\r\n(check-sat-using (then qe-light purify-arith qe_rec))\r\n[675] % \r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 8d39694 (debug)",
    "priority": 0
  },
  "110": {
    "body": "```\r\n[619] % z3debug small.smt2\r\nsat\r\nunsat\r\n[620] % cat small.smt2\r\n(declare-fun a () Int)\r\n(declare-fun b (Int) Int)\r\n(assert (forall ((c Int)) (distinct (b (mod c 8)) 0)))\r\n(check-sat)\r\n(check-sat-using (then purify-arith qe2))\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: ceb2849\r\n",
    "priority": 0
  },
  "111": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :smt.threads 3)\n(declare-fun v () Real) \n(declare-fun a () Real) \n(declare-fun b () Real) \n(declare-fun m () Real) \n(declare-fun ttt () Real) \n(declare-fun z () Real)\n(assert (exists ((c Real)) (let ((?d (mod (- 85) b))) (=> (and (or (xor (and (>= (mod (- 151 26) (+ (+ (- ?d (- 44 ttt ttt)) (+ 234 (* 60 ttt) v)) (* 78 z))) m) (=> (xor (<= 0 c) (<= c ttt)) (>= (+ (div 202 ?d c) v) 3))) (<= ttt 242)) (<= (* 200 (* v v a a)) (- (+ 150 b) (/ 45 m z)))) (>= a 35)  (> b 0)  (>= z m)  (>= v 0)) (<= (+ (mod ?d ttt) v) a))))) (check-sat)\n```\nZ3 debug branch  gives an incorrect answer:\n```\n$ cat small.smt2 \n(set-option :smt.threads 3)\n(declare-fun v () Real) \n(declare-fun a () Real) \n(declare-fun b () Real) \n(declare-fun m () Real) \n(declare-fun ttt () Real) \n(declare-fun z () Real)\n(assert (exists ((c Real)) (let ((?d (mod (- 85) b))) (=> (and (or (xor (and (>= (mod (- 151 26) (+ (+ (- ?d (- 44 ttt ttt)) (+ 234 (* 60 ttt) v)) (* 78 z))) m) (=> (xor (<= 0 c) (<= c ttt)) (>= (+ (div 202 ?d c) v) 3))) (<= ttt 242)) (<= (* 200 (* v v a a)) (- (+ 150 b) (/ 45 m z)))) (>= a 35)  (> b 0)  (>= z m)  (>= v 0)) (<= (+ (mod ?d ttt) v) a))))) (check-sat)\n$ z3debug/build/z3 small.smt2 \nunsat\n$ z3/build/z3 small.smt2 \nsat\n```\n\nOS: Ubuntu 18.04\nCommit: ceb2849\n",
    "priority": 1
  },
  "112": {
    "body": "Hi,\nFor this formula:\n```\n(declare-const a Int) \n(declare-const b Int) \n(declare-const c Int) \n(declare-const d Int) \n(declare-const j2 Int) \n(assert (not (distinct b c))) \n(assert (<= 150  b d)) \n(assert (< d a))  \n(assert (< c j2))  \n(assert (or (= (+ (mod b a) d) (/ (* a) c)) (= (+ (* d a)) (+ (* c a) j2)) (= 0 (mod (* j2 a) c)))) \n(check-sat)  \n```\nZ3 debug branch  gives an incorrect answer:\n```\n$ z3/build/z3 small.smt2 \nsat\n$ z3debug/build/z3 small.smt2 \nunsat\n$ cat small.smt2\n(declare-const a Int) \n(declare-const b Int) \n(declare-const c Int) \n(declare-const d Int) \n(declare-const j2 Int) \n(assert (not (distinct b c))) \n(assert (<= 150  b d)) \n(assert (< d a))  \n(assert (< c j2))  \n(assert (or (= (+ (mod b a) d) (/ (* a) c)) (= (+ (* d a)) (+ (* c a) j2)) (= 0 (mod (* j2 a) c)))) \n(check-sat) \n```\n\nOS: Ubuntu 18.04\nCommit: ceb2849\n",
    "priority": 1
  },
  "113": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a (Int Int Int) Int)\n(declare-fun b (Int Int Int) Int)\n(declare-fun c (Int Int Int) Bool)\n(declare-fun d () Int)\n(assert\n(let ((aa (a d d d)))\n(let ((e (a aa d d)))\n(let ((f (div (~ 3) aa)))\n(let ((i (~ f)))\n(let ((g (* 3 e)))\n(let ((h (- 214 g aa)))\n(let ((l (~ g)))\n(let ((j (- i)))\n(let ((k (- i l)))\n(let ((p (* 4 h)))\n(let ((q (div i 0)))\n(let ((m (~ d)))\n(let ((n (b aa aa i)))\n(let ((o (* 4 g)))\n(let ((r (~ o)))\n(let ((af (ite (c 3 0 3) 1 93)))\n(let ((ag (distinct e p)))\n(let ((ah (> aa k)))\n(let ((ai (c q g 0)))\n(let ((aj (c d aa 0)))\n(let ((ak (= r i)))\n(let ((al (= f 0)))\n(let ((am (= m j)))\n(let ((ao (> n h)))\n(let ((ap (>= n g)))\n(let ((aq (ite am aa af)))\n(let ((ar (ite am i o)))\n(let ((as (ite ag g o)))\n(let ((ax (ite al m as)))\n(let ((at (ite ao r 0)))\n(let ((au (ite ai l 0)))\n (and (distinct\n       (xor ak (xor aj (< as (ite ap ax at))))\n       (distinct (ite al au 0) ar))\n  (< (ite ah e af) aq))))))))))))))))))))))))))))))))))\n(check-sat)\n```\nZ3 debug branch  gives an incorrect answer:\n```\n[664] % z3 small.smt2\nsat\n[665] % z3debug small.smt2\nunsat\n[666] % \n[666] % cat small.smt2\n(declare-fun a (Int Int Int) Int)\n(declare-fun b (Int Int Int) Int)\n(declare-fun c (Int Int Int) Bool)\n(declare-fun d () Int)\n(assert\n(let ((aa (a d d d)))\n(let ((e (a aa d d)))\n(let ((f (div (~ 3) aa)))\n(let ((i (~ f)))\n(let ((g (* 3 e)))\n(let ((h (- 214 g aa)))\n(let ((l (~ g)))\n(let ((j (- i)))\n(let ((k (- i l)))\n(let ((p (* 4 h)))\n(let ((q (div i 0)))\n(let ((m (~ d)))\n(let ((n (b aa aa i)))\n(let ((o (* 4 g)))\n(let ((r (~ o)))\n(let ((af (ite (c 3 0 3) 1 93)))\n(let ((ag (distinct e p)))\n(let ((ah (> aa k)))\n(let ((ai (c q g 0)))\n(let ((aj (c d aa 0)))\n(let ((ak (= r i)))\n(let ((al (= f 0)))\n(let ((am (= m j)))\n(let ((ao (> n h)))\n(let ((ap (>= n g)))\n(let ((aq (ite am aa af)))\n(let ((ar (ite am i o)))\n(let ((as (ite ag g o)))\n(let ((ax (ite al m as)))\n(let ((at (ite ao r 0)))\n(let ((au (ite ai l 0)))\n (and (distinct\n       (xor ak (xor aj (< as (ite ap ax at))))\n       (distinct (ite al au 0) ar))\n  (< (ite ah e af) aq))))))))))))))))))))))))))))))))))\n(check-sat)\n\n```\n\nOS: Ubuntu 18.04\nCommit: ceb2849\n",
    "priority": 1
  },
  "114": {
    "body": "```\r\n[954] % z3debug unsat_core=true smt.phase_selection=5 small.smt2\r\nunsat\r\n[955] % z3 small.smt2\r\nsat\r\n[956] % z3debug small.smt2\r\nsat\r\n[957] % \r\n[957] % cat small.smt2\r\n(declare-fun a () Int)\r\n(declare-fun b () Int)\r\n(declare-fun c () Int)\r\n(declare-fun d () Int)\r\n(declare-fun e () Int)\r\n(assert (= 0 (- c)))\r\n(assert (> (- 1 a (- b)) (* 205 d e)))\r\n(assert (= (* 98 a) (* 133 (+ 215 b))))\r\n(assert (and (>= (* a b) 1) (<= (* e d) 7)))\r\n(check-sat)\r\n[958] % \r\n```\r\nOS: Ubuntu 18.04\r\nCommit: ceb2849\r\n",
    "priority": 0
  },
  "115": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real) \n(assert (= (div 52 a a) 10)) \n(check-sat-using (then purify-arith qe2 qe-sat))\n```\nZ3 debug branch  gives an incorrect answer:\n```\n$ z3/build/z3 small.smt2 \nsat\n$ z3debug/build/z3 small.smt2 \nunsat\n$ cat small.smt2 \n(declare-fun a () Real) \n(assert (= (div 52 a a) 10)) \n(check-sat-using (then purify-arith qe2 qe-sat))  \n```\n\nOS: Ubuntu 18.04\nCommit: d4b137a\n",
    "priority": 0
  },
  "116": {
    "body": "Hi,\r\nthe below log shows a soundness bug in Z3's debug build when running z3 with two threads. \r\n```\r\n[971] % z3 bug.smt2 \r\nsat\r\n[972] % z3debug bug.smt2\r\nsat\r\n[973] % z3 smt.threads=2 bug.smt2\r\nsat\r\n[974] % z3debug smt.threads=2 bug.smt2\r\nunsat\r\n[975] % cat bug.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(assert (not (exists ((d Real)) (xor (<= 0 d a) (= (mod (to_int d) (to_int c)) 1) \r\n             (= c (div 1 (to_int b)))))))\r\n(check-sat)\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: bb637219",
    "priority": 1
  },
  "117": {
    "body": "Hi,\r\nthe below log shows a soundness bug in Z3's debug build when running z3 with two threads. \r\n```\r\n[971] % z3 bug.smt2 \r\nsat\r\n[972] % z3debug bug.smt2\r\nsat\r\n[973] % z3 smt.threads=2 bug.smt2\r\nsat\r\n[974] % z3debug smt.threads=2 bug.smt2\r\nunsat\r\n[975] % cat bug.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(assert (not (exists ((d Real)) (xor (<= 0 d a) (= (mod (to_int d) (to_int c)) 1) \r\n             (= c (div 1 (to_int b)))))))\r\n(check-sat)\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: bb637219",
    "priority": 1
  },
  "118": {
    "body": "Hi,\nFor this formula:\n```\n(declare-const a Int)\n(declare-const b Int)\n(declare-const c Int)\n(assert (< a b))\n(assert (= c (+ (* a b) a)))\n(assert (or (= c (/ a b)) (= c 0)))\n(check-sat)\n```\nZ3 debug branch  gives an incorrect answer:\n```\n[634] % z3 small.smt2\nsat\n[635] % z3debug small.smt2\nunsat\n[636] % cat small.smt2\n(declare-const a Int)\n(declare-const b Int)\n(declare-const c Int)\n(assert (< a b))\n(assert (= c (+ (* a b) a)))\n(assert (or (= c (/ a b)) (= c 0)))\n(check-sat)\n```\n\nOS: Ubuntu 18.04\nCommit: aa119d1\n",
    "priority": 1
  },
  "119": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(set-option :model false) \r\n(set-option :smt.random_seed 5) \r\n(declare-fun a () Real) \r\n(declare-fun b () Real) \r\n(declare-fun x2 () Real) \r\n(declare-fun x3 () Real) \r\n(declare-fun c () Real) \r\n(assert (or (= (+ (* 24 x2) (* (- 12) c) (* (- 11) x2) (* 21 b)) (- 25)) (not (< (+ (* (- 42) x2) (* 19 x2)  (* 37 a)) 38)))) \r\n(assert (< (+ (div (- 40) x2) (* 1 x3) (* (- 30) c) (* (- 45) x2) (* 39 x3)) (- 6))) (assert (or (not (> (+ (* 26 a) (* (- 42) b) (* (- 40) x2) (* (- 33) a) x2  (* (- 5) c) (* 46 c) (* 13 b) (* (- 94) c) (* (- 22) c) (* (- 6) b)) (- 16))) (not (<= (+ (* 48 x3) (* 27 a) (* (- 23) x2) (* (- 35) x3)) 37)) (not (<= (+ (* 25 a) (* 16 b) (* 47 x2) (* (- 22) a)) 10)))) \r\n(assert (>= (+ (* 38 a) (* 6 b) (* (- 48) b) (div (- 27) c) (* 33 b) (* (- 14) x2) (* 40 c) (* 26 x3)) 42)) \r\n(check-sat) \r\n(push) \r\n(check-sat) \r\n(pop) \r\n(assert (or (<= (+ (* (- 32) x2) (* 30 b) (* 41 x2) (* (- 37) b)) (- 21)) (< (+ (* 9 a) (* (- 1) x2) (* 48 b) (* (- 47) a) (* 49 a) 0 (* 9 b) (* (- 30) c) (* 38 x2) (* 5 a)) 19))) (check-sat)  \r\n(assert (or (< (+ (* 28 x3)    23  (* (- 36) x2)) 0) (< (+  (* 3) (* c)) 40))) (check-sat)   \r\n(assert (or (not (< (+  (* (- 4) a)) (- 28))) (= (+ (* 41 b)   c) 0))) \r\n(check-sat) \r\n(check-sat) \r\n(check-sat)     \r\n```\r\nZ3 debug branch gives incorrect answers and an assertion violation:\r\n```\r\n$ z3debug/build/z3 small.smt2 \r\nsat\r\nsat\r\nsat\r\nsat\r\nunsat\r\nunsat\r\nASSERTION VIOLATION\r\nFile: ../src/math/lp/lar_solver.cpp\r\nLine: 298\r\n!m_mpq_lar_core_solver.m_r_solver.column_is_feasible(m_infeasible_column)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nA\r\n$ z3/build/z3 small.smt2 \r\nsat\r\nsat\r\nsat\r\nsat\r\nsat\r\nsat\r\nsat\r\n$ cat small.smt2 \r\n(set-option :model false) \r\n(set-option :smt.random_seed 5) \r\n(declare-fun a () Real) \r\n(declare-fun b () Real) \r\n(declare-fun x2 () Real) \r\n(declare-fun x3 () Real) \r\n(declare-fun c () Real) \r\n(assert (or (= (+ (* 24 x2) (* (- 12) c) (* (- 11) x2) (* 21 b)) (- 25)) (not (< (+ (* (- 42) x2) (* 19 x2)  (* 37 a)) 38)))) \r\n(assert (< (+ (div (- 40) x2) (* 1 x3) (* (- 30) c) (* (- 45) x2) (* 39 x3)) (- 6))) (assert (or (not (> (+ (* 26 a) (* (- 42) b) (* (- 40) x2) (* (- 33) a)   x2  (* (- 5) c) (* 46 c) (* 13 b) (* (- 94) c) (* (- 22) c) (* (- 6) b)) (- 16))) (not (<= (+ (* 48 x3) (* 27 a) (* (- 23) x2) (* (- 35) x3)) 37)) (not (<= (+ (* 25 a) (* 16 b) (* 47 x2) (* (- 22) a)) 10)))) \r\n(assert (>= (+ (* 38 a) (* 6 b) (* (- 48) b) (div (- 27) c) (* 33 b) (* (- 14) x2) (* 40 c) (* 26 x3)) 42)) \r\n(check-sat) \r\n(push) \r\n(check-sat) \r\n(pop) \r\n(assert (or (<= (+ (* (- 32) x2) (* 30 b) (* 41 x2) (* (- 37) b)) (- 21)) (< (+ (* 9 a) (* (- 1) x2) (* 48 b) (* (- 47) a) (* 49 a) 0 (* 9 b) (* (- 30) c) (* 38 x2) (* 5 a)) 19))) (check-sat)  \r\n(assert (or (< (+ (* 28 x3)    23  (* (- 36) x2)) 0) (< (+  (* 3) (* c)) 40))) (check-sat)   \r\n(assert (or (not (< (+  (* (- 4) a)) (- 28))) (= (+ (* 41 b)   c) 0))) \r\n(check-sat) \r\n(check-sat) \r\n(check-sat)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: aa119d1\r\n",
    "priority": 1
  },
  "120": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun v () Real) \r\n(declare-fun d () Real) \r\n(declare-fun b () Real) \r\n(declare-fun m () Real) \r\n(declare-fun t2uscore0dollarskuscore0 () Real) \r\n(declare-fun z () Real) \r\n(assert (not (exists ((ts2uscore0 Real)) \r\n    (=> (or (and (and (= (<= ts2uscore0 ts2uscore0 t2uscore0dollarskuscore0) \r\n    (>= v 0)) (>= t2uscore0dollarskuscore0 172)) (<= (- (div d d)) 0)) (<= z m)) \r\n    (<= (/ 0 v) d))))) \r\n(check-sat)\r\n```\r\nZ3 debug branch  gives an incorrect answer:\r\n```\r\n$ z3debug/build/z3 small.smt2 \r\nunsat\r\n$ z3/build/z3 small.smt2 \r\nsat\r\n$ cat small.smt2 \r\n(declare-fun v () Real) \r\n(declare-fun d () Real) \r\n(declare-fun b () Real) \r\n(declare-fun m () Real) \r\n(declare-fun t2uscore0dollarskuscore0 () Real) \r\n(declare-fun z () Real) \r\n(assert (not (exists ((ts2uscore0 Real)) \r\n    (=> (or (and (and (= (<= ts2uscore0 ts2uscore0 t2uscore0dollarskuscore0) \r\n    (>= v 0)) (>= t2uscore0dollarskuscore0 172)) (<= (- (div d d)) 0)) (<= z m)) \r\n    (<= (/ 0 v) d))))) \r\n(check-sat)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: aa119d1\r\n",
    "priority": 1
  },
  "121": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () Real)                                                         \r\n(assert (not (exists (( b Real ))                                               \r\n(=> (and (and (or (and (and (or (or (and (and (and (and (or (and (and (and (distinct 0 (+ a 0 )))))))))))))))))\r\n( or  ( or ( <= 0.0 0 )  ) ) ) ) ) )                                            \r\n(check-sat) \r\n```\r\nZ3  incorrectly gives `sat`, while this formula should be unsat.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 6ad261e\r\n",
    "priority": 0
  },
  "122": {
    "body": "Hi,\r\non the following formula Z3 reports `unsat` while Z3 master branch reports `sat`\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(assert (or (distinct b 2.0) (not (= (/ (- b) (* 2.0 b)) 0.0))))\r\n(assert (< (* a b) 0.0))\r\n(push)\r\n(check-sat)\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 63aae5d",
    "priority": 1
  },
  "123": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun x ( ) String) \n(declare-fun i1 ( ) Int) \n(declare-fun i2 ( ) Int) \n(declare-fun i3 ( ) Int) \n(declare-fun i4 ( ) Int) \n(assert ( and ( < i1 8 ) ( < i2 100 ) ( > ( / 256 i1 i2 ) ( str.len x )))) \n(assert ( xor  ( <= i4 112 ) ( > ( * 227 i3 i4 ) ( str.len x )))) \n(assert ( = \"efg\" ( str.substr x i1 i2 ))) \n(assert ( distinct \"bef\" ( str.substr x i3 i4 ))) \n(assert ( > ( str.len x ) 91 )) (check-sat)    \n```\nZ3 debug branch  gives an incorrect answer:\n```\n$ CVC4/build/bin/cvc4 --quiet small.smt2 \nsat\n$ z3debug/build/z3 small.smt2 \nunsat\n$ cat small.smt2 \n(declare-fun x ( ) String) \n(declare-fun i1 ( ) Int) \n(declare-fun i2 ( ) Int) \n(declare-fun i3 ( ) Int) \n(declare-fun i4 ( ) Int) \n(assert ( and ( < i1 8 ) ( < i2 100 ) ( > ( / 256 i1 i2 ) ( str.len x )))) \n(assert ( xor  ( <= i4 112 ) ( > ( * 227 i3 i4 ) ( str.len x )))) \n(assert ( = \"efg\" ( str.substr x i1 i2 ))) \n(assert ( distinct \"bef\" ( str.substr x i3 i4 ))) \n(assert ( > ( str.len x ) 91 )) (check-sat)  \n```\n\nOS: Ubuntu 18.04\nCommit: a02d3e9\n",
    "priority": 0
  },
  "124": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(set-option :solver.enforce_model_conversion true)\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(assert (xor (>= b 0) (>= (+ (/ 5 b)) 2) (< a 0)))\r\n(check-sat)\r\n(assert (< (+ (* (- 6) a)) 4))\r\n(check-sat)\r\n\r\n```\r\nZ3  gives an incorrect answer:\r\n```\r\n[654] % z3debug small.smt2\r\nsat\r\nsat\r\n[655] % z3 small.smt2\r\nsat\r\nunsat\r\n[656] % \r\n[656] % cat small.smt2\r\n(set-option :solver.enforce_model_conversion true)\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(assert (xor (>= b 0) (>= (+ (/ 5 b)) 2) (< a 0)))\r\n(check-sat)\r\n(assert (< (+ (* (- 6) a)) 4))\r\n(check-sat)\r\n```\r\nZ3 debug is correct.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: a51d65d\r\n",
    "priority": 0
  },
  "125": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(set-option :nlsat.inline_vars true)\r\n(assert (distinct (/ 40  (^ 0.375 210)) (^ 0 4.0)))\r\n(check-sat)\r\n\r\n```\r\nZ3  gives an incorrect answer:\r\n```\r\n[556] % z3debug small.smt2\r\n(= (* k!0 (^ (/ 3.0 8.0) 210.0)) 40.0) -> (= (^ (/ 3.0 8.0) 210.0)\r\n   (/ 15684240429131529254685698284890751184639406145730291592802676915731672495230992603635422093849215049.0\r\n      4455508415646675018204269146191690746966043464109921807206242693261010905477224010259680479802120507596330380442963288389344438204468201170168614570041224793214838549179946240315306828365824.0))\r\nsat\r\n[557] % z3 small.smt2\r\nunsat\r\n[558] % \r\n[558] % cat small.smt2\r\n(set-option :nlsat.inline_vars true)\r\n(assert (distinct (/ 40  (^ 0.375 210)) (^ 0 4.0)))\r\n(check-sat)\r\n\r\n```\r\nZ3 debug branch is correct.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: a51d65d\r\n",
    "priority": 1
  },
  "126": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(set-option :solver.enforce_model_conversion true)\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(assert (< a (- 0.5)))\r\n(check-sat)\r\n(assert (not (= (* b c) 0)))\r\n(assert (= a (- 1)))\r\n(check-sat)\r\n```\r\nZ3  gives an incorrect answer:\r\n```\r\n[952] % z3debug small.smt2\r\nsat\r\nsat\r\n[953] % z3 small.smt2\r\nsat\r\nunsat\r\n[954] % \r\n[954] % cat small.smt2\r\n(set-option :solver.enforce_model_conversion true)\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(assert (< a (- 0.5)))\r\n(check-sat)\r\n(assert (not (= (* b c) 0)))\r\n(assert (= a (- 1)))\r\n(check-sat)\r\n```\r\nZ3 debug branch should be correct.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: a51d65d\r\n",
    "priority": 0
  },
  "127": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Int)\n(declare-fun b () Int)\n(declare-fun c (Int) Bool)\n(assert (> b 0))\n(assert (= (+ a b) 1))\n(push)\n(assert (c (div (- 1) (+ b 1))))\n(check-sat)\n```\nZ3 debug branch  incorrectly gives unsat, while this formula should be sat.\n\nOS: Ubuntu 18.04\nCommit: f088932\n",
    "priority": 1
  },
  "128": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real)\n(assert (= (* 40 a a) 30))\n(push)\n(check-sat)\n```\nZ3  incorrectly gives unsat, while this formula should be sat.\n\nOS: Ubuntu 18.04\nCommit: 6b0e599\n",
    "priority": 1
  },
  "129": {
    "body": "Hi,\r\nFor the following formulas, z3 debug branch gives incorrect answers:\r\n\r\n```\r\n(declare-fun a () Int)\r\n(declare-fun b () Int)\r\n(declare-fun c () Int)\r\n(assert (exists ((d Int)) (> (/ 0.0 (+ 0.5 (ite (distinct a d) b c))) 0)))\r\n(check-sat)\r\n```\r\nz3 debug branch gives sat while z3 master branch gives unsat. (Fixed levnach)\r\n\r\n--------------\r\n```\r\n(declare-fun a () Int)\r\n(declare-fun b () Int)\r\n(assert (exists ((c Int)) (> (/ (+ c 1) (+ 0.5 (ite (= c 2) a b))) 2)))\r\n(check-sat)\r\n```\r\nz3 debug branch gives unsat while z3 master branch gives sat. (Fixed levnach)\r\n\r\n--------------\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Int)\r\n(assert (and (> a 1) (= 0 (/ 1 a b))))\r\n(check-sat)\r\n```\r\nz3 debug branch gives unsat while the formula should be sat. (Fixed levnach)\r\n\r\n--------------\r\n```\r\n(assert (exists ((a Real) (b Real)) (and (= a 2) (or (= (/ 1 a) 0) (> b 0)))))\r\n(check-sat) \r\n```\r\nz3 debug branch gives unsat while z3 master branch gives sat. (Fixed levnach)\r\n\r\n--------------\r\n\r\nOS: Ubuntu 18.04\r\nCommit: c716978 ",
    "priority": 1
  },
  "130": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(assert (exists ((a Int) (b Int)) (and (> b 1) (> a (/ 1 b)))))\r\n(check-sat)\r\n```\r\nZ3 debug branch  incorrectly gives unsat, while this formula should be sat.\r\nIf we change (> b 1) to (> b 0), Z3 debug branch correctly answers sat,\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 9f16fee\r\n",
    "priority": 1
  },
  "131": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real)\n(assert (or (= a (- 2.0)) (= 1.0 (/ 1.0 a) 0.0)))\n(push 1)\n(check-sat)\n```\nZ3 debug branch  incorrectly gives unsat, while this formula should be sat.\n\nOS: Ubuntu 18.04\nCommit: caa118c\n",
    "priority": 1
  },
  "132": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real)\n(declare-fun b () Real)\n(assert (not (<= (* (- a b) (- a b) (* a a b b)) 0)))\n(check-sat-using nlsat)\n\n```\nZ3  incorrectly gives unsat, while this formula should be sat.\n\nOS: Ubuntu 18.04\nCommit: ad6062c\n",
    "priority": 1
  },
  "133": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Real)\r\n(assert (= (to_int a) 3))\r\n(assert (= (to_int (/ 1 a)) 0))\r\n(check-sat)\r\n```\r\nz3 debug branch gives unsat while z3 master branch gives sat.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: caa118c",
    "priority": 0
  },
  "134": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real)\n(assert (distinct (^ a 0.0) 1.0))\n(check-sat-using nlqsat)\n```\nZ3  incorrectly gives unsat, while this formula should be sat.\n\nOS: Ubuntu 18.04\nCommit: f810f25\n",
    "priority": 1
  },
  "135": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun t () Int)\n(assert (> t (bv2nat ((_ int2bv 1) t))))\n(check-sat-using (then qfidl smt))\n```\nZ3  incorrectly gives unsat, while this formula should be sat.\n\nOS: Ubuntu 18.04\nCommit: d25db0d\n",
    "priority": 1
  },
  "136": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Int)\n(assert (distinct a (str.to.int (int.to.str a))))\n(check-sat-using fix-dl-var)\n```\nZ3  incorrectly gives unsat, while this formula should be sat.\n\nOS: Ubuntu 18.04\nCommit: aaf2c3b\n",
    "priority": 1
  },
  "137": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-sort S 0)\r\n(assert (forall ((a S) (b S)) (= a b)))\r\n(check-sat)\r\n(check-sat-using (then qe smt))\r\n(check-sat-using (then qe-light smt))\r\n(check-sat-using (then qe_rec smt))\r\n(check-sat-using (then qsat smt))\r\n(check-sat-using (then qe2 smt))\r\n```\r\n`default` `qe` `qe-light` `qe_rec` correctly reports `sat`,  while `qsat` and `qe2` incorrectly reports `unsat`.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: a4cc27\r\n",
    "priority": 1
  },
  "138": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a (Int) Bool)\r\n(assert (exists ((b Int)) (and (> b 0) (a b))))\r\n(check-sat)\r\n(check-sat-using (then qe_rec smt))\r\n```\r\n`check-sat` reports `sat` while `(check-sat-using (then qe_rec smt))` reports `unsat`\r\n\r\nOS: Ubuntu 18.04\r\nRevision: ba4cc27",
    "priority": 1
  },
  "139": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun d () (_ BitVec 4))\r\n(assert\r\n  (let ((a!6 (ite (and (= d #x0) true)\r\n                  true\r\n                  (and (= d #x0) true))))\r\n  (and a!6 a!6)))\r\n(check-sat-using dom-simplify)\r\n```\r\nz3 gives an incorrect answer `unsat` on this `sat` formula. \r\n` (check-sat-using default)` gives `sat`\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 524434c",
    "priority": 1
  },
  "140": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () (Array Bool Bool))\r\n(declare-fun b () (Array Bool Bool))\r\n(declare-fun c () Bool)\r\n(declare-fun d () Bool)\r\n(declare-fun e () Bool)\r\n(assert (= a (store b c d)))\r\n(assert (distinct e (select a (select b d))))\r\n(assert (or (and d e)))\r\n(assert (or e c))\r\n(check-sat-using (then dom-simplify smt))\r\n```\r\nz3 gives `unsat`, while z3-4.8.7 gives `sat`.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 524434c",
    "priority": 1
  },
  "141": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-sort T 0)\r\n(assert (forall ((a T) (b T)) (= a b)))\r\n(check-sat-using (then qe-light smt))\r\n```\r\nz3 gives `unsat` on this `sat` formula.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 524434c",
    "priority": 1
  },
  "142": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun b ((Array Int (Array Int Int))) Bool)\r\n(declare-fun d () (Array Int (Array Int Int)))\r\n(assert (forall ((a (Array Int (Array Int Int)))) (b a)))\r\n(assert (not (b d)))\r\n(check-sat)\r\n```\r\n`z3 smt.ematching=false` incorrectly gives `sat`, while this formula should be `unsat`.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 5dc8c93",
    "priority": 1
  },
  "143": {
    "body": "Consider the following formula\r\n\r\n```\r\n(declare-fun a () String)   \r\n(assert  (and  (= (ite (= (str.at (str.substr a (+ (str.indexof a \"=\" 0) 1)                       \r\n              (- (str.len a) (+ (str.indexof a \"=\" 0) 1))) (- (str.len (str.substr a (+ (str.indexof a \"=\" 0) 1) \r\n              (- (str.len a) (+ (str.indexof a \"=\" 0) 1)))) 1)) \"\") 1 0) 0) \r\n              (not (= (ite (= (str.at (str.substr a (- (str.indexof a \"=\" 0) 1)               \r\n              (- (str.len a) (+ (str.indexof a \"=\" 0) 1))) 0) \" \") 1 0) 0))))            \r\n(check-sat)\r\n```\r\n\r\nZ3 reports this formula to be `unsat` although e.g.\r\n```\r\n(model\r\n(define-fun a () String \" =A\")\r\n)\r\n```\r\nis a model which Z3 accepts.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 0b486d2",
    "priority": 1
  },
  "144": {
    "body": "Consider the following formula: \r\n\r\n```\r\n(declare-const a (_ BitVec 8)) \r\n(declare-const b (_ BitVec 8)) \r\n(declare-const c (_ BitVec 8)) \r\n(assert (= (bvxnor a b c) (bvxnor (bvxnor a b) c)))\r\n(check-sat)     \r\n```\r\nZ3 reports `unsat` on it although the formula should clearly be `sat`.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 1fd4c91",
    "priority": 1
  },
  "145": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(assert (exists ((c Real)) (and (or (< b c 0) (> a 0)) (> b 0) (> (+ a b) 0))))\r\n(check-sat)\r\n```\r\nboth Z3 smt.arith.solver=1 and smt.arith.solver=3 incorrectly give `unsat`, while this formula should be `sat`.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 1fdde9e\r\n",
    "priority": 1
  },
  "146": {
    "body": "Hi, on the following satisfiable formula z3 returns `unsat` while z3str3 crashes with a segfault.\r\n\r\n```\r\n(declare-fun b () String)\r\n(declare-fun a () String)\r\n(assert\r\n (and\r\n  (= (ite\r\n      (str.contains\r\n       (str.++ (str.replace (str.substr (str.substr a 0 0) 0 0) \"R\" \"r\")\r\n        (str.substr (str.substr a 0 (- (str.indexof a \"=\" 0) 0))\r\n         (- (str.indexof (str.substr a 0 (- (str.indexof a \"=\" 0) 0)) \"R\" 0) 1)\r\n         (- (str.len (str.substr a 0 (- (str.indexof a \"=\" 0) 0)))\r\n          (+ (str.indexof (str.substr a 0 (- (str.indexof a \"=\" 0) 0)) \"R\" 0) 1)))) \"X\")\r\n      1 0)\r\n   0)\r\n  (distinct (ite (str.contains (str.substr a 0 (- (str.indexof a \"=\" 0) 0)) \"R\") 1 0) 0)\r\n  (= (ite (str.contains (str.substr a 0 (- (str.indexof a \"=\" 0))) \"J\") 1 0)\r\n   (ite (str.contains (str.substr a 0 (- (str.indexof a \"=\" 0))) \"I\") 1 0)\r\n   (ite\r\n    (=\r\n     (str.at\r\n      (str.substr a 0 (- (str.indexof a \"=\" 0) 0))\r\n      (- (str.len (str.substr a 0 (- (str.indexof a \"=\" 0) 0))) 1))\r\n     \"\\n\") 1 0) 0)\r\n  (distinct (ite (= (str.at (str.substr a 0 (- (str.indexof a \"=\" 0) 0)) 0) \"\\v\") 1 0) 0)\r\n  (distinct (ite (str.contains a \"=\") 1 0) 0)\r\n  (= (ite (= (str.len a) 0) 1 0) (ite (str.contains b \"H\") 1 0))\r\n  (distinct (ite (str.contains b \"F\") 1 0) 0)\r\n  (distinct (ite (str.contains b \"E\") 1 0) 0)\r\n  (distinct (ite (str.contains b \"D\") 1 0) 0)\r\n  (= (ite (str.contains b \"C\") 1 0) (ite (= (str.at b 0) \"\") 1 0) 0)))\r\n(check-sat)\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: 184f7ce",
    "priority": 1
  },
  "147": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Int)\r\n(declare-fun b () Int)\r\n(push)\r\n(assert (= b 0))\r\n(check-sat)\r\n(pop)\r\n(assert (= b 0))\r\n(assert (= a 1))\r\n(check-sat)\r\n```\r\nz3 smt.arith.solver=1 incorrectly reports `unsat` to the second `(check-sat)`:\r\n```\r\n% z3 smt.arith.solver=1 small.smt2\r\nsat\r\nunsat\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 28cb13f",
    "priority": 1
  },
  "148": {
    "body": "Hi, \r\n\r\non the following formula Z3 returns `unsat` on this satisfiable formula.\r\n\r\n```\r\n(declare-fun value2 () String)\r\n(declare-fun key1 () String)\r\n(declare-fun value1 () String)\r\n(declare-fun key2 () String)                                  \r\n                                                                                \r\n(assert                                                                         \r\n(and                                                                            \r\n    (= (str.at (str.substr value1 0 1) 0) \"\\r\")                                 \r\n    (not                                                                        \r\n        (= (str.at (str.substr value1 (+ (str.indexof value1 \"=\" 0) 1)          \r\n        (- 1 (+ (str.indexof value1 \"=\" 0) 1))) 0) \"\\f\")                        \r\n    )                                                                           \r\n    (= (ite (= (str.len (str.substr value1 0 (- (str.indexof value1 \"=\" 0) 0))) 0) 1 0) 0)) \r\n)                                                                               \r\n(check-sat)                                                                     \r\n(get-model)  \r\n```\r\nWhen feeding the following model to the formula, it is satisfiable\r\n\r\n```\r\n(define-fun value2 () String \"\")\r\n(define-fun key1 () String \"\")\r\n(define-fun value1 () String \"\\r=\")\r\n(define-fun key2 () String \"\")\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 17d67c1",
    "priority": 1
  },
  "149": {
    "body": "Hi, \r\n\r\non the following formula z3str3 using `z3 smt.string_solver=z3str3 model_validate=true` gives `unsat` while without the `model_validate=true` returns `sat` on it.\r\n```\r\n(declare-fun RrCnv_new () Bool)\r\n(declare-fun bjvRH_new () Bool)\r\n(declare-fun DOxcm_new () Bool)\r\n(declare-fun wlGYz_new () Bool)\r\n(declare-fun Wadrq_new () Bool)\r\n(declare-fun QEKUW_new () Bool)\r\n(declare-fun QWKkD_new () Bool)\r\n(declare-fun b () Bool)\r\n(declare-fun TWhvf_new () Bool)\r\n(declare-fun xoDNP_new () Bool)\r\n(declare-fun bHPCR_new () Bool)\r\n(declare-fun poJbv_new () Bool)\r\n(declare-fun bZrcp_new () Bool)\r\n(declare-fun fBQJl_new () Bool)\r\n(declare-fun hsNXV_new () String)\r\n(declare-fun T_1 () Bool)\r\n(declare-fun T_2 () Bool)\r\n(declare-fun T_3 () Bool)\r\n(declare-fun T_4 () Bool)\r\n(declare-fun T_5 () Bool)\r\n(declare-fun T_6 () Bool)\r\n(declare-fun T_7 () Bool)\r\n(declare-fun T_8 () Bool)\r\n(declare-fun T_9 () Bool)\r\n(declare-fun a () Bool)\r\n(declare-fun T_b () Bool)\r\n(declare-fun T_c () Bool)\r\n(declare-fun T_d () Bool)\r\n(declare-fun T_e () Bool)\r\n(declare-fun var_0xINPUT_166177 () String)\r\n(declare-fun shifted_T_1 () Bool)\r\n(declare-fun shifted_T_2 () Bool)\r\n(declare-fun shifted_var_0xINPUT_40408 () String)\r\n(assert (distinct (or (distinct RrCnv_new (not (distinct bjvRH_new T_2)))) (not (distinct \"\" (str.substr hsNXV_new 242 (str.len var_0xINPUT_166177))))))\r\n(assert T_1)\r\n(assert (distinct T_2 (not (distinct \"\" var_0xINPUT_166177))))\r\n(assert T_2)\r\n(assert (distinct T_3 (and (distinct \"\" var_0xINPUT_166177))))\r\n(assert (not (distinct DOxcm_new (or (= QWKkD_new T_7)) (distinct (str.substr hsNXV_new 108 (str.len var_0xINPUT_166177)) \"\"))))\r\n(assert (and (distinct wlGYz_new (not (= Wadrq_new T_5)))))\r\n(assert (distinct (and (distinct Wadrq_new (not (distinct TWhvf_new T_9)))) (distinct (str.substr hsNXV_new 130 (str.len var_0xINPUT_166177)) \"\")))\r\n(assert (distinct (or (distinct QEKUW_new (or (distinct QWKkD_new T_7)))) (or T_5)))\r\n(assert (or (distinct QEKUW_new (and (distinct QWKkD_new T_7)))))\r\n(assert (= T_7 (and (distinct \"\" (str.substr hsNXV_new 71 (str.len var_0xINPUT_166177))))))\r\n(assert T_7)\r\n(assert (distinct T_8 (and (distinct \"ywUN4ZIDAC\" (str.substr hsNXV_new 247 (str.len var_0xINPUT_166177))))))\r\n(assert (distinct T_9 (not T_8)))\r\n(assert T_9)\r\n(assert (distinct a (and (distinct var_0xINPUT_166177 \"ywUN4ZIDAC\"))))\r\n(assert (distinct (or (= bHPCR_new (or (distinct fBQJl_new T_e)))) (and a)))\r\n(assert (or (distinct bHPCR_new shifted_T_1)))\r\n(assert (distinct T_c (= (str.substr hsNXV_new 214 (str.len var_0xINPUT_166177)) \"\")))\r\n(assert (distinct (and (distinct bZrcp_new (or (distinct fBQJl_new T_e)))) (or T_c)))\r\n(assert (or (distinct bZrcp_new shifted_T_1)))\r\n(assert (distinct (or (= fBQJl_new shifted_T_1)) (not (distinct (str.substr hsNXV_new 234 (str.len var_0xINPUT_166177)) \"\"))))\r\n(assert T_e)\r\n(assert (distinct (or (distinct RrCnv_new T_1)) (or (distinct \"\" (str.substr hsNXV_new (str.len var_0xINPUT_166177) (str.len shifted_var_0xINPUT_40408))))))\r\n(assert (distinct (distinct DOxcm_new T_3) (distinct RrCnv_new T_1)))\r\n(assert (distinct DOxcm_new T_3))\r\n(check-sat)\r\n(get-model)\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: a257ec0",
    "priority": 1
  },
  "150": {
    "body": "Hi,\r\n\r\nThe following formula triggers a soundness bug in z3str3.\r\n\r\n```\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(declare-fun e () String)\r\n(declare-fun h () String)\r\n(declare-fun k () String)\r\n(declare-fun l () String)\r\n(declare-fun m () String)\r\n(declare-fun q () String)\r\n(declare-fun ah () String)\r\n(declare-fun c () Bool)\r\n(declare-fun d () Bool)\r\n(declare-fun f () Bool)\r\n(declare-fun g () Bool)\r\n(declare-fun i () Bool)\r\n(declare-fun j () Bool)\r\n(declare-fun n () Bool)\r\n(declare-fun ag () Bool)\r\n(assert (= \"\" (str.substr a 3 (str.len e))))\r\n(assert (= (= \"\" (str.substr a 0 0)) (= j d)))\r\n(assert\r\n (=\r\n  (or n (= g (= f c)))\r\n  (and\r\n   (= (str.substr h 4 (str.len a)) (str.++ m q))\r\n   (str.in.re m\r\n    (re.++ (str.to.re \"\")\r\n     (re.++ (str.to.re \"_\")\r\n      (re.++ (str.to.re \"u\")\r\n       (re.++ (str.to.re \"t\")\r\n        (re.++ (str.to.re \"m\")\r\n         (re.++ (str.to.re \"a\")\r\n          (re.++ (str.to.re \"=\")\r\n           (re.++ (str.to.re \"1\")\r\n            (re.++ (str.to.re \"6\")\r\n             (re.++ (str.to.re \"8\")\r\n              (str.to.re \"8\") (str.to.re \"\")))))))))))))))\r\n(assert (= n\r\n         (=\r\n          (str.substr b (str.len l)\r\n           (str.len\r\n            (str.substr k (str.len m)\r\n             (str.len (str.substr e (str.len q) (str.len ah)))))) \"\")))\r\n(assert (= b (str.++ m ah)))\r\n(assert (= (= c i) (not ag)))\r\n(check-sat)\r\n```\r\n`z3 smt.string_solver=z3str3` gives unsat on this formula while CVC4 and z3 (without z3str3 enabled) give `sat`.\r\n\r\nRevision: 12819640b7d39608f8dd6cece58d0d1b52ffe3b0\r\nOS: Ubuntu 18.904",
    "priority": 1
  },
  "151": {
    "body": "Hi all, \r\n\r\nthe following formula exposes a soundness issue in z3str3:\r\n\r\n```\r\n(declare-fun a () String)\r\n(declare-fun z () String)\r\n(declare-fun c () String)\r\n(declare-fun aa () String)\r\n(declare-fun d () Bool)\r\n(declare-fun e () Bool)\r\n(declare-fun b () Bool)\r\n(declare-fun f () Bool)\r\n(declare-fun GohuV_new () Bool)\r\n(declare-fun g () Bool)\r\n(declare-fun h () Bool)\r\n(declare-fun i () Bool)\r\n(declare-fun ac () String)\r\n(declare-fun j () Int)\r\n(declare-fun k () String)\r\n(declare-fun m () String)\r\n(declare-fun n () String)\r\n(declare-fun l () String)\r\n(declare-fun p () Bool)\r\n(declare-fun s () Bool)\r\n(declare-fun o () Bool)\r\n(declare-fun t () Bool)\r\n(declare-fun q () Bool)\r\n(declare-fun r () Bool)\r\n(declare-fun u () String)\r\n(declare-fun v () Bool)\r\n(declare-fun w () Bool)\r\n(declare-fun af () String)\r\n(assert (= (= d (not (= e s))) (= \"\" (str.substr ac 21 (str.len u)))))\r\n(assert (= (= \"-\" (str.substr ac 25 (str.len u))) o s))\r\n(assert (= f (and (= GohuV_new q))))\r\n(assert\r\n (=\r\n  (not (= j 43))\r\n  (or (= (str.substr z 21 (str.len m)) \"__utma=16886264.\")\r\n   (or\r\n    (str.in.re\r\n     (str.substr c 30 (str.len n))\r\n     (re.++\r\n      (str.to.re \"\")\r\n      (re.++\r\n       (str.to.re \"\")\r\n       (re.++\r\n        (str.to.re \"\")\r\n        (re.++\r\n         (str.to.re \"t\")\r\n         (re.++\r\n          (str.to.re \"\")\r\n          (re.++\r\n           (str.to.re \"a\")\r\n           (re.++\r\n            (str.to.re \"=\")\r\n            (re.++\r\n             (str.to.re \"1\")\r\n             (re.++\r\n              (str.to.re \"6\")\r\n              (re.++\r\n               (str.to.re \"8\")\r\n               (re.++\r\n                (str.to.re \"8\")\r\n                (re.++\r\n                 (str.to.re \"6\")\r\n                 (re.++\r\n                  (str.to.re \"2\")\r\n                  (re.++\r\n                   (str.to.re \"\")\r\n                   (re.++\r\n                    (str.to.re \"\")\r\n                    (str.to.re \".\")))))))))))))))))))\r\n  (or (= j 0) (= g (not (= h r))))\r\n  (= \"\" (str.substr ac 0 (str.len u)))\r\n  (or (= h v))))\r\n(assert (not (= i v)))\r\n(assert\r\n (=\r\n  (or f t)\r\n  (not (= d p))\r\n  (and\r\n   (=\r\n    \"\"\r\n    (str.substr\r\n     a\r\n     (str.len k)\r\n     (str.len\r\n      (str.substr\r\n       z\r\n       (str.len m)\r\n       (str.len\r\n        (str.substr\r\n         aa\r\n         (str.len l)\r\n         (str.len\r\n          (str.substr ac (str.len u) (str.len af))))))))))))\r\n(assert (not (= b o)))\r\n(assert (= a (str.++ k af) z (str.++ m af)))\r\n(assert (= c aa (str.++ l af)))\r\n(assert (= d (not (= p w))))\r\n(assert (= e (or (= s w)) b f (and (= r v))))\r\n(check-sat)\r\n```\r\n\r\n `z3 smt.string_solver=z3str3` reports `unsat` on this formula while vanilla z3 reports `sat` which is the correct answer.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: a78f8992258ec01a34ae186363d3f82c0c437d57",
    "priority": 0
  },
  "152": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () String)\r\n(assert (str.in.re a (re.loop (str.to.re \"b\") 1 0)))\r\n(assert (> (str.len a) 0))\r\n(check-sat)\r\n```\r\nz3 trunk reports `unsat`, while z3-4.8.6 and CVC4 reports `sat`.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: d95b549\r\n",
    "priority": 1
  },
  "153": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Real)\r\n(assert (= (/ (* 2 a) a) (/ a a) 1))\r\n(check-sat)\r\n```\r\nZ3 reports `unsat`, while CVC4 reports `sat`.\r\nIf I feed this model to Z3:\r\n```\r\n(define-fun a () Real 0.0)\r\n```\r\nZ3 reports `sat`\r\n\r\nOS: Ubuntu 18.04\r\nRevision: d95b549",
    "priority": 1
  },
  "154": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () String)\r\n(declare-fun z () String)\r\n(declare-fun c () String)\r\n(declare-fun aa () String)\r\n(declare-fun d () Bool)\r\n(declare-fun e () Bool)\r\n(declare-fun b () Bool)\r\n(declare-fun f () Bool)\r\n(declare-fun GohuV_new () Bool)\r\n(declare-fun g () Bool)\r\n(declare-fun h () Bool)\r\n(declare-fun i () Bool)\r\n(declare-fun ac () String)\r\n(declare-fun j () Int)\r\n(declare-fun k () String)\r\n(declare-fun m () String)\r\n(declare-fun n () String)\r\n(declare-fun l () String)\r\n(declare-fun p () Bool)\r\n(declare-fun s () Bool)\r\n(declare-fun o () Bool)\r\n(declare-fun t () Bool)\r\n(declare-fun q () Bool)\r\n(declare-fun r () Bool)\r\n(declare-fun u () String)\r\n(declare-fun v () Bool)\r\n(declare-fun w () Bool)\r\n(declare-fun af () String)\r\n(assert (= (= d (not (= e s))) (= \"\" (str.substr ac 21 (str.len u)))))\r\n(assert (= (= \"-\" (str.substr ac 25 (str.len u))) o s))\r\n(assert (= f (and (= GohuV_new q))))\r\n(assert\r\n (=\r\n  (not (= j 43))\r\n  (or (= (str.substr z 21 (str.len m)) \"__utma=16886264.\")\r\n   (or\r\n    (str.in.re\r\n     (str.substr c 30 (str.len n))\r\n     (re.++\r\n      (str.to.re \"\")\r\n      (re.++\r\n       (str.to.re \"\")\r\n       (re.++\r\n        (str.to.re \"\")\r\n        (re.++\r\n         (str.to.re \"t\")\r\n         (re.++\r\n          (str.to.re \"\")\r\n          (re.++\r\n           (str.to.re \"a\")\r\n           (re.++\r\n            (str.to.re \"=\")\r\n            (re.++\r\n             (str.to.re \"1\")\r\n             (re.++\r\n              (str.to.re \"6\")\r\n              (re.++\r\n               (str.to.re \"8\")\r\n               (re.++\r\n                (str.to.re \"8\")\r\n                (re.++\r\n                 (str.to.re \"6\")\r\n                 (re.++\r\n                  (str.to.re \"2\")\r\n                  (re.++\r\n                   (str.to.re \"\")\r\n                   (re.++\r\n                    (str.to.re \"\")\r\n                    (str.to.re \".\")))))))))))))))))))\r\n  (or (= j 0) (= g (not (= h r))))\r\n  (= \"\" (str.substr ac 0 (str.len u)))\r\n  (or (= h v))))\r\n(assert (not (= i v)))\r\n(assert\r\n (=\r\n  (or f t)\r\n  (not (= d p))\r\n  (and\r\n   (=\r\n    \"\"\r\n    (str.substr\r\n     a\r\n     (str.len k)\r\n     (str.len\r\n      (str.substr\r\n       z\r\n       (str.len m)\r\n       (str.len\r\n        (str.substr\r\n         aa\r\n         (str.len l)\r\n         (str.len\r\n          (str.substr ac (str.len u) (str.len af))))))))))))\r\n(assert (not (= b o)))\r\n(assert (= a (str.++ k af) z (str.++ m af)))\r\n(assert (= c aa (str.++ l af)))\r\n(assert (= d (not (= p w))))\r\n(assert (= e (or (= s w)) b f (and (= r v))))\r\n(check-sat)\r\n```\r\nz3str3 will report incorrect answer while model_validate is enabled:\r\n```\r\n% z3 small.smt2\r\nsat\r\n% z3 model_validate=true small.smt2\r\nsat\r\n% z3 smt.string_solver=z3str3 small.smt2\r\nsat\r\n% z3 smt.string_solver=seq model_validate=true small.smt2\r\nsat\r\n% z3 smt.string_solver=z3str3 model_validate=true small.smt2\r\nunsat\r\n```\r\n OS: Ubuntu 18.04\r\nRevision: a78f899",
    "priority": 1
  },
  "155": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(declare-fun f () Real)\r\n(declare-fun g () Real)\r\n(declare-fun h () Real)\r\n(declare-fun i () Real)\r\n(declare-fun j () Real)\r\n(declare-fun m () Real)\r\n(declare-fun n () Real)\r\n(declare-fun aa () Real)\r\n(assert\r\n (not\r\n  (exists ((k Real))\r\n   (=\r\n    (or (< j d) (< 0 (- aa)))\r\n    (or (= (= 0 m) (and (<= k m) (< 0 b))))))))\r\n(assert\r\n (not\r\n  (exists ((l Real))\r\n   (=>\r\n    (and (<= 0 (- a d)) (<= 0 h c f) (<= n c) (<= 0 aa))\r\n    (<= 0 (+ (* aa (* a d)) h))))))\r\n(assert (= a (+ d g)))\r\n(assert (= b (+ e aa) c (+ f i)))\r\n(check-sat)\r\n```\r\nz3 reports unsat, while CVC4 reports sat.\r\nIf I feed this model to the formula, z3 reports sat:\r\n```\r\n(define-fun a () Real (/ 1 12))\r\n(define-fun b () Real 0.0)\r\n(define-fun c () Real 0.0)\r\n(define-fun d () Real (/ (- 13) 12))\r\n(define-fun e () Real (/ (- 1) 12))\r\n(define-fun f () Real 0.0)\r\n(define-fun g () Real (/ 7 6))\r\n(define-fun h () Real 0.0)\r\n(define-fun i () Real 0.0)\r\n(define-fun j () Real (/ (- 7) 6))\r\n(define-fun m () Real 0.0)\r\n(define-fun n () Real 0.0)\r\n(define-fun aa () Real (/ 1 12))\r\n```\r\nz3-4.8.6 also has this bug.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: a424ab9",
    "priority": 1
  },
  "156": {
    "body": "(smt.arith.solver=6) Soundness bug on QF_S  formula. smt.arith.solver=6 seems to be wrong.\r\n```\r\n[556] % z3release smt.arith.solver=6 small.smt2\r\nsat\r\n[557] % z3release smt.arith.solver=2 small.smt2\r\nunsat\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () String)\r\n(declare-fun var_9 () String)\r\n(assert (str.in_re (str.++ \"z\" var_9) (re.* (str.to_re \"z\"))))\r\n(assert (str.in_re (str.++ \"a\" var_9) (re.+ (re.range \"a\" \"u\"))))\r\n(assert (str.in_re (str.++ \"a\" a) (re.opt (re.range \"a\" \"u\"))))\r\n(assert (not (str.in_re (str.++ \"a\" a \"za\" var_9) (re.opt (re.++ (str.to_re \"a\") (re.* (str.to_re \"z\")) (str.to_re \"a\"))))))\r\n(check-sat)\r\n[559] %\r\n```\r\nCommit: 7708874",
    "priority": 0
  },
  "157": {
    "body": "(smt.arith.solver=6) Soundness bug on QF_S  formula. smt.arith.solver=6 seems to be wrong.\r\n```\r\n[556] % z3release smt.arith.solver=6 small.smt2\r\nsat\r\n[557] % z3release smt.arith.solver=2 small.smt2\r\nunsat\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () String)\r\n(declare-fun var_9 () String)\r\n(assert (str.in_re (str.++ \"z\" var_9) (re.* (str.to_re \"z\"))))\r\n(assert (str.in_re (str.++ \"a\" var_9) (re.+ (re.range \"a\" \"u\"))))\r\n(assert (str.in_re (str.++ \"a\" a) (re.opt (re.range \"a\" \"u\"))))\r\n(assert (not (str.in_re (str.++ \"a\" a \"za\" var_9) (re.opt (re.++ (str.to_re \"a\") (re.* (str.to_re \"z\")) (str.to_re \"a\"))))))\r\n(check-sat)\r\n[559] %\r\n```\r\nCommit: 7708874",
    "priority": 0
  },
  "158": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "159": {
    "body": "Here is a refutation soundness bug in z3str3:\r\n```\r\n[548] % z3release small.smt2\r\nsat\r\n[549] % z3release smt.string_solver=z3str3 small.smt2\r\nunsat\r\n[550] % cat small.smt2\r\n(declare-fun x () String)\r\n(declare-fun y () String)\r\n(assert (str.in_re (str.++ x \"c\" y) (re.++ (re.* (str.to_re \"c\")) (re.union (str.to_re \"a\") (str.to_re \"b\")))))\r\n(check-sat)\r\n[551] %\r\n```\r\nIt would be related to https://github.com/Z3Prover/z3/issues/4590\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 02084dc",
    "priority": 0
  },
  "160": {
    "body": "Hi,\r\n\r\nafter applying some simplification I want to decode the resulting expression (beyond printing it as a String).\r\n\r\nUsing operations such as `Expr.isAnd` it is possible to determine the outermost operator.\r\nIs this possible for `str.len` and the other string operations as well?\r\n\r\nIs it possible to detect and extract string-constants?\r\nIt works for integers: `((IntNum) input).getInt64()`\r\nI am generating the expression using `Context.MkString`\r\n\r\nBest Regards",
    "priority": 0
  },
  "161": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "162": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[714] % z3release small.smt2\nunsat\nsat\n[715] % \n[715] % cat small.smt2\n(declare-fun a () (_ BitVec 1))\n(declare-fun b () (_ BitVec 1))\n(declare-fun c () (_ BitVec 1))\n(declare-fun d () (_ BitVec 1))\n(declare-fun e () (_ BitVec 1))\n(declare-fun f () (_ BitVec 1))\n(declare-fun g () (_ BitVec 1))\n(assert\n (= (_ bv1 1)\n (bvurem\n  (bvand\n  (bvand\n   (bvmul\n   (bvand\n    (ite (= b c) (_ bv1 1) (_ bv0 1))\n    (ite (= c (bvashr g d)) (_ bv1 1) (_ bv0 1)))\n   (ite (= g e ) (_ bv1 1) (_ bv0 1)))\n   (ite (= e (bvnand f (_ bv1 1))) (_ bv1 1) (_ bv0 1)))\n  (ite (= f (_ bv1 1)) (_ bv1 1) (_ bv0 1)))\n  (bvnot (bvudiv (bvand b (_ bv1 1)) a)))))\n(check-sat-using (then reduce-invertible smt))\n(check-sat)\n[716] %\n```\n\nOS: Ubuntu 18.04\nCommit: 18bb90f\n",
    "priority": 1
  },
  "163": {
    "body": "\n```\n[503] % z3release small.smt2\nsat\n[504] % cvc4 small.smt2\nsat\n[505] % z3release smt.string_solver=z3str3 small.smt2\nunsat\n[506] % cat small.smt2\n(set-logic QF_S)\n(declare-fun a () String)\n(declare-fun b () String)\n(assert (str.in_re (str.++ a \"A\" b) (re.opt (str.to_re \"ABB\"))))\n(check-sat)\n[507] %\n````\n\nOS: Ubuntu 18.04\nCommit: ed92b84\n",
    "priority": 1
  },
  "164": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[572] % z3 small.smt2\nunsat\n[573] % z3 smt.arith.solver=2 small.smt2\nunsat\n[574] % z3 smt.arith.solver=2 smt.string_solver=z3str3 small.smt2\nunsat\n[575] % z3 smt.string_solver=z3str3 small.smt2\nsat\n[576] % cat small.smt2\n(set-option :smt.phase_selection 1)\n(declare-fun a () String)\n(assert (= (str.at (str.substr (str.substr a 1 (- (str.len a) 1)) 0 (-\n (str.len (str.substr a 1 (- (str.len a) 1))) 1)) 0) \"a\"))\n(assert (= (str.at (str.substr a 1 (- (str.len a) 1)) (- (str.len\n (str.substr a 1 (- (str.len a) 1))) 1)) \"b\"))\n(assert (not (= (str.at (str.substr a 1 (- (str.len a) 1)) 0) \"a\")))\n(assert (= (str.at a 0) \"c\"))\n(check-sat)\n[577] %\n```\n\nOS: Ubuntu 18.04\nCommit: 1729232\n",
    "priority": 0
  },
  "165": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[594] % z3 small.smt2 \nunsat\n[595] % cvc4 --strings-exp small.smt2 \nunsat\n[596] % z3 smt.string_solver=z3str3 small.smt2 \nsat\n[597] % \n[597] % cat small.smt2 \n(set-logic QF_S)\n(declare-fun s () String)\n(declare-fun i () Int)\n(assert (distinct \"\" (str.substr s i (str.indexof \"A\" s i))))\n(check-sat)\n[598] %\n```\n\nOS: Ubuntu 18.04\nCommit: 1729232\n",
    "priority": 0
  },
  "166": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[573] % z3 smt.string_solver=z3str3 small.smt2 \nsat\n[574] % z3 small.smt2 \nunsat\n[575] % \n[575] % cat small.smt2 \n(set-logic QF_S)\n(assert (= (re.comp (str.to_re \"\")) (str.to_re \"\")))\n(check-sat)\n[576] %\n```\n\nOS: Ubuntu 18.04\nCommit: f2d3160\n",
    "priority": 0
  },
  "167": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[643] % z3 small.smt2\nunknown\n[644] % cvc4 -q small.smt2\nunsat\n[645] % z3 smt.string_solver=z3str3 small.smt2\nsat\n[646] % \n[646] % cat small.smt2\n(declare-const a String)\n(assert (distinct (str.to_code (str.from_code (str.to_code a))) (str.to_code a)))\n(check-sat)\n[647] %\n```\n\nOS: Ubuntu 18.04\nCommit: f2d3160\n",
    "priority": 0
  },
  "168": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[580] % z3 small.smt2 \nunsat\n[581] % z3 smt.string_solver=z3str3 small.smt2 \nsat\n[582] % cat small.smt2 \n(declare-fun a () String)\n(declare-fun b () Int)\n(assert (distinct (str.substr (str.replace \"B\" a \"A\") b b)\n     (str.substr \"B\" 0 (str.indexof \"A\" a b))))\n(check-sat)\n[583] %\n```\n\nOS: Ubuntu 18.04\nCommit: 0f8f886\n",
    "priority": 0
  },
  "169": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[504] % z3release smt.string_solver=z3str3 small.smt2\nsat\nunsat\n[505] % \n[505] % cat small.smt2\n(declare-fun a () Int)\n(declare-fun b () String)\n(assert (= a 1))\n(assert (str.in.re b (re.inter (str.to.re \"\") (str.to.re \"a\"))))\n(check-sat-using ctx-solver-simplify)\n(check-sat)\n[506] %\n```\n\nOS: Ubuntu 18.04\nCommit: fc8dfe3\n",
    "priority": 0
  },
  "170": {
    "body": "\n```\n[518] % z3release small.smt2\nunsat\n[519] % z3release smt.string_solver=z3str3 small.smt2\nsat\n[520] % cat small.smt2\n(declare-fun a () String)\n(declare-fun b () Int)\n(assert (distinct (str.substr a b (str.indexof \"A\" a b)) \"\"))\n(check-sat)\n[521] %\n\n```\n\nOS: Ubuntu 18.04\nCommit: 32055a3\n",
    "priority": 0
  },
  "171": {
    "body": "\n```\n[549] % z3release small.smt2\nunsat\n[550] % z3release smt.string_solver=z3str3 small.smt2\nsat\n[551] % cat small.smt2\n(declare-fun a () String)\n(assert (str.in.re a (re.inter (re.opt re.allchar) (str.to.re \"ab\"))))\n(check-sat-using ctx-solver-simplify)\n[552] %\n```\n\nOS: Ubuntu 18.04\nCommit: 32055a3\n",
    "priority": 0
  },
  "172": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[648] % z3-4.8.8 small.smt2\nunsat\n[649] % z3release small.smt2\nsat\n[650] % \n[650] % cat small.smt2\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(declare-fun d () Real)\n(declare-fun e () Real)\n(declare-fun f () Real)\n(assert\n (forall ((g Real))\n (and (< (- a d) 0.0 f)\n  (>= 0 (mod 0 0))\n  (>= (+ (* 0.5 (+ (* 2.0 (- e b) c) (- a d)))\n    (/ (* (+ (* f (- b e)) (- c)) (+ (* f (- b e)) (- c)))\n     (* 2.0 (- f))))\n  0))))\n(check-sat)\n[651] %\n```\n\nOS: Ubuntu 18.04\nCommit: a14c2a3\n",
    "priority": 1
  },
  "173": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[676] % z3-4.8.5 proof=true opt.pb.compile_equality=true small.smt2\nunsat\n[677] % z3-4.8.6 proof=true opt.pb.compile_equality=true small.smt2\nunsat\n[678] % z3-4.8.7 proof=true opt.pb.compile_equality=true small.smt2\nunsat\n[679] % z3release proof=true opt.pb.compile_equality=true small.smt2\nunsat\n[680] % z3release small.smt2\nsat\n[681] % \n[681] % cat small.smt2\n(declare-fun a () Bool)\n(declare-fun b () Bool)\n(declare-fun c () Bool)\n(declare-fun d () Real)\n(declare-fun e () Real)\n(assert (<= (+ (ite c 1 0) (ite b 1 0)) 1))\n(assert (= (ite c 1 0) (ite (>= (+ (ite b 1 0) (ite a (- 1) 0)) 1) 1 0)))\n(assert (<= d 0 (+ (ite b 1 0) (ite a 1 0)) e))\n(minimize 0)\n(check-sat)\n[682] %\n```\n\nOS: Ubuntu 18.04\nCommit: f2449df\n",
    "priority": 1
  },
  "174": {
    "body": "Hi,\r\nFor this case, Z3  gives an incorrect answer:\r\n```\r\n[670] % z3 small.smt2\r\nsat\r\nunsat\r\n[671] % cat small.smt2\r\n(assert (forall ((a Real)) (exists ((b Real)) (and (<= (- a b) 0.0) (<= b 0)))))\r\n(check-sat-using ufbv)\r\n(check-sat)\r\n[672] %\r\n```\r\nz3-4.8.7 segfaults on it (also 4.8.6 & 4.8.5) \r\n\r\nOS: Ubuntu 18.04\r\nCommit: b0ffad9\r\n",
    "priority": 1
  },
  "175": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[548] % z3 small.smt2\nunsat\nsat\n[549] % cat small.smt2\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(declare-fun d () Real)\n(declare-fun e () Real)\n(declare-fun f () Real)\n(declare-fun h () Real)\n(assert (forall ((g Real)) (and (= (= g f) (= g e)) (= (/ b d) h) (> (/ a c) h))))\n(assert (= (/ a c) (/ b d)))\n(check-sat)\n(check-sat-using (then qfnra smt))\n[550] %\n```\n\nOS: Ubuntu 18.04\nCommit: 38e0968\n",
    "priority": 1
  },
  "176": {
    "body": "\n```\n[613] % z3-4.8.5 small.smt2\nunsat\nsat\n[614] % z3-4.8.6 small.smt2\nunsat\nsat\n[615] % z3-4.8.7 small.smt2\nunknown\nsat\n[616] % z3 small.smt2\nunsat\nsat\n[617] % cat small.smt2\n(assert (forall ((a Real)) (= a (/ 0 0))))\n(check-sat)\n(check-sat-using (then qfnra smt))\n[618] %\n```\n\nOS: Ubuntu 18.04\nCommit: a0de244\n",
    "priority": 1
  },
  "177": {
    "body": "\n```\n[565] % z3-4.8.5 small.smt2 \nunsat\nsat\n[566] % z3-4.8.5 small.smt2 \nunsat\nsat\n[567] % z3-4.8.6 small.smt2 \nunsat\nsat\n[568] % z3-4.8.7 small.smt2 \nunsat\nsat\n[569] % z3 small.smt2 \nunsat\nsat\n[570] % \n[570] % cat small.smt2 \n(declare-fun b ((Array Int (Array Int Int))) Bool)\n(declare-fun d () (Array Int (Array Int Int)))\n(assert (forall ((a (Array Int (Array Int Int)))) (b a)))\n(assert (not (b d)))\n(check-sat)\n(check-sat-using (then qe2 qflra))\n[571] %\n```\n\nOS: Ubuntu 18.04\nCommit: 9ea1cf3\n",
    "priority": 1
  },
  "178": {
    "body": "Bizarrely the bug disappears when the unsat_core option is disabled. By replacing the `(check-sat-using (then sat bv))` by `(check-sat)`, I get `unsat`.\r\n\r\n```\r\n$z3release bug.smt2\r\nsat\r\n(error \"line 4 column 30: an invalid model was generated\")\r\n$cat bug.smt2\r\n(set-option :unsat_core true) \r\n(set-option :model_validate true) \r\n(assert (! (not (<= 0 0)) :named a)) \r\n(check-sat-using (then sat bv)) \r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 785c9a1\r\n",
    "priority": 1
  },
  "179": {
    "body": "Seems neither related to (#4062 in which z3release gives `sat` with smt.arith.solver=2) nor to #4065 where z3 without options gives an incorrect answer.\r\n\r\n```\r\n$z3release smt.arith.solver=2 model_validate=true bug.smt2\r\nsat\r\n(error \"line 3 column 10: an invalid model was generated\")\r\n$z3release model_validate=true bug.smt2                   \r\nunsat\r\n$cvc4 -q bug.smt2                                     \r\nunsat\r\n$cat bug.smt2\r\n(declare-fun a () String) \r\n(assert (str.prefixof \"B\" (str.replace \"A\" a \"\" ))) \r\n(check-sat)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 8fe3caa\r\n",
    "priority": 1
  },
  "180": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[549] % z3-4.8.7 small.smt2\nunsat\n[550] % cvc4 -q --strings-exp small.smt2\nunsat\n[551] % z3 small.smt2\nsat\n[552] % \n[552] % cat small.smt2\n(declare-fun a () String)\n(assert (= a (str.replace \"A\" a \"\")))\n(check-sat)\n[553] %\n```\n\nOS: Ubuntu 18.04\nCommit: 8fe3caa\n",
    "priority": 1
  },
  "181": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[559] % \n[559] % z3-4.8.7 small.smt2\nunsat\n[560] % cvc4 -q small.smt2\nunsat\n[561] % z3 small.smt2\nsat\n[562] % \n[562] % cat small.smt2\n(declare-fun a () String)\n(declare-fun b () String)\n(assert (distinct (str.substr (str.++ a \"ab\" b) 0 (+ (str.len a) 1)) (str.++ a \"a\")))\n(check-sat)\n[563] %\n```\n\nOS: Ubuntu 18.04\nCommit: dd064a5\n",
    "priority": 1
  },
  "182": {
    "body": "\n```\n[633] % cvc4 -q --strings-exp small.smt2\nunsat\n[634] % z3-4.8.7 small.smt2\nunsat\n[635] % z3 small.smt2\nsat\n[636] % cat small.smt2\n(declare-fun t () String)\n(assert (= (str.indexof (str.++ \"aa\" t) t 3) (str.indexof (str.++ \"aa\" t) t 1)))\n(check-sat)\n[637] %\n```\n\nOS: Ubuntu 18.04\nCommit: dd064a5\n",
    "priority": 1
  },
  "183": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[587] % z3 small.smt2 \nsat\n[588] % cvc4 -q small.smt2 \nunsat\n[589] % cat small.smt2 \n(declare-fun x () Int)\n(assert (str.prefixof \"a\" (int.to.str x)))\n(check-sat)\n[590] %\n```\n\nOS: Ubuntu 18.04\nCommit: e3e6959\n",
    "priority": 1
  },
  "184": {
    "body": "\n```\n[682] % z3 small.smt2\nsat\nunsat\n[683] % \n[683] % cat small.smt2\n(set-option :fp.spacer.gpdr true)\n(declare-fun a (Bool Bool Int Int Int Int Int Int Int) Bool)\n(assert (forall ((b Int) (bc Bool) (bd Bool) (bk Int) (be Int) (bf Int) (bm Int) (bn Int))\n     (=> (= bc bd false) (= bk 0) (a bc bd bf b bm bn bk be b))))\n(assert (forall ((bc Bool) (bd Bool) (bf Int) (bm Int) (bn Int) (bk Int) (b Int) (c Int)\n         (d Int) (g Int) (e Int) (f Bool) (gn Int) (ge Int) (gl Int) (gd Bool))\n     (=> (a bc bd bf b bm bn bk e b) (or (= f bc) (= bk 2)) (a f gd d gl c gn g ge e))))\n(assert (forall ((bc Bool) (bd Bool) (bf Int) (bm Int) (bn Int) (bk Int) (be Int) (b Int))\n     (=> (a bc bd bf b bm bn bk be b) (or bc bd) false)))\n(check-sat-using horn)\n(check-sat)\n[684] %\n```\n\nOS: Ubuntu 18.04\nCommit: 3e9479d\n",
    "priority": 0
  },
  "185": {
    "body": "\n```\n[607] % z3 small.smt2\nunsat\n[608] % z3 rewriter.udiv2mul=true small.smt2\nsat\n[609] % \n[609] % cat small.smt2\n(declare-fun a () (_ BitVec 9))\n(assert (let ((b (bvudiv ((_ zero_extend 7) a) (_ bv29487 16)))) (bvule (bvudiv b b) b)))\n(check-sat)\n[610] %\n```\n\nOS: Ubuntu 18.04\nCommit: dd3e574\n",
    "priority": 1
  },
  "186": {
    "body": "\n```\n[987] % z3release small.smt2\nunsat\n[988] % z3release smt.clause_proof=true small.smt2\nunsat\n[989] % z3release smt.clause_proof=true smt.core.minimize=true small.smt2\nsat\n[990] % cat small.smt2\n(declare-fun a (Real Real Real) Bool)\n(assert (forall ((b Real) (c Real) (d Real)) (=> (> b 0) (a c d b))))\n(assert (forall ((f Real) (h Real) (i Real) (c Real) (d Real) (b Real)) (=> (a f h i) (a c d b))))\n(assert (forall ((f Real) (h Real)) (not (a f h 0))))\n(check-sat-using (then horn default))\n[991] %\n```\n\nOS: Ubuntu 18.04\nCommit: 1f23ae8\n",
    "priority": 1
  },
  "187": {
    "body": "\n```\n[612] % cvc4 -q small.smt2\nunsat\n[613] % z3-4.8.7 small.smt2\nunsat\n[614] % z3 small.smt2\nsat\n[615] % \n[615] % cat small.smt2\n(assert (forall ((a Int)) (exists ((b Int)) (= (* 2 b) a))))\n(check-sat)\n[616] %\n```\n\nOS: Ubuntu 18.04\nCommit: 164a73f\n",
    "priority": 1
  },
  "188": {
    "body": "Hi,\nFor this case, Z3 smt.ematching=false gives an incorrect answer:\n```\n[650] % z3 small.smt2\nunsat\n[651] % z3 smt.ematching=false small.smt2\nsat\n[652] % \n[652] % cat small.smt2\n(declare-datatypes ((a 0)) (((b (c a)) d)))\n(declare-sort i)\n(declare-fun e (i) a)\n(assert (forall ((f i)) (ite ((_ is d) (e f)) true (ite ((_ is b) (e f)) (forall ((g i)) (= (e g) (c (e f)))) true))))\n(assert (exists ((h a) (g i)) (= (e g) h)))\n(check-sat)\n[653] %\n```\n\nOS: Ubuntu 18.04\nCommit: 164a73f\n",
    "priority": 1
  },
  "189": {
    "body": "Hi,\nFor this case, Z3 rewriter.flat=false  gives an incorrect answer:\n```\n[624] % z3 small.smt2\nunsat\n[625] % z3 rewriter.flat=false small.smt2\nsat\n[626] % \n[626] % cat small.smt2\n(declare-datatypes ((a 0)) (((b (c a)) d)))\n(declare-sort e)\n(declare-fun k (e) a)\n(declare-fun l (e) a)\n(declare-fun j (a a) a)\n(assert\n (forall ((ai e))\n (ite ((_ is d) (k ai)) true\n  (ite ((_ is b) (k ai))\n  (forall ((ag e))\n   (= (k ag) (c (k ai))))\n  true))))\n(assert\n (exists ((ah a))\n (or (distinct (j (j ah d) d) ah)\n  (exists ((ag e))\n  (and (= (k ag) ah) (= (l ag) d))))))\n(check-sat)\n[627] %\n```\n\nOS: Ubuntu 18.04\nCommit: 164a73f\n",
    "priority": 1
  },
  "190": {
    "body": "\n```\n[698] % z3 small.smt2\nsat\n[699] % cvc4 -q small.smt2\nunsat\n[700] % \n[700] % cat small.smt2\n(define-funs-rec ((a () Int) (b ((c Int)) Bool))\n (0 (ite (< c 0) false (ite (= c 0) true (b (- 2))))))\n(assert (b 7))\n(check-sat)\n[701] %\n```\n\nOS: Ubuntu 18.04\nCommit: 0f69783\n",
    "priority": 1
  },
  "191": {
    "body": "Hi,\nFor this case, Z3 smt.ematching=false smt.recfun.native=false  gives an incorrect answer:\n```\n[1057] % cvc4 -q small.smt2\nunsat\n[1058] % z3 small.smt2\nunsat\n[1059] % z3 smt.ematching=false smt.recfun.native=false small.smt2\nsat\n[1060] % \n[1060] % cat small.smt2\n(define-fun-rec a ((b Int)) Int 0)\n(assert (= (a 0) 1))\n(check-sat)\n[1061] %\n```\n\nOS: Ubuntu 18.04\nCommit: 337c07a\n",
    "priority": 1
  },
  "192": {
    "body": "Hi,\r\nFor second formula (i.e., `t2.smt2`), Z3  gives an incorrect answer:\r\n```\r\n[691] % z3 t1.smt2 \r\nunsat\r\n[692] % z3 t2.smt2 \r\nsat\r\n[693] % cvc4 -q t1.smt2 \r\nunsat\r\n[694] % cvc4 -q t2.smt2 \r\n(error \"The logic was specified as AUFNIRA, which doesn't include THEORY_DATATYPES, but found a term in that theory.\r\nYou might want to extend your logic to AUFDTNIRA\r\n\")\r\n[695] % \r\n[695] % cat t1.smt2 \r\n(declare-datatypes ((S 0)) (((A))))\r\n(declare-const x S)\r\n(declare-const y S)\r\n(assert (distinct x y))\r\n(check-sat)\r\n[696] % \r\n[696] % cat t2.smt2 \r\n(set-logic AUFNIRA)\r\n(declare-datatypes ((S 0)) (((A))))\r\n(declare-const x S)\r\n(declare-const y S)\r\n(assert (distinct x y))\r\n(check-sat)\r\n[697] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 337c07a\r\n",
    "priority": 0
  },
  "193": {
    "body": "\n```\n[604] % z3 small.smt2\nsat\n[605] % cvc4 -q small.smt2\nunsat\n[606] % \n[606] % cat small.smt2\n(define-funs-rec ((f ((a Int)) Int) (g ((b Int)) Int))\n ((ite (= a 0) 1 (ite (= (g (- a 1)) 0) 1 0)) (f (- b 1))))\n(assert (= (f 4) 0))\n(check-sat)\n[607] %\n```\n\nOS: Ubuntu 18.04\nCommit: 03e411c\n",
    "priority": 1
  },
  "194": {
    "body": "Hi,\nFor this case, Z3  gives an incorrect answer:\n```\n[631] % cvc4 -q small.smt2 \nunsat\n[632] % z3 small.smt2 \nsat\n[633] % \n[633] % cat small.smt2 \n(assert (str.in.re \"\" ((_ re.loop 189 0) (str.to.re \"\"))))\n(check-sat)\n[634] %\n```\n\nOS: Ubuntu 18.04\nCommit: ae5a713\n",
    "priority": 1
  },
  "195": {
    "body": "Hi the following trace shows a soundness bug in Z3 with annotations. If I read the standard correctly the assert should be semantically equal to `false`.\r\n```\r\n[919] % z3 small.smt2\r\nsat\r\n[920] % cvc4 -q small.smt2\r\nunsat\r\n[921] % cat small.smt2\r\n(assert (! false :lblpos +))\r\n(check-sat)\r\n[922] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: fdabaa6\r\n",
    "priority": 0
  },
  "196": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :fp.xform.bit_blast true)\n(set-option :fp.xform.scale true)\n(assert (distinct (cos 0.0) 1.0))\n(check-sat)\n(check-sat-using horn)\n```\nZ3  gives an incorrect answer:\n```\n[556] % z3 small.smt2 \nunsat\nsat\n[557] % cat small.smt2 \n(set-option :fp.xform.bit_blast true)\n(set-option :fp.xform.scale true)\n(assert (distinct (cos 0.0) 1.0))\n(check-sat)\n(check-sat-using horn)\n[558] %\n```\n\nOS: Ubuntu 18.04\nCommit: 5c9fd90\n",
    "priority": 0
  },
  "197": {
    "body": "Related closed issues: #3811,  #3778\r\n***\r\n```\r\n[635] % z3 small.smt2 \r\nunsat\r\nsat\r\n[636] % \r\n[636] % cat small.smt2 \r\n(set-option :fp.xform.bit_blast true)\r\n(set-option :fp.xform.scale true)\r\n(assert (forall ((x Int)) (forall ((y Int)) (distinct y x))))\r\n(check-sat)\r\n(check-sat-using horn)\r\n[637] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 6d6881c\r\n",
    "priority": 1
  },
  "198": {
    "body": "Hi,\nFor this formula:\n```\n(assert (forall ((a Bool) (b Bool) (d (_ BitVec 1)) (e (_ BitVec 1)) (f (_ BitVec 1)) (g Bool))\n     (= (= f (ite a (_ bv0 1) (ite (not (= d (_ bv0 1))) (_ bv0 1) (ite b e e)))) g)))\n(check-sat-using horn)\n```\nZ3  gives an incorrect answer:\n```\n[615] % z3 small.smt2\nunsat\n[616] % z3 fp.xform.bit_blast=true small.smt2\nsat\n[617] % \n[617] % cat small.smt2\n(assert (forall ((a Bool) (b Bool) (d (_ BitVec 1)) (e (_ BitVec 1)) (f (_ BitVec 1)) (g Bool))\n     (= (= f (ite a (_ bv0 1) (ite (not (= d (_ bv0 1))) (_ bv0 1) (ite b e e)))) g)))\n(check-sat-using horn)\n[618] %\n```\n\nOS: Ubuntu 18.04\nCommit: 3313590\n",
    "priority": 1
  },
  "199": {
    "body": "\n```\n[534] % z3 small.smt2\nunsat\nsat\n[535] % cat small.smt2\n(set-option :fp.xform.bit_blast true)\n(assert (forall ((a Int)) (= a 0)))\n(check-sat)\n(check-sat-using horn)\n[536] %\n```\n\nOS: Ubuntu 18.04\nCommit: 3313590\n",
    "priority": 1
  },
  "200": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :fp.xform.instantiate_arrays true)\n(assert (exists ((x Int)) (forall ((y Int)) (distinct x y))))\n(check-sat)\n(check-sat-using (then horn-simplify default))\n```\nZ3  gives an incorrect answer:\n```\n[790] % z3 small.smt2 \nunsat\nArray Instantiation called with parameters : enforce=0 nb_quantifier=1 slice_technique=no-slicing\nInput rules = \n; rule count: 1\n; predicate count: 1\n; output: query!0\n<null>:\nquery!0() :- \n (let ((a!1 (= (exists ((x Int)) (forall ((y Int)) (distinct x y))) true)))\n (not a!1)).\nOutput rules = \n; rule count: 1\n; predicate count: 1\n; output: query!0!inst\n<null>:\nquery!0!inst() :- \n (let ((a!1 (= (exists ((x Int)) (forall ((y Int)) (distinct x y))) true)))\n (not a!1)).\nsat\n[791] % \n[791] % cat small.smt2 \n(set-option :fp.xform.instantiate_arrays true)\n(assert (exists ((x Int)) (forall ((y Int)) (distinct x y))))\n(check-sat)\n(check-sat-using (then horn-simplify default))\n[792] %\n```\n\nOS: Ubuntu 18.04\nCommit: 9e7af79\n",
    "priority": 1
  },
  "201": {
    "body": "\n```\n[630] % z3 small.smt2\nunsat\nsat\n[631] % cat small.smt2\n(set-option :fp.xform.scale true)\n(set-option :fp.xform.bit_blast true)\n(declare-fun a () Bool)\n(declare-fun b () Bool)\n(declare-fun c () Int)\n(declare-fun d () Bool)\n(declare-fun e () Bool)\n(declare-fun f () Bool)\n(assert (= (not (= a (not (= b f)))) d (not (= c 0)) a (= d e) b (not (= f e))))\n(check-sat)\n(check-sat-using (then add-bounds qfnra horn-simplify))\n[632] %\n\n```\n\nOS: Ubuntu 18.04\nCommit: 406c079\n",
    "priority": 1
  },
  "202": {
    "body": "```\r\n[540] % cvc4 -q small.smt2\r\nunsat\r\n[541] % z3 small.smt2\r\nunsat\r\n[542] % z3 smt.threads=2 small.smt2\r\nsat\r\n[543] % \r\n[543] % cat small.smt2\r\n(declare-fun a () (Set (_ BitVec 1)))\r\n(declare-fun b () (Set (_ BitVec 1)))\r\n(declare-fun c () (Set (_ BitVec 1)))\r\n(declare-fun d () (Set (_ BitVec 1)))\r\n(declare-fun e () (Set (_ BitVec 1)))\r\n(assert (distinct a b c d))\r\n(assert (not (= e a)))\r\n(assert (not (= e b)))\r\n(assert (not (= e c)))\r\n(assert (distinct e d))\r\n(check-sat)\r\n[544] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: b686bb6\r\n",
    "priority": 1
  },
  "203": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :parallel.enable true) \n(declare-sort a)  \n(declare-fun b (a a) a) \n(declare-fun c () a)  \n(assert (let ((?d (b c c))) (= c ?d)))    \n(assert (not (= (b (b c c) c) c)))   \n(check-sat-using  psat)\n```\nZ3  gives an incorrect answer:\n```\n$ z3/build/z3 small.smt2\nunsat\nsat\n$ cat small.smt2 \n(set-option :parallel.enable true) \n(declare-sort a)  \n(declare-fun b (a a) a) \n(declare-fun c () a)  \n(assert (let ((?d (b c c))) (= c ?d)))    \n(assert (not (= (b (b c c) c) c)))   \n(check-sat) \n(check-sat-using  psat)\n```\n\nOS: Ubuntu 18.04\nCommit: 65b2037\n",
    "priority": 0
  },
  "204": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Int)\n(assert\n (and (distinct a 0)\n (= ((_ extract 0 0) (bvashr ((_ int2bv 3) a) ((_ int2bv 3) 1))) (_ bv0 1))\n (= 0 (bv2nat ((_ int2bv 3) (bv2nat (bvor ((_ int2bv 3) (bv2nat (bvashr ((_ int2bv 3) a) ((_ int2bv 3) 7)))))))))\n (= a (bv2nat ((_ int2bv 3) a)))\n (= ((_ extract 0 0) (bvor ((_ int2bv 3) a))) (_ bv0 1))))\n(check-sat)\n```\nZ3 smt.bv.enable_int2bv=false gives an incorrect answer:\n```\n[593] % z3 small.smt2\nunsat\n[594] % z3 smt.bv.enable_int2bv=false small.smt2\nsat\n[595] % \n[595] % cat small.smt2\n(declare-fun a () Int)\n(assert\n (and (distinct a 0)\n (= ((_ extract 0 0) (bvashr ((_ int2bv 3) a) ((_ int2bv 3) 1))) (_ bv0 1))\n (= 0 (bv2nat ((_ int2bv 3) (bv2nat (bvor ((_ int2bv 3) (bv2nat (bvashr ((_ int2bv 3) a) ((_ int2bv 3) 7)))))))))\n (= a (bv2nat ((_ int2bv 3) a)))\n (= ((_ extract 0 0) (bvor ((_ int2bv 3) a))) (_ bv0 1))))\n(check-sat)\n```\n\nOS: Ubuntu 18.04\nCommit: 9be7bda\n",
    "priority": 0
  },
  "205": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun n () Int)\n(declare-fun a_1 () Int)\n(declare-fun f (Int) Int)\n(declare-fun g_1 (Int) Int)\n(assert\n (forall ((i Int))\n  (xor\n   (and\n    (= (f 0) 238)\n    (= (f 15) 33)\n    (>= 93 (f i))\n    (< 0 132)\n    (xor (distinct i n (f i) 145) (xor (= (f (+ 240 i 121)) 19)))\n    (distinct (g_1 248) 254)\n    (xor (= 0 38) (= (g_1 (* i 235)) 190))\n    (or (= (f i) 114) (= (g_1 (div i 129)) (+ 33 217)))\n    (xor (distinct (f i) 143) (distinct (g_1 (div i 216)) (g_1 i)))\n    (or (= (f i) 62) (> (g_1 i) a_1))\n    (xor (distinct (f i) 124) (or (>= (g_1 i) a_1) (< (g_1 i) 232)))))))\n(check-sat)\n(check-sat-using qsat)\n```\nZ3 debug branch  gives an incorrect answer:\n```\n[710] % time z3debug small.smt2\nunsat\nsat\nreal    0m15.411s\nuser    0m14.833s\nsys 0m0.020s\n[711] % \n[711] % cat small.smt2\n(declare-fun n () Int)\n(declare-fun a_1 () Int)\n(declare-fun f (Int) Int)\n(declare-fun g_1 (Int) Int)\n(assert\n (forall ((i Int))\n  (xor\n   (and\n    (= (f 0) 238)\n    (= (f 15) 33)\n    (>= 93 (f i))\n    (< 0 132)\n    (xor (distinct i n (f i) 145) (xor (= (f (+ 240 i 121)) 19)))\n    (distinct (g_1 248) 254)\n    (xor (= 0 38) (= (g_1 (* i 235)) 190))\n    (or (= (f i) 114) (= (g_1 (div i 129)) (+ 33 217)))\n    (xor (distinct (f i) 143) (distinct (g_1 (div i 216)) (g_1 i)))\n    (or (= (f i) 62) (> (g_1 i) a_1))\n    (xor (distinct (f i) 124) (or (>= (g_1 i) a_1) (< (g_1 i) 232)))))))\n(check-sat)\n(check-sat-using qsat)\n\n```\n\nOS: Ubuntu 18.04\nCommit: 8d39694\n",
    "priority": 0
  },
  "206": {
    "body": "```\r\n[600] % z3 small.smt2\r\nunsat\r\n[601] % z3debug small.smt2\r\nsat\r\n[602] % cat small.smt2\r\n(declare-fun a () Int)\r\n(declare-fun b () Int)\r\n(assert (forall ((c Int)) (xor (= (* 2 a) c) (exists ((d Int)) (= (* 3 d) c)))))\r\n(check-sat)\r\n[603] % \r\n```\r\nOS: Ubuntu 18.04\r\nCommit: ceb2849\r\n",
    "priority": 1
  },
  "207": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(set-option :smt.phase_selection 5)                                        \r\n(assert (forall ((a Int)) \r\n(exists ((b Int)) \r\n(forall ((c Int)) \r\n(or (distinct (* 13 a) c) (forall ((bb Int)) (xor (distinct (* 192 bb) c) (<= 4 b)))))))) (check-sat)     \r\n```\r\nZ3 debug branch  gives an incorrect answer:\r\n```\r\n$ z3debug/build/z3 small.smt2\r\nsat\r\n$ cat small.smt2 \r\n(set-option :smt.phase_selection 5)                                        \r\n(assert (forall ((a Int)) \r\n(exists ((b Int)) \r\n(forall ((c Int)) \r\n(or (distinct (* 13 a) c) (forall ((bb Int)) (xor (distinct (* 192 bb) c) (<= 4 b)))))))) (check-sat)            \r\n$ CVC4/build/bin/cvc4 -q small_without_opts.smt2 \r\nunsat\r\n$ cat small_without_opts.smt2\r\n(assert (forall ((a Int)) \r\n(exists ((b Int)) \r\n(forall ((c Int)) \r\n(or (distinct (* 13 a) c) (forall ((bb Int)) (xor (distinct (* 192 bb) c) (<= 4 b)))))))) (check-sat)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 9b58b77\r\n",
    "priority": 1
  },
  "208": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun x () String)                                                       \r\n(declare-fun y () String)                                                       \r\n(assert (or (not (str.contains (str.++ x \"ab\" y)                                \r\n(str.++ \"b\" ( str.substr y 0 80 )))) (not (str.contains (str.++ x \"ab\" y )      \r\n(str.++ (str.substr x 5 (str.len x )) \"a\" )))                                   \r\n(str.contains ( str.++ x y) (str.++ x \"a\" y))                                   \r\n(str.contains ( str.++ x y ) (str.++ y x x y \"a\" ))))                           \r\n(check-sat)    \r\n```\r\nZ3  incorrectly gives  sat, while this formula should be unsat.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 5c057ca\r\n",
    "priority": 0
  },
  "209": {
    "body": "Hi,\r\non this formula, Z3 returns `sat` although the formula is unsat.  \r\n```\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(declare-fun c () String)\r\n(assert\r\n (or\r\n  (str.contains \"abc23cd\"\r\n   (str.++ (int.to.str (str.len c))\r\n    (int.to.str (str.len c))\r\n    (int.to.str (str.len c))))\r\n  (str.contains (str.++ a b) (str.++ a \"a\" b))))\r\n(check-sat)\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 9f6a0a0\r\n",
    "priority": 1
  },
  "210": {
    "body": "Hi, on this formula \r\n\r\n```\r\n(declare-const a Int)\r\n(declare-fun b (Int) Int) \r\n(assert (and  (= (* a a) (b a) 1) (= (b 1)  (b (- 1)) 0))) \r\n(check-sat) \r\n```\r\nOS: Ubuntu 18.04\r\nCommit: a02d3e9",
    "priority": 0
  },
  "211": {
    "body": "Hi,\r\nfor the following formula, Z3 gives `sat` on the debug built, while z3 master gives `unsat`\r\n```\r\n(declare-fun x () Int)                                                          \r\n(declare-fun y () Int)                                                          \r\n(assert (> y 0))                                                                \r\n(assert (not (= (/ (* x y) y) x)))                                              \r\n(check-sat)\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: a02d3e9",
    "priority": 0
  },
  "212": {
    "body": "Hi,\nFor this formula:\n```\n( declare-fun a () Real ) \n( declare-fun b () Real ) \n( declare-fun c () Real ) \n( declare-fun d () Real ) \n( declare-fun e () Real ) \n( declare-fun f () Real ) \n( declare-fun g () Real ) \n( declare-fun h () Real )  \n( declare-fun i () Real ) \n(assert  (not (=>  (and  (= (- b e ) g) (< 0 (- b e )) \n    (< (+ g (/ 0 (* 2.0 (- a d )))) 0)) (< 0.0 (- a d)) (<= 0 h )))) \n(assert ( = c ( mod f i )))\n(check-sat)  \n```\nZ3 debug branch  gives an incorrect answer:\n```\n$ z3/build/z3 small.smt2 \nunsat\n$ z3debug/build/z3 small.smt2 \nsat\n$ cat small.smt2 \n( declare-fun a () Real ) \n( declare-fun b () Real ) \n( declare-fun c () Real ) \n( declare-fun d () Real ) \n( declare-fun e () Real ) \n( declare-fun f () Real ) \n( declare-fun g () Real ) \n( declare-fun h () Real )  \n( declare-fun i () Real ) \n(assert  (not (=>  (and  (= (- b e ) g) (< 0 (- b e )) \n    (< (+ g (/ 0 (* 2.0 (- a d )))) 0)) (< 0.0 (- a d)) (<= 0 h )))) \n(assert ( = c ( mod f i )))\n(check-sat)         \n```\n\nOS: Ubuntu 18.04\nCommit: a02d3e9\n",
    "priority": 1
  },
  "213": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(set-option :solver.enforce_model_conversion true)\r\n(set-option :smt.phase_selection 1)\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(assert (not (= b 0)))\r\n(check-sat)\r\n(assert (> (/ 1 a) 0))\r\n(assert (< b (- 1)))\r\n(check-sat)\r\n```\r\nZ3  gives an incorrect answer:\r\n```\r\n[748] % z3 small.smt2\r\nsat\r\nunsat\r\n[749] % z3debug small.smt2\r\nsat\r\nsat\r\n[750] % cat small.smt2\r\n(set-option :solver.enforce_model_conversion true)\r\n(set-option :smt.phase_selection 1)\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(assert (not (= b 0)))\r\n(check-sat)\r\n(assert (> (/ 1 a) 0))\r\n(assert (< b (- 1)))\r\n(check-sat)\r\n```\r\nZ3 debug branch is correct.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: d9c09dc\r\n",
    "priority": 0
  },
  "214": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(declare-fun d () Real)\n(declare-fun e () Real)\n(declare-fun f () Real)\n(declare-fun g () Real)\n(declare-fun h () Real)\n(declare-fun i () Real)\n(declare-fun l () Real)\n(declare-fun m () Real)\n(declare-fun aa () Real)\n(declare-fun ab () Real)\n(declare-fun ac () Real)\n(declare-fun ae () Real)\n(declare-fun ah () Real)\n(declare-fun ai () Real)\n(declare-fun aj () Real)\n(declare-fun ak () Real)\n(declare-fun al () Real)\n(declare-fun am () Real)\n(declare-fun an () Real)\n(declare-fun ao () Real)\n(declare-fun ap () Real)\n(declare-fun aq () Real)\n(assert\n (forall ((j Real))\n  (and (or (and (xor (= (- ab ap) 2.0) (= aa  c)) (<= 0.0 f)) (<= b am))\n   (and (distinct f ai)\n    (distinct (<= 0.0 l) (=> (xor (<= 0.0 j) (<= j l)) (<= 0.0 j (- e))))))))\n(assert\n (forall ((k Real))\n  (and (=> (<= 0.0 (- e ah) a) (<= 0.0 (+ (* (/ 4 ab h) ac) l)))\n   (<= 0.0 (- a f))\n   (> 0.0 (- d ac))\n   (<= (+ i (/ (* aj aj) (* 2.0 (- ab)))) h)\n   (<= aj al)\n   (<= 0.0 al)\n   (> (+ (* (- h ab) a) d) al))))\n(assert (= a (+ f aq)))\n(assert (= aa (+ g ao) ab (+ h ap)))\n(assert (= (/ m ak) d (+ ae ao)))\n(assert (= e (+ ah an)))\n(check-sat)\n```\nZ3  incorrectly gives sat, while this formula should be unsat.\n\nOS: Ubuntu 18.04\nCommit: a7b3dfb\n",
    "priority": 1
  },
  "215": {
    "body": "Hi,\r\non the following formula, Z3 returns `sat` on this unsatisfiable QF_LRA formula:\r\n\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(assert (>= a b 1))\r\n(assert (= a (ite (= a 1) 0 (ite (> b 0) 1 0))))\r\n(assert (not (= a 1)))\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: e0411c18a123ab8dc1a78ba58b6cdcc12b585815",
    "priority": 1
  },
  "216": {
    "body": "Z3 returns a wrong model for this formula\r\n```\r\n(declare-fun a () Int)\r\n(declare-fun b () Int)\r\n(assert (= (div a (- 2 b)) 2))\r\n(check-sat)\r\n(get-model)\r\n```\r\n```\r\nsat\r\n(model \r\n  (define-fun b () Int\r\n    0)\r\n  (define-fun a () Int\r\n    2)\r\n  (define-fun div0 ((x!0 Int) (x!1 Int)) Int\r\n    2)\r\n)\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: e0411c1",
    "priority": 1
  },
  "217": {
    "body": "Hi,\nFor this formula:\n```\n(assert (forall ((a Real) (b Real)) (< b (/ 1.0 a) (/ 1.0 (- 2.0 a)))))\n(check-sat)\n```\nZ3  incorrectly gives sat, while this formula should be unsat.\n\nOS: Ubuntu 18.04\nCommit: 794c094\n",
    "priority": 1
  },
  "218": {
    "body": "Hi,\nFor this formula:\n```\n(assert (forall ((a Real)) (exists ((b Real)) (and (>= (+ a b) 0.0) (<= b 0.0)))))\n(check-sat-using bv)\n```\nZ3  incorrectly gives sat, while this formula should be unsat.\n\nOS: Ubuntu 18.04\nCommit: ff3baff\n",
    "priority": 1
  },
  "219": {
    "body": "Hi,\nFor this formula:\n```\n(assert (forall ((a (_ BitVec 2)))\n  (exists ((b (_ BitVec 2))) (and (= a #b00) (distinct a b)))))\n(check-sat-using qe)\n```\nZ3 smt.string_solver=z3str3 incorrectly gives sat, while this formula should be unsat.\n\nOS: Ubuntu 18.04\nCommit: 006caea\n",
    "priority": 0
  },
  "220": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () String)\n(assert\n (let ((b (str.indexof (str.substr a 10 (- (str.len a) 0)) \"*\" 0))\n       (c (str.substr a (+ 0 1) (- (str.len a) 0))))\n  (let ((d (str.substr (str.substr a 10 (- (str.len a) 0)) 0 (- b 0)))\n        (i (distinct (ite (str.contains c \"-\") 1 0) 0)))\n   (let ((e (str.substr d 1 (- (str.len d) 0)))\n         (f (str.substr d 0 (- (+ (str.indexof d \"-\" 0) 1) 0))))\n    (let ((j (= (str.++ (str.substr d 0 0) e) \"+\"))\n          (g (distinct (str.++ f e) \"+\")))\n     (let ((h (distinct (ite (not j) 1 0) 0)))\n      (and (not h) (distinct (ite g 1 0) 0) (not i))))))))\n(check-sat)\n```\nZ3 smt.string_solver=z3str3 incorrectly gives sat, while this formula should be unsat.\n\nOS: Ubuntu 18.04\nCommit: 99b71a9\n",
    "priority": 0
  },
  "221": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () Int)\r\n(assert (forall ((b Int)) (or (= (* b b) a) (> b 0))))\r\n(check-sat)\r\n(check-sat-using (then qe_rec smt))\r\n```\r\n`(check-sat)` returns `unsat`, while `(check-sat-using (then qe_rec smt))`  returns `sat`\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 4f33c12",
    "priority": 1
  },
  "222": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(assert (distinct (str.replace (str.replace \"A\" b a) \"B\" \"A\")\r\n          (str.replace \"A\" b (str.replace a \"B\" \"A\"))))\r\n(check-sat)\r\n```\r\n`z3 smt.string_solver=z3str3` incorrectly gives `sat`, while this formula should be `unsat`.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 140926e\r\n\r\n",
    "priority": 0
  },
  "223": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun x () String)\r\n(assert (not (str.contains x (str.at x 1))))\r\n(check-sat)\r\n```\r\n`z3 smt.string_solver=z3str3` incorrectly gives `sat`, while z3 without smt.string_solver=z3str3 gives `unsat`. \r\n\r\nOS: Ubuntu 18.04\r\nRevision: 4535228",
    "priority": 1
  },
  "224": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(assert (exists ((a (_ BitVec 1)))\r\n  (forall ((b (_ BitVec 1)))\r\n    (forall ((c (_ BitVec 1)))\r\n      (forall ((d (_ BitVec 1))) false)))))\r\n(check-sat-using smtfd)\r\n```\r\nz3 incorrectly gives `sat` on this `unsat` formula.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: a05dec9",
    "priority": 0
  },
  "225": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(assert (= 0 1))\r\n(assert (distinct 0 2))\r\n(check-sat-using smtfd)\r\n```\r\nz3 gives an incorrect `sat` on this `unsat` formula. \r\n\r\nOS: Ubuntu 18.04\r\nRevision: 805ac74",
    "priority": 0
  },
  "226": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-datatypes ((a 0)) (((b) (c (d a)))))\r\n(declare-fun e () a)\r\n(declare-fun f () a)\r\n(assert (= f e))\r\n(assert (not ((_ is (c (a) a)) f)))\r\n(assert (or ((_ is (c (a) a)) e)))\r\n(check-sat-using pqffd)\r\n(get-model)\r\n```\r\nz3 incorrectly gives `sat` and an incorrect model:\r\n```\r\n  (define-fun f () a\r\n    b)\r\n  (define-fun e () a\r\n    b)\r\n```\r\nIf I feed this model to the formula, z3 reports `unsat`.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 805ac74",
    "priority": 0
  },
  "227": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () String)\r\n(assert\r\n (let ((b (str.substr a 1 (- (+ (str.indexof a \"\" 20) 1)))))\r\n  (let ((c (str.indexof a \"*\" 0)))\r\n   (let ((d (str.substr a (+ c 1) (- c))))\r\n    (and (= (str.len b) 0)\r\n     (not (str.contains d \"*\"))\r\n     (> c 1)\r\n     (< (str.len a) 20))))))\r\n(check-sat)\r\n```\r\nz3 incorrectly gives `unsat` while this model satisfies the formula:\r\n```\r\n(define-fun a () String \"AB*\")\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 805ac74  ",
    "priority": 1
  },
  "228": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(assert (forall ((a Real)) (exists ((b Real)) (and (= (/ 0 b) 0) (= a (/ 0 0))))))\r\n(check-sat)\r\n```\r\nz3 gives an incorrect answer `sat` while cvc4 gives `unsat`.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 3ec7146",
    "priority": 0
  },
  "229": {
    "body": "Hi,\r\non the following formula z3 returns `sat` although the formula is unsat.\r\n```\r\n(declare-fun x () (_ FloatingPoint 3 24))\r\n(declare-fun rm () RoundingMode)\r\n(assert (distinct (fp.roundToIntegral rm (fp.roundToIntegral rm x)) (fp.roundToIntegral rm x)))\r\n(check-sat)\r\n```\r\nOS: Ubuntu 19.04\r\nRevision: eea7805",
    "priority": 1
  },
  "230": {
    "body": "Hi,\r\nFor this unsat formula,\r\n```\r\n(declare-fun s () String)\r\n(assert (or (= s \"0\") (= s \"1\")))\r\n(assert (> (str.to.int s) 1))\r\n(check-sat)\r\n```\r\n`z3 smt.arith.solver=3` incorrectly gives sat and an incorrect model:\r\n```\r\n(model \r\n  (define-fun s () String\r\n    \"0\")\r\n)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 321bad2\r\n\r\n",
    "priority": 0
  },
  "231": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(set-logic NRA)\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(declare-fun f () Real)\r\n(declare-fun g () Real)\r\n(declare-fun h () Real)\r\n(declare-fun i () Real)\r\n(declare-fun j () Real)\r\n(declare-fun k () Real)\r\n(declare-fun l () Real)\r\n(declare-fun m () Real)\r\n(declare-fun n () Real)\r\n(declare-fun o () Real)\r\n(declare-fun p () Real)\r\n(declare-fun q () Real)\r\n(declare-fun r () Real)\r\n(declare-fun s () Real)\r\n(assert\r\n  (not\r\n    (exists\r\n      ((t Real))\r\n      (=>\r\n        (and\r\n          (or\r\n            (and\r\n              (=>\r\n                (< 0 j)\r\n                (and\r\n                  (or\r\n                    (<= 0 (+ (* n s) m))\r\n                    (<= 0 p)\r\n                  )\r\n                  (> s 0)\r\n                )\r\n              )\r\n              (<\r\n                (*\r\n                  o\r\n                  (* (* n h) (/ o (- b h)))\r\n                )\r\n                0\r\n              )\r\n            )\r\n            (< 0 n)\r\n          )\r\n          (< 0 p)\r\n          (< 0 (- b h))\r\n        )\r\n        (<\r\n          (/\r\n            (* (+ (* n j) m) (+ (* n j) m))\r\n            (* 2 o)\r\n          )\r\n          (* a e)\r\n        )\r\n      )\r\n    )\r\n  )\r\n)\r\n(assert\r\n  (not\r\n    (exists\r\n      ((u Real))\r\n      (=>\r\n        (and\r\n          (or (= (* c r) 0) (= l 0))\r\n          (= e 2)\r\n          (< h i (/ d r))\r\n        )\r\n        (=> (= 0 k) (not (<= u k 0 r)))\r\n      )\r\n    )\r\n  )\r\n)\r\n(assert (= a (+ f o) (+ g o)))\r\n(assert (= b (/ h q)))\r\n(check-sat)\r\n(get-model)\r\n```\r\nZ3 will incorrectly report sat, and give a model:\r\n```\r\n(define-fun h () Real\r\n    (- 1.0))\r\n  (define-fun b () Real\r\n    0.0)\r\n  (define-fun o () Real\r\n    0.0)\r\n  (define-fun q () Real\r\n    0.0)\r\n  (define-fun d () Real\r\n    1.0)\r\n  (define-fun m () Real\r\n    1.0)\r\n  (define-fun n () Real\r\n    1.0)\r\n  (define-fun j () Real\r\n    1.0)\r\n  (define-fun p () Real\r\n    1.0)\r\n  (define-fun s () Real\r\n    (- 1.0))\r\n  (define-fun g () Real\r\n    (/ 1.0 2.0))\r\n  (define-fun f () Real\r\n    (/ 1.0 2.0))\r\n  (define-fun a () Real\r\n    (/ 1.0 2.0))\r\n  (define-fun k () Real\r\n    0.0)\r\n  (define-fun l () Real\r\n    (- 1.0))\r\n  (define-fun r () Real\r\n    1.0)\r\n  (define-fun c () Real\r\n    0.0)\r\n  (define-fun i () Real\r\n    0.0)\r\n  (define-fun e () Real\r\n    2.0)\r\n```\r\nIf I feed this model to the formula, z3 will report unsat.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 9847675",
    "priority": 0
  },
  "232": {
    "body": "Consider the following formula \r\n```\r\n(declare-fun a () String)\r\n(assert (distinct (str.prefixof a (str.substr a 1 2)) (= a (str.at a 2))))\r\n(check-sat)\r\n```\r\nZ3 (trunk) gives `sat` on this formula while z3-4.8.7 gives `unsat` on it which is correct.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 88f1c68\r\n",
    "priority": 1
  },
  "233": {
    "body": "Consider the following formula.\r\n\r\n```\r\n(assert (distinct 1.0 (^ 0.0 0.0)))\r\n(check-sat)\r\n```\r\nZ3 gives `sat` although the formula is unsatisfiable.\r\n\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 4c09b7d",
    "priority": 1
  },
  "234": {
    "body": "Consider the following formula:\r\n\r\n```\r\n(declare-fun m () Int) \r\n(declare-fun y () Int) \r\n(declare-fun x () Int) \r\n(assert (= (- (- x y) m) 0)) \r\n(assert (distinct (mod x m) (mod y m)))  \r\n(assert (> y 0)) (assert (<= m 0)) \r\n(check-sat)\r\n```\r\nZ3 reports `sat` on this unsatisfiable formula. Feeding Z3's model yields `unsat`.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 1fff7bb",
    "priority": 1
  },
  "235": {
    "body": "Hi,\r\nconsider the following formula.\r\n\r\n```\r\n(declare-fun a () Int)\r\n(declare-fun b (Int) Bool)\r\n(assert (= (or (= 0 0)) (b 0)))\r\n(push)\r\n(assert (= true (distinct true (distinct false (= a 0)) (= false (b 0)))))      \r\n(check-sat)\r\n(get-model)\r\n```\r\nZ3 returns sat here although the second assert is clearly unsatisfiable. It seems like Z3 dropped the second assert.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 2c6e6b1",
    "priority": 1
  },
  "236": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun x () Real)\r\n(declare-fun y () Real)\r\n(declare-fun f (Real) Real)\r\n(declare-fun g (Real) Real)\r\n(assert (= x (f x) y))\r\n(assert (distinct (g x) (g y)))\r\n(check-sat)\r\n(get-model)\r\n```\r\n`Z3 smt.arith.solver=1` incorrectly reports `sat` and gives an incorrect model:\r\n```\r\n(model \r\n  (define-fun x () Real\r\n    0.0)\r\n  (define-fun y () Real\r\n    0.0)\r\n  (define-fun f ((x!0 Real)) Real\r\n    0.0)\r\n  (define-fun g ((x!0 Real)) Real\r\n    (- 1.0))\r\n)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: e5ca451",
    "priority": 1
  },
  "237": {
    "body": "Hi, \r\nFor this formula:\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun aa () Real)\r\n(declare-fun ab () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(declare-fun f () Real)\r\n(declare-fun j () Real)\r\n(declare-fun g () Real)\r\n(declare-fun i () Real)\r\n(declare-fun h () Real)\r\n(declare-fun k () Real)\r\n(declare-fun ad () Real)\r\n(declare-fun ag () Real)\r\n(assert\r\n (not\r\n  (exists ((ai Real))\r\n   (=> (>= 0 c)\r\n    (=> (<= 0 e)\r\n     (or (> 0 ai) (> 0 (+ (* (+ b g) ai) aa)) (> (+ ai aa) (- i d))))))))\r\n(assert\r\n (not\r\n  (exists ((aj Real))\r\n   (=\r\n    (and\r\n     (or (and (= (+ b e) (+ a f)) (<= f b)) (<= 0 ad))\r\n     (= (- d i) 2)\r\n     (< (+ ab (/ 0 (/ 2 k))) 0 k e a))\r\n    (or\r\n     (< (/ 1 c) (* 2 (/ (- 1) k)))\r\n     (< (/ (* (+ (* k (- f b)) ad) (+ (* (/ (- 1) k) (- b f)) ad)) (* 2 k)) 0))))))\r\n(assert (= b (+ f h)))\r\n(assert (= c (+ j ag)(+ g h)))\r\n(check-sat)\r\n```\r\nz3 gives incorrect `sat` answer and gives a model:\r\n```\r\n (define-fun k () Real\r\n    1.0)\r\n  (define-fun ad () Real\r\n    (- (/ 1.0 2.0)))\r\n  (define-fun f () Real\r\n    (/ 3.0 2.0))\r\n  (define-fun b () Real\r\n    2.0)\r\n  (define-fun c () Real\r\n    0.0)\r\n  (define-fun h () Real\r\n    (/ 1.0 2.0))\r\n  (define-fun g () Real\r\n    (- (/ 1.0 2.0)))\r\n  (define-fun ag () Real\r\n    (- (/ 1.0 4.0)))\r\n  (define-fun j () Real\r\n    (/ 1.0 4.0))\r\n  (define-fun e () Real\r\n    2.0)\r\n  (define-fun a () Real\r\n    (/ 5.0 2.0))\r\n  (define-fun ab () Real\r\n    (- 1.0))\r\n  (define-fun i () Real\r\n    (- 1.0))\r\n  (define-fun d () Real\r\n    1.0)\r\n  (define-fun aa () Real\r\n    (- (/ 29.0 4.0)))\r\n```\r\nIf I feed this model to the formula, z3 reports `unknown` while cvc4 reports `unsat`.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 2f6a9ba",
    "priority": 0
  },
  "238": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun s () String)\r\n(assert (= (str.to.int s) 10))\r\n(assert (= (str.len s) 1))\r\n(check-sat)\r\n```\r\n`z3 smt.arith.solver=3` reports `sat`, while the formula should be `unsat`.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 23fcc21",
    "priority": 1
  },
  "239": {
    "body": "Hi,\r\n\r\nhere is another soundness bug in z3str3. On the following satisfiable formula z3str reports `unsat` while z3 reports `sat` on it.\r\n\r\n```\r\n\r\n(set-logic QF_S)\r\n(declare-fun x () String)\r\n(declare-fun y () String)\r\n(assert (= (str.indexof x y 1) (str.len x)))\r\n(assert (str.contains x y))\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: ba03d99\r\n",
    "priority": 1
  },
  "240": {
    "body": "Hi,\r\non the following unsatisfiable formula z3str3 incorrectly reports \"sat\" \r\n\r\n```\r\n(declare-fun i () Int)\r\n(assert (< i 1))\r\n(assert (= (int.to.str i) \"00\"))\r\n(check-sat)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: ba03d99",
    "priority": 1
  },
  "241": {
    "body": "Hi,\r\n\r\nThe following should be unsatisfiable but Z3 gives `sat` on it. \r\n\r\n```\r\n(declare-fun a () String)\r\n(declare-fun b () Int)\r\n(assert (> b 0))\r\n(assert (= (int.to.str b) (str.++ \"0\" a)))\r\n(check-sat)\r\n```\r\nRevision: 05ad90c976be01b8dbd1e5025c819f405a3b49f5\r\nOS: Ubuntu 18.04",
    "priority": 1
  },
  "242": {
    "body": "Hi,\r\nFor this formula\r\n```\r\n(set-logic QF_LRA)\r\n(assert (= (/ 0.0 0.0) (/ (/ 0.0 0.0) 0.0)))\r\n(assert (not (= (/ 0.0 0.0) (/ (/ (/ 0.0 0.0) 0.0) 0.0))))\r\n(check-sat)\r\n```\r\nZ3 reports `sat`, but throws out an error when model_validate is on:\r\n```\r\n(error \"line 4 column 10: an invalid model was generated\")\r\n```\r\nCVC4 reports `unsat` on this formula.\r\n\r\nFor this similar formula in Int logic:\r\n```\r\n(set-logic QF_LIA)\r\n(assert (= (div 0 0) (div (div 0 0) 0)))\r\n(assert (not (= (div 0 0) (div (div (div 0 0) 0) 0))))\r\n(check-sat)\r\n```\r\nZ3 also reports `sat`, while CVC4 reports `unsat`. \r\nWhen model_validate is on, z3 will also throw out the same error.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: e2b6b12",
    "priority": 1
  },
  "243": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(declare-fun f () Real)\r\n(declare-fun g () Real)\r\n(declare-fun h () Real)\r\n(declare-fun i () Real)\r\n(declare-fun j () Real)\r\n(assert (not (exists ((k Real)) (=> (< 0 j) (= (<= 0 f) (not (= (<= 0 f) (< (* d k f) e k j))))))))\r\n(assert (not (= (< (/ (* (- a b) (- a b)) (* 2 i)) 0) (< 0 (* c h)))))\r\n(assert (= a (/ b g)))\r\n(check-sat)\r\n(get-model)\r\n```\r\nZ3 will incorrectly report sat, and give a model:\r\n```\r\n (define-fun g () Real\r\n    (- 1.0))\r\n  (define-fun b () Real\r\n    (- (/ 1.0 4.0)))\r\n  (define-fun a () Real\r\n    (/ 1.0 4.0))\r\n  (define-fun h () Real\r\n    (/ 1.0 2.0))\r\n  (define-fun c () Real\r\n    (- 1.0))\r\n  (define-fun i () Real\r\n    (- 1.0))\r\n  (define-fun j () Real\r\n    1.0)\r\n  (define-fun e () Real\r\n    (- 1.0))\r\n  (define-fun f () Real\r\n    (- 1.0))\r\n  (define-fun d () Real\r\n    (- 2.0))\r\n```\r\nIf I feed this model to the formula, z3 will report unsat.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: a8049c7",
    "priority": 0
  },
  "244": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(set-logic NRA)\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(declare-fun f () Real)\r\n(declare-fun g () Real)\r\n(declare-fun h () Real)\r\n(declare-fun i () Real)\r\n(declare-fun j () Real)\r\n(declare-fun k () Real)\r\n(declare-fun l () Real)\r\n(declare-fun m () Real)\r\n(declare-fun n () Real)\r\n(declare-fun o () Real)\r\n(declare-fun p () Real)\r\n(declare-fun q () Real)\r\n(declare-fun r () Real)\r\n(declare-fun s () Real)\r\n(assert\r\n  (not\r\n    (exists\r\n      ((t Real))\r\n      (=>\r\n        (and\r\n          (or\r\n            (and\r\n              (=>\r\n                (< 0 j)\r\n                (and\r\n                  (or\r\n                    (<= 0 (+ (* n s) m))\r\n                    (<= 0 p)\r\n                  )\r\n                  (> s 0)\r\n                )\r\n              )\r\n              (<\r\n                (*\r\n                  o\r\n                  (* (* n h) (/ o (- b h)))\r\n                )\r\n                0\r\n              )\r\n            )\r\n            (< 0 n)\r\n          )\r\n          (< 0 p)\r\n          (< 0 (- b h))\r\n        )\r\n        (<\r\n          (/\r\n            (* (+ (* n j) m) (+ (* n j) m))\r\n            (* 2 o)\r\n          )\r\n          (* a e)\r\n        )\r\n      )\r\n    )\r\n  )\r\n)\r\n(assert\r\n  (not\r\n    (exists\r\n      ((u Real))\r\n      (=>\r\n        (and\r\n          (or (= (* c r) 0) (= l 0))\r\n          (= e 2)\r\n          (< h i (/ d r))\r\n        )\r\n        (=> (= 0 k) (not (<= u k 0 r)))\r\n      )\r\n    )\r\n  )\r\n)\r\n(assert (= a (+ f o) (+ g o)))\r\n(assert (= b (/ h q)))\r\n(check-sat)\r\n(get-model)\r\n```\r\nZ3 will incorrectly report sat, and give a model:\r\n```\r\n(define-fun h () Real\r\n    (- 1.0))\r\n  (define-fun b () Real\r\n    0.0)\r\n  (define-fun o () Real\r\n    0.0)\r\n  (define-fun q () Real\r\n    0.0)\r\n  (define-fun d () Real\r\n    1.0)\r\n  (define-fun m () Real\r\n    1.0)\r\n  (define-fun n () Real\r\n    1.0)\r\n  (define-fun j () Real\r\n    1.0)\r\n  (define-fun p () Real\r\n    1.0)\r\n  (define-fun s () Real\r\n    (- 1.0))\r\n  (define-fun g () Real\r\n    (/ 1.0 2.0))\r\n  (define-fun f () Real\r\n    (/ 1.0 2.0))\r\n  (define-fun a () Real\r\n    (/ 1.0 2.0))\r\n  (define-fun k () Real\r\n    0.0)\r\n  (define-fun l () Real\r\n    (- 1.0))\r\n  (define-fun r () Real\r\n    1.0)\r\n  (define-fun c () Real\r\n    0.0)\r\n  (define-fun i () Real\r\n    0.0)\r\n  (define-fun e () Real\r\n    2.0)\r\n```\r\nIf I feed this model to the formula, z3 will report unsat.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 9847675",
    "priority": 0
  },
  "245": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(set-logic NRA)\r\n(declare-fun a () Real) \r\n(declare-fun b () Real) \r\n(declare-fun c () Real) \r\n(declare-fun d () Real) \r\n(declare-fun ar () Real) \r\n(declare-fun e () Real) \r\n(declare-fun f () Real) \r\n(declare-fun bc () Real) \r\n(declare-fun g () Real) \r\n(declare-fun h () Real) \r\n(declare-fun i () Real) \r\n(declare-fun j () Real) \r\n(declare-fun k () Real) \r\n(declare-fun bd () Real) \r\n(declare-fun l () Real)  \r\n(declare-fun be () Real) \r\n(declare-fun m () Real) \r\n(declare-fun bf () Real) \r\n(declare-fun n () Real) \r\n(declare-fun o () Real) \r\n(declare-fun p () Real) \r\n(declare-fun q () Real) \r\n(declare-fun r () Real) \r\n(declare-fun s () Real) \r\n(declare-fun t () Real) \r\n(declare-fun u () Real) \r\n(declare-fun v () Real) \r\n(declare-fun bh () Real) \r\n(declare-fun w () Real) \r\n(declare-fun x () Real) \r\n(declare-fun y () Real) \r\n(declare-fun z () Real) \r\n(declare-fun aa () Real) \r\n(declare-fun ab () Real) \r\n(declare-fun bg () Real) \r\n(declare-fun ac () Real) \r\n(declare-fun ad () Real) \r\n(declare-fun bb () Real) \r\n(declare-fun ae () Real) \r\n(declare-fun ba () Real) \r\n(declare-fun af () Real) \r\n(declare-fun ag () Real) \r\n(declare-fun ah () Real) \r\n(declare-fun ai () Real) \r\n(declare-fun aj () Real) \r\n(declare-fun ak () Real) \r\n(declare-fun al () Real) \r\n(declare-fun am () Real) \r\n(declare-fun an () Real) \r\n(declare-fun ao () Real) \r\n(declare-fun ap () Real) \r\n(assert\r\n  (not\r\n    (exists\r\n      ((v Real))\r\n      (=>\r\n        (and\r\n          (or\r\n            (and\r\n              (= bg p)\r\n              (= (/ 6 l ak) 0)\r\n              (= u 0)\r\n              (= u 2)\r\n              (<\r\n                (+\r\n                  z\r\n                  (/\r\n                    (* (- a (- h bh)) (/ 9 a (- h bh)))\r\n                    (* 2 (- ar (- be bg)))\r\n                  )\r\n                )\r\n                ab\r\n              )\r\n              (= w k)\r\n              (< 0 (/ 41 ar (- be bg)))\r\n              (>= 0 (- a (- h bh)))\r\n            )\r\n            (= 0 (- e ag))\r\n          )\r\n          (<= (- e ag) (- m (- bf bb)))\r\n          (<= 0 (- d (/ 66 bc u)))\r\n          (< 0 (- m (- bf bb)))\r\n          (< 0 ad)\r\n        )\r\n        (or\r\n          (= ab bb)\r\n          (=>\r\n            (<= 0 o)\r\n            (=>\r\n              (=>\r\n                (<= 0 v o)\r\n                (and\r\n                  (<= ak (* m (/ 40 bf bb)))\r\n                  (<= 0 (* 3 (- bd z)))\r\n                  (<=\r\n                    (+ (* d v) (- f (- bd z)))\r\n                    0\r\n                  )\r\n                  (>= v ad)\r\n                )\r\n              )\r\n              (= (- j ap) 2)\r\n            )\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )\r\n)\r\n(assert\r\n  (exists\r\n    ((aq Real))\r\n    (=>\r\n      (or\r\n        (and\r\n          (or\r\n            (and\r\n              (=>\r\n                (<= 0 (- bd z) (- d q))\r\n                (and\r\n                  (<=\r\n                    0\r\n                    (+\r\n                      (* (* 91 ah) z)\r\n                      (* ah bd)\r\n                    )\r\n                    am\r\n                  )\r\n                  (< z (- b))\r\n                )\r\n              )\r\n              (< 0 aj)\r\n            )\r\n            (< aj am)\r\n          )\r\n          (= bf 2)\r\n          (<\r\n            (+ (- j) (/ (* al al) (* 2 ah)))\r\n            r\r\n          )\r\n          (< 0 al)\r\n          (< al am)\r\n          (< 0 ag)\r\n          (< 0 am)\r\n        )\r\n        (< 0 (- b o))\r\n      )\r\n      (or\r\n        (= aa 2)\r\n        (< 0 ba)\r\n        (<\r\n          (*\r\n            (/ 0\r\n              (+\r\n                (* (* 3 ah) (* (/ 99 d q) (/ 101 d q)))\r\n                (/ (* 2 (- d q)) aj)\r\n                (* 2 ba)\r\n              )\r\n            )\r\n            (/\r\n              (*\r\n                (+\r\n                  (* ah (- q d))\r\n                  aj\r\n                )\r\n                (+\r\n                  (* (/ (- 1) ah) (- d q))\r\n                  aj\r\n                )\r\n              )\r\n              (* 2 ah)\r\n            )\r\n          )\r\n          0\r\n        )\r\n      )\r\n    )\r\n  )\r\n)\r\n(assert (= a (+ n ak)))\r\n(assert (= b (+ o ao)))\r\n(assert (= c (+ p aj)))\r\n(assert (= d (* q af)))\r\n(assert (= e (/ s ag)))\r\n(assert (= f (+ t an)))\r\n(assert (= bc (+ u af)))\r\n(assert (= g (+ v af)))\r\n(assert (= h (+ bh ak)))\r\n(assert (= i (+ w af)))\r\n(assert (= j (+ x ap)))\r\n(assert (= k (* y am)))\r\n(assert (= bd (+ z an)))\r\n(assert (= l (+ aa ak ab ao)))\r\n(assert (= be (+ bg ae)))\r\n(assert (= m (+ ac ai)))\r\n(assert (= bf (+ bb ai)))\r\n(check-sat)\r\n(get-model)\r\n```\r\nZ3 will incorrectly report sat, and give a model:\r\n```\r\n  (define-fun ag () Real\r\n    (- 1.0))\r\n  (define-fun s () Real\r\n    1.0)\r\n  (define-fun al () Real\r\n    (- (/ 1.0 2.0)))\r\n  (define-fun ah () Real\r\n    1.0)\r\n  (define-fun aj () Real\r\n    (/ 1.0 2.0))\r\n  (define-fun q () Real\r\n    (- 2.0))\r\n  (define-fun d () Real\r\n    (- 1.0))\r\n  (define-fun ba () Real\r\n    (/ 1.0 8.0))\r\n  (define-fun ar () Real\r\n    (- 1.0))\r\n  (define-fun bh () Real\r\n    (/ 1.0 8.0))\r\n  (define-fun h () Real\r\n    (/ 1.0 8.0))\r\n  (define-fun a () Real\r\n    1.0)\r\n  (define-fun bg () Real\r\n    (- 1.0))\r\n  (define-fun be () Real\r\n    (- (/ 1.0 4.0)))\r\n  (define-fun l () Real\r\n    0.0)\r\n  (define-fun bb () Real\r\n    (/ 1.0 8.0))\r\n  (define-fun bf () Real\r\n    (- (/ 1.0 8.0)))\r\n  (define-fun u () Real\r\n    (- (/ 1.0 4.0)))\r\n  (define-fun bc () Real\r\n    (/ 1.0 4.0))\r\n  (define-fun ai () Real\r\n    (- (/ 1.0 4.0)))\r\n  (define-fun ac () Real\r\n    (/ 1.0 8.0))\r\n  (define-fun m () Real\r\n    (- (/ 1.0 8.0)))\r\n  (define-fun ae () Real\r\n    (/ 3.0 4.0))\r\n  (define-fun ao () Real\r\n    (- 1.0))\r\n  (define-fun ab () Real\r\n    (- 1.0))\r\n  (define-fun ak () Real\r\n    0.0)\r\n  (define-fun aa () Real\r\n    2.0)\r\n  (define-fun an () Real\r\n    1.0)\r\n  (define-fun z () Real\r\n    (/ 1.0 2.0))\r\n  (define-fun bd () Real\r\n    (/ 3.0 2.0))\r\n  (define-fun y () Real\r\n    (- (/ 1.0 4.0)))\r\n  (define-fun am () Real\r\n    (- 1.0))\r\n  (define-fun k () Real\r\n    (/ 1.0 4.0))\r\n  (define-fun ap () Real\r\n    0.0)\r\n  (define-fun x () Real\r\n    1.0)\r\n  (define-fun j () Real\r\n    1.0)\r\n  (define-fun af () Real\r\n    (/ 1.0 2.0))\r\n  (define-fun w () Real\r\n    (/ 1.0 4.0))\r\n  (define-fun i () Real\r\n    (/ 3.0 4.0))\r\n  (define-fun v () Real\r\n    (/ 1.0 2.0))\r\n  (define-fun g () Real\r\n    1.0)\r\n  (define-fun t () Real\r\n    (- (/ 9.0 8.0)))\r\n  (define-fun f () Real\r\n    (- (/ 1.0 8.0)))\r\n  (define-fun e () Real\r\n    (- 1.0))\r\n  (define-fun p () Real\r\n    (/ 1.0 8.0))\r\n  (define-fun c () Real\r\n    (/ 5.0 8.0))\r\n  (define-fun o () Real\r\n    1.0)\r\n  (define-fun b () Real\r\n    0.0)\r\n  (define-fun n () Real\r\n    1.0)\r\n  (define-fun r () Real\r\n    (- (/ 1.0 4.0)))\r\n  (define-fun ad () Real\r\n    1.0)\r\n```\r\nIf I feed this model to the formula, z3 will report unsat.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: a635049",
    "priority": 0
  },
  "246": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(declare-fun f () Real)\r\n(declare-fun g () Real)\r\n(declare-fun h () Real)\r\n(declare-fun i () Real)\r\n(assert\r\n (forall ((k Real))\r\n  (and (< 0 f) (not (= (< 0 d) (not (= (< k d) (< g a))))))))\r\n(assert\r\n (forall ((l Real))\r\n  (or\r\n   (and (= (< h 0) (and (> (+ (* (- 1 b) h) i) (- e)) (< h a))) (< i 0) (< f b))\r\n   (< e a))))\r\n(assert (= a 0))\r\n(check-sat)\r\n(get-model)\r\n```\r\nz3 reports sat and gives the following model:\r\n```\r\n    (define-fun a () Real\r\n    0.0)\r\n  (define-fun e () Real\r\n    (- 1.0))\r\n  (define-fun f () Real\r\n    1.0)\r\n  (define-fun b () Real\r\n    3.0)\r\n  (define-fun i () Real\r\n    (- (/ 1.0 2.0)))\r\n  (define-fun h () Real\r\n    (- 1.0))\r\n  (define-fun g () Real\r\n    (- 1.0))\r\n  (define-fun d () Real\r\n    1.0)\r\n```\r\nIf I feed this model to the formula, z3 will report unsat.\r\n\r\nz3-4.8.6 and z3-4.8.5 also have this bug.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: d70b63c",
    "priority": 1
  },
  "247": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun n () Real)\r\n(declare-fun e () Real)\r\n(declare-fun f () Real)\r\n(declare-fun o () Real)\r\n(declare-fun g () Real)\r\n(declare-fun h () Real)\r\n(declare-fun i () Real)\r\n(declare-fun j () Real)\r\n(declare-fun k () Real)\r\n(assert\r\n (not\r\n  (exists\r\n   ((l Real))\r\n   (= (< 0 h) (or (= (= 0 c) (= (<= 0 l) (= f 2))))))))\r\n(assert\r\n (not\r\n  (exists ((m Real))\r\n   (=>\r\n    (and\r\n     (or\r\n      (and\r\n       (or\r\n        (and\r\n         (=> (<= i k) (and (<= 0 (+ (* g i) (- b f))) (<= i (- d))))\r\n         (= o j)\r\n         )\r\n        (<\r\n         (+ (+ j (/ (* f (- b f)) 0)) (* (+ (/ g n ) 1) (* (* g (/ 1 2)) (/ 0 d))))\r\n         o)\r\n        )\r\n       (< o j)\r\n       )\r\n      (> 0 n)\r\n      )\r\n     (<= 0 g)\r\n     (> 0 d)\r\n     )\r\n    (or\r\n     (< o (* (/ 1 2) (+ (* g (* k k)) (* (* 2 k) (+ b f)))))\r\n     (< (+ j (/ (- b f) (* 2 (- n)))) o)\r\n     )\r\n    )\r\n   )\r\n  )\r\n )\r\n(assert (= a (+ e i)))\r\n(check-sat)\r\n(get-model)\r\n```\r\nz3 reports sat and gives the following model:\r\n```\r\n  (define-fun n () Real\r\n    (- 1.0))\r\n  (define-fun g () Real\r\n    1.0)\r\n  (define-fun d () Real\r\n    (- 1.0))\r\n  (define-fun f () Real\r\n    (- (/ 1.0 2.0)))\r\n  (define-fun b () Real\r\n    0.0)\r\n  (define-fun o () Real\r\n    1.0)\r\n  (define-fun j () Real\r\n    1.0)\r\n  (define-fun i () Real\r\n    0.0)\r\n  (define-fun k () Real\r\n    1.0)\r\n  (define-fun e () Real\r\n    (- 1.0))\r\n  (define-fun a () Real\r\n    (- 1.0))\r\n  (define-fun c () Real\r\n    (- (/ 1.0 2.0)))\r\n  (define-fun h () Real\r\n    (- 1.0))\r\n```\r\nIf I feed this model to the formula, z3 will report unsat.\r\n\r\nz3-4.8.6 also has this bug.\r\nz3-4.8.5 doesn't have this bug.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: a424ab9",
    "priority": 1
  },
  "248": {
    "body": "```\r\n[601] % z3release model_validate=true small.smt2\r\nsat\r\n(error \"line 5 column 29: an invalid model was generated\")\r\n(model \r\n (define-fun b () Real\r\n  0.0)\r\n (define-fun a () Real\r\n  0.0)\r\n (define-fun c ((x!0 Real)) Real\r\n  5.0)\r\n)\r\n[602] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c (Real) Real)\r\n(assert (= (- a b) 1))\r\n(check-sat (distinct 0 (c 2)))\r\n(get-model)\r\n[603] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit:  44679d8",
    "priority": 0
  },
  "249": {
    "body": "```\r\n[601] % z3release model_validate=true small.smt2\r\nsat\r\n(error \"line 5 column 29: an invalid model was generated\")\r\n(model \r\n (define-fun b () Real\r\n  0.0)\r\n (define-fun a () Real\r\n  0.0)\r\n (define-fun c ((x!0 Real)) Real\r\n  5.0)\r\n)\r\n[602] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c (Real) Real)\r\n(assert (= (- a b) 1))\r\n(check-sat (distinct 0 (c 2)))\r\n(get-model)\r\n[603] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit:  44679d8",
    "priority": 0
  },
  "250": {
    "body": "```\r\n[601] % z3release model_validate=true small.smt2\r\nsat\r\n(error \"line 5 column 29: an invalid model was generated\")\r\n(model \r\n (define-fun b () Real\r\n  0.0)\r\n (define-fun a () Real\r\n  0.0)\r\n (define-fun c ((x!0 Real)) Real\r\n  5.0)\r\n)\r\n[602] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c (Real) Real)\r\n(assert (= (- a b) 1))\r\n(check-sat (distinct 0 (c 2)))\r\n(get-model)\r\n[603] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit:  44679d8",
    "priority": 0
  },
  "251": {
    "body": "Hi,\r\non the following formula, Z3 throws a segfault.\r\n```\r\n[540] % z3release small.smt2\r\nSegmentation fault\r\n[541] % \r\n[541] % cat small.smt2\r\n(declare-const a Real)\r\n(assert (> (- (* 2.0 a) (* a a)) 1.0 1.0))\r\n(apply factor)\r\n[542] \r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 2841796",
    "priority": 1
  },
  "252": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "253": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "254": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "255": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "256": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "257": {
    "body": "(smt.arith.solver=6) Soundness bug on QF_S  formula. smt.arith.solver=6 seems to be wrong.\r\n```\r\n[556] % z3release smt.arith.solver=6 small.smt2\r\nsat\r\n[557] % z3release smt.arith.solver=2 small.smt2\r\nunsat\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () String)\r\n(declare-fun var_9 () String)\r\n(assert (str.in_re (str.++ \"z\" var_9) (re.* (str.to_re \"z\"))))\r\n(assert (str.in_re (str.++ \"a\" var_9) (re.+ (re.range \"a\" \"u\"))))\r\n(assert (str.in_re (str.++ \"a\" a) (re.opt (re.range \"a\" \"u\"))))\r\n(assert (not (str.in_re (str.++ \"a\" a \"za\" var_9) (re.opt (re.++ (str.to_re \"a\") (re.* (str.to_re \"z\")) (str.to_re \"a\"))))))\r\n(check-sat)\r\n[559] %\r\n```\r\nCommit: 7708874",
    "priority": 0
  },
  "258": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "259": {
    "body": "(smt.arith.solver=6) Soundness bug on QF_S  formula. smt.arith.solver=6 seems to be wrong.\r\n```\r\n[556] % z3release smt.arith.solver=6 small.smt2\r\nsat\r\n[557] % z3release smt.arith.solver=2 small.smt2\r\nunsat\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () String)\r\n(declare-fun var_9 () String)\r\n(assert (str.in_re (str.++ \"z\" var_9) (re.* (str.to_re \"z\"))))\r\n(assert (str.in_re (str.++ \"a\" var_9) (re.+ (re.range \"a\" \"u\"))))\r\n(assert (str.in_re (str.++ \"a\" a) (re.opt (re.range \"a\" \"u\"))))\r\n(assert (not (str.in_re (str.++ \"a\" a \"za\" var_9) (re.opt (re.++ (str.to_re \"a\") (re.* (str.to_re \"z\")) (str.to_re \"a\"))))))\r\n(check-sat)\r\n[559] %\r\n```\r\nCommit: 7708874",
    "priority": 0
  },
  "260": {
    "body": "(smt.arith.solver=6) Soundness bug on QF_S  formula. smt.arith.solver=6 seems to be wrong.\r\n```\r\n[556] % z3release smt.arith.solver=6 small.smt2\r\nsat\r\n[557] % z3release smt.arith.solver=2 small.smt2\r\nunsat\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () String)\r\n(declare-fun var_9 () String)\r\n(assert (str.in_re (str.++ \"z\" var_9) (re.* (str.to_re \"z\"))))\r\n(assert (str.in_re (str.++ \"a\" var_9) (re.+ (re.range \"a\" \"u\"))))\r\n(assert (str.in_re (str.++ \"a\" a) (re.opt (re.range \"a\" \"u\"))))\r\n(assert (not (str.in_re (str.++ \"a\" a \"za\" var_9) (re.opt (re.++ (str.to_re \"a\") (re.* (str.to_re \"z\")) (str.to_re \"a\"))))))\r\n(check-sat)\r\n[559] %\r\n```\r\nCommit: 7708874",
    "priority": 0
  },
  "261": {
    "body": "(smt.arith.solver=6) Soundness bug on QF_S  formula. smt.arith.solver=6 seems to be wrong.\r\n```\r\n[556] % z3release smt.arith.solver=6 small.smt2\r\nsat\r\n[557] % z3release smt.arith.solver=2 small.smt2\r\nunsat\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () String)\r\n(declare-fun var_9 () String)\r\n(assert (str.in_re (str.++ \"z\" var_9) (re.* (str.to_re \"z\"))))\r\n(assert (str.in_re (str.++ \"a\" var_9) (re.+ (re.range \"a\" \"u\"))))\r\n(assert (str.in_re (str.++ \"a\" a) (re.opt (re.range \"a\" \"u\"))))\r\n(assert (not (str.in_re (str.++ \"a\" a \"za\" var_9) (re.opt (re.++ (str.to_re \"a\") (re.* (str.to_re \"z\")) (str.to_re \"a\"))))))\r\n(check-sat)\r\n[559] %\r\n```\r\nCommit: 7708874",
    "priority": 0
  },
  "262": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "263": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "264": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "265": {
    "body": "(smt.arith.solver=6) Soundness bug on QF_S  formula. smt.arith.solver=6 seems to be wrong.\r\n```\r\n[556] % z3release smt.arith.solver=6 small.smt2\r\nsat\r\n[557] % z3release smt.arith.solver=2 small.smt2\r\nunsat\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () String)\r\n(declare-fun var_9 () String)\r\n(assert (str.in_re (str.++ \"z\" var_9) (re.* (str.to_re \"z\"))))\r\n(assert (str.in_re (str.++ \"a\" var_9) (re.+ (re.range \"a\" \"u\"))))\r\n(assert (str.in_re (str.++ \"a\" a) (re.opt (re.range \"a\" \"u\"))))\r\n(assert (not (str.in_re (str.++ \"a\" a \"za\" var_9) (re.opt (re.++ (str.to_re \"a\") (re.* (str.to_re \"z\")) (str.to_re \"a\"))))))\r\n(check-sat)\r\n[559] %\r\n```\r\nCommit: 7708874",
    "priority": 0
  },
  "266": {
    "body": "(smt.arith.solver=6) Soundness bug on QF_S  formula. smt.arith.solver=6 seems to be wrong.\r\n```\r\n[556] % z3release smt.arith.solver=6 small.smt2\r\nsat\r\n[557] % z3release smt.arith.solver=2 small.smt2\r\nunsat\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () String)\r\n(declare-fun var_9 () String)\r\n(assert (str.in_re (str.++ \"z\" var_9) (re.* (str.to_re \"z\"))))\r\n(assert (str.in_re (str.++ \"a\" var_9) (re.+ (re.range \"a\" \"u\"))))\r\n(assert (str.in_re (str.++ \"a\" a) (re.opt (re.range \"a\" \"u\"))))\r\n(assert (not (str.in_re (str.++ \"a\" a \"za\" var_9) (re.opt (re.++ (str.to_re \"a\") (re.* (str.to_re \"z\")) (str.to_re \"a\"))))))\r\n(check-sat)\r\n[559] %\r\n```\r\nCommit: 7708874",
    "priority": 0
  },
  "267": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "268": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "269": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "270": {
    "body": "Here is a refutation soundness bug in z3str3:\r\n```\r\n[548] % z3release small.smt2\r\nsat\r\n[549] % z3release smt.string_solver=z3str3 small.smt2\r\nunsat\r\n[550] % cat small.smt2\r\n(declare-fun x () String)\r\n(declare-fun y () String)\r\n(assert (str.in_re (str.++ x \"c\" y) (re.++ (re.* (str.to_re \"c\")) (re.union (str.to_re \"a\") (str.to_re \"b\")))))\r\n(check-sat)\r\n[551] %\r\n```\r\nIt would be related to https://github.com/Z3Prover/z3/issues/4590\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 02084dc",
    "priority": 0
  },
  "271": {
    "body": "Z3 gives an invalid model on this formula:\r\n```\r\n[577] % z3release model_validate=true small.smt2\r\nsat\r\n(error \"line 6 column 10: an invalid model was generated\")\r\n(model\r\n (define-fun b () String\r\n  \"\")\r\n (define-fun c () String\r\n  \"\")\r\n (define-fun a () String\r\n  \"\\x00\")\r\n)\r\n[578] %\r\n[578] % cat small.smt2\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(declare-fun c () String)\r\n(assert (str.in_re (str.substr a 0 (str.len b)) (re.opt (str.to.re \"m\"))))\r\n(assert (distinct b c))\r\n(check-sat)\r\n(get-model)\r\n[579] %\r\n```\r\nChanging the \"m\" to \"n\" could still reproduce the bug, but changing it to most of the other string constants seems to hide the bug.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 7fa5b31\r\n\r\n\r\n",
    "priority": 1
  },
  "272": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "273": {
    "body": "Here is a refutation soundness bug in z3str3:\r\n```\r\n[548] % z3release small.smt2\r\nsat\r\n[549] % z3release smt.string_solver=z3str3 small.smt2\r\nunsat\r\n[550] % cat small.smt2\r\n(declare-fun x () String)\r\n(declare-fun y () String)\r\n(assert (str.in_re (str.++ x \"c\" y) (re.++ (re.* (str.to_re \"c\")) (re.union (str.to_re \"a\") (str.to_re \"b\")))))\r\n(check-sat)\r\n[551] %\r\n```\r\nIt would be related to https://github.com/Z3Prover/z3/issues/4590\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 02084dc",
    "priority": 0
  },
  "274": {
    "body": "Here is a refutation soundness bug in z3str3:\r\n```\r\n[548] % z3release small.smt2\r\nsat\r\n[549] % z3release smt.string_solver=z3str3 small.smt2\r\nunsat\r\n[550] % cat small.smt2\r\n(declare-fun x () String)\r\n(declare-fun y () String)\r\n(assert (str.in_re (str.++ x \"c\" y) (re.++ (re.* (str.to_re \"c\")) (re.union (str.to_re \"a\") (str.to_re \"b\")))))\r\n(check-sat)\r\n[551] %\r\n```\r\nIt would be related to https://github.com/Z3Prover/z3/issues/4590\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 02084dc",
    "priority": 0
  },
  "275": {
    "body": "Here is a refutation soundness bug in z3str3:\r\n```\r\n[548] % z3release small.smt2\r\nsat\r\n[549] % z3release smt.string_solver=z3str3 small.smt2\r\nunsat\r\n[550] % cat small.smt2\r\n(declare-fun x () String)\r\n(declare-fun y () String)\r\n(assert (str.in_re (str.++ x \"c\" y) (re.++ (re.* (str.to_re \"c\")) (re.union (str.to_re \"a\") (str.to_re \"b\")))))\r\n(check-sat)\r\n[551] %\r\n```\r\nIt would be related to https://github.com/Z3Prover/z3/issues/4590\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 02084dc",
    "priority": 0
  },
  "276": {
    "body": "Here is a refutation soundness bug in z3str3:\r\n```\r\n[548] % z3release small.smt2\r\nsat\r\n[549] % z3release smt.string_solver=z3str3 small.smt2\r\nunsat\r\n[550] % cat small.smt2\r\n(declare-fun x () String)\r\n(declare-fun y () String)\r\n(assert (str.in_re (str.++ x \"c\" y) (re.++ (re.* (str.to_re \"c\")) (re.union (str.to_re \"a\") (str.to_re \"b\")))))\r\n(check-sat)\r\n[551] %\r\n```\r\nIt would be related to https://github.com/Z3Prover/z3/issues/4590\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 02084dc",
    "priority": 0
  },
  "277": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "278": {
    "body": "Refutation soundness bug on Z3 trunk. z3-4.8.8 returns the correct result which is `sat`. \r\n```\r\n[581] % z3-4.8.8 small.smt2\r\nsat\r\n[582] % z3release small.smt2\r\nunsat\r\n[583] % \r\n[583] % cat small.smt2\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(assert (= (str.substr a 0 (str.len b)) \"B\"))\r\n(assert (= (str.replace a b \"\") (str.++ \"A\" b)))\r\n(check-sat)\r\n[584] %\r\n```\r\nCommit: 395a3042623d1bbd1cd15b3c5b11c52aff4b5270\r\nOS: Ubuntu 18.04\r\n\r\nNB: Fixed",
    "priority": 1
  },
  "279": {
    "body": "Refutation soundness bug on Z3 trunk. z3-4.8.8 returns the correct result which is `sat`. \r\n```\r\n[581] % z3-4.8.8 small.smt2\r\nsat\r\n[582] % z3release small.smt2\r\nunsat\r\n[583] % \r\n[583] % cat small.smt2\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(assert (= (str.substr a 0 (str.len b)) \"B\"))\r\n(assert (= (str.replace a b \"\") (str.++ \"A\" b)))\r\n(check-sat)\r\n[584] %\r\n```\r\nCommit: 395a3042623d1bbd1cd15b3c5b11c52aff4b5270\r\nOS: Ubuntu 18.04\r\n\r\nNB: Fixed",
    "priority": 0
  },
  "280": {
    "body": "Refutation soundness bug on Z3 trunk. z3-4.8.8 returns the correct result which is `sat`. \r\n```\r\n[581] % z3-4.8.8 small.smt2\r\nsat\r\n[582] % z3release small.smt2\r\nunsat\r\n[583] % \r\n[583] % cat small.smt2\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(assert (= (str.substr a 0 (str.len b)) \"B\"))\r\n(assert (= (str.replace a b \"\") (str.++ \"A\" b)))\r\n(check-sat)\r\n[584] %\r\n```\r\nCommit: 395a3042623d1bbd1cd15b3c5b11c52aff4b5270\r\nOS: Ubuntu 18.04\r\n\r\nNB: Fixed",
    "priority": 0
  },
  "281": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 1
  },
  "282": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 1
  },
  "283": {
    "body": "Refutation soundness bug on Z3 trunk. z3-4.8.8 returns the correct result which is `sat`. \r\n```\r\n[581] % z3-4.8.8 small.smt2\r\nsat\r\n[582] % z3release small.smt2\r\nunsat\r\n[583] % \r\n[583] % cat small.smt2\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(assert (= (str.substr a 0 (str.len b)) \"B\"))\r\n(assert (= (str.replace a b \"\") (str.++ \"A\" b)))\r\n(check-sat)\r\n[584] %\r\n```\r\nCommit: 395a3042623d1bbd1cd15b3c5b11c52aff4b5270\r\nOS: Ubuntu 18.04\r\n\r\nNB: Fixed",
    "priority": 1
  },
  "284": {
    "body": "Refutation soundness bug on Z3 trunk. z3-4.8.8 returns the correct result which is `sat`. \r\n```\r\n[581] % z3-4.8.8 small.smt2\r\nsat\r\n[582] % z3release small.smt2\r\nunsat\r\n[583] % \r\n[583] % cat small.smt2\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(assert (= (str.substr a 0 (str.len b)) \"B\"))\r\n(assert (= (str.replace a b \"\") (str.++ \"A\" b)))\r\n(check-sat)\r\n[584] %\r\n```\r\nCommit: 395a3042623d1bbd1cd15b3c5b11c52aff4b5270\r\nOS: Ubuntu 18.04\r\n\r\nNB: Fixed",
    "priority": 1
  },
  "285": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "286": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 1
  },
  "287": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 1
  },
  "288": {
    "body": "The following trace shows a genuinely invalid model bug on a QF_NRA formula. \r\n```\r\n[556] % z3-4.8.8 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(model \r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun b () Real\r\n  1.0)\r\n (define-fun d () Real\r\n  (/ 1.0 4096.0))\r\n (define-fun e () Real\r\n  5.0)\r\n (define-fun a () Real\r\n  (/ 2561.0 1024.0))\r\n)\r\n[557] % z3release rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun e () Real\r\n  (/ 9232379240400289791.0 4611686016279904256.0))\r\n (define-fun a () Real\r\n  (- (/ 2143289343.0 2147483648.0)))\r\n (define-fun c () Real\r\n  (/ 1.0 8.0))\r\n (define-fun d () Real\r\n  (/ 50440315803061452800000000.0 631185189288030893469201889.0))\r\n (define-fun b () Real\r\n  1.0)\r\n)\r\n[558] % \r\n[558] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (> (* d (+ (- 117.293372755 c) (* (- (- b 117.293372755) e) \r\n(* (- (- b) e) (- (- b) e))))) (+ e (* (- a e) (- a (* c (* c c)))))))\r\n(assert (>= b 0))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n[559] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3b11493\r\nDoes not repro in 6ced699",
    "priority": 0
  },
  "289": {
    "body": "Hi,\r\nFor this case, z3 throws out a \"failed to verify\"\r\n```\r\n[653] % z3-4.8.7 small.smt2\r\nsat\r\nsat\r\n[654] % z3-4.8.8 small.smt2\r\nsat\r\nsat\r\nfailed to verify: (= s!0 (and a c))\r\nevaluated to (= s!0 (and a c))\r\n(params keep_cardinality_constraints true pb.solver solver)\r\nd |-> 0\r\ne |-> 1\r\ng |-> 2\r\nf |-> 4\r\na |-> 5\r\nc |-> 6\r\nb |-> 11\r\ns!0 |-> 25\r\n[655] % z3release small.smt2\r\nsat\r\nsat\r\nfailed to verify: (= s!0 (and a c))\r\nevaluated to (= s!0 (and a c))\r\n(params keep_cardinality_constraints true pb.solver solver)\r\nd |-> 0\r\ne |-> 1\r\ng |-> 2\r\nf |-> 4\r\na |-> 5\r\nc |-> 6\r\nb |-> 11\r\ns!0 |-> 25\r\n[656] % \r\n[656] % cat small.smt2\r\n(set-logic QF_BV)\r\n(set-option :rlimit 1000)\r\n(set-option :model_validate true)\r\n(declare-fun a () Bool)\r\n(declare-fun b () Bool)\r\n(declare-fun c () Bool)\r\n(declare-fun d () Bool)\r\n(declare-fun e () Bool)\r\n(declare-fun f () Bool)\r\n(declare-fun g () Bool)\r\n(assert\r\n (or\r\n (and (not (and (or (or (or (and g e))))))\r\n  (or\r\n  (and (not (not (or (and a c) (and f))))\r\n   (and (and (or (or d g)))))\r\n  (and (or (and (not (or b f))) (and (and (not d)) (or (not c) (not e))))\r\n   (or (not (not (or f))) (or (or (and e a))))))\r\n  (not (or (not (or d)))))\r\n (and\r\n  (and\r\n  (and\r\n   (and (not a)\r\n   (not (and f (or (or (or (or (and c) (not (not false))) e)))))))))))\r\n(push)\r\n(check-sat (and a c))\r\n(check-sat)\r\n[657] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: d1d1411",
    "priority": 1
  },
  "290": {
    "body": "\n```\n[747] % z3debug small.smt2\nsat\n(error \"line 9 column 55: an invalid model was generated\")\n[748] % z3release small.smt2\nsat\n[749] % \n[749] % cat small.smt2\n(set-option :rlimit 254)\n(set-option :proof true)\n(set-option :model_validate true)\n(set-option :rewriter.arith_lhs true)\n(declare-fun a () Int)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(assert (<= (- 0 a a) (- 0 (+ 1)) (+ 0 (+ 2) b) (- (- 0 2) b c)))\n(check-sat-using (then purify-arith ctx-simplify qflra))\n[750] %\n```\nOS: Ubuntu 18.04\nCommit: d1d1411\n",
    "priority": 1
  },
  "291": {
    "body": "\n```\n[624] % cvc4 --strings-exp --incremental --produce-models small.smt2\nsat\n(model\n(define-fun a () String \"abc\")\n)\nsat\n[625] % z3debug small.smt2\nunknown\n(error \"line 8 column 10: max. resource limit exceeded\")\nunknown\nSegmentation fault\n[626] % z3release small.smt2\nunknown\n(error \"line 8 column 10: max. resource limit exceeded\")\nSegmentation fault\n[627] % z3san small.smt2\nunknown\n(error \"line 8 column 10: max. resource limit exceeded\")\nASAN:DEADLYSIGNAL\n=================================================================\n==7686==ERROR: AddressSanitizer: SEGV on unknown address 0x000040000003 (pc 0x55b441b35e40 bp 0x7ffc8e942ef0 sp 0x7ffc8e942cb0 T0)\n==7686==The signal is caused by a READ memory access.\n  #0 0x55b441b35e3f in dependency_manager<scoped_dependency_manager<smt::theory_seq::assumption>::config>::dependency::is_marked() const ../src/util/dependency.h:42\n  #1 0x55b441b35e3f in dependency_manager<scoped_dependency_manager<smt::theory_seq::assumption>::config>::linearize(dependency_manager<scoped_dependency_manager<smt::theory_seq::assumption>::config>::dependency*, vector<smt::theory_seq::assumption, false, unsigned int>&) ../src/util/dependency.h:212\n  #2 0x55b441b35e3f in scoped_dependency_manager<smt::theory_seq::assumption>::linearize(dependency_manager<scoped_dependency_manager<smt::theory_seq::assumption>::config>::dependency*, vector<smt::theory_seq::assumption, false, unsigned int>&) ../src/util/dependency.h:305\n  #3 0x55b441b35e3f in smt::theory_seq::linearize(dependency_manager<scoped_dependency_manager<smt::theory_seq::assumption>::config>::dependency*, svector<std::pair<smt::enode*, smt::enode*>, unsigned int>&, svector<smt::literal, unsigned int>&) const ../src/smt/theory_seq.cpp:748\n  #4 0x55b441b6175e in smt::theory_seq::propagate_eq(dependency_manager<scoped_dependency_manager<smt::theory_seq::assumption>::config>::dependency*, smt::enode*, smt::enode*) ../src/smt/theory_seq.cpp:814\n  #5 0x55b441b6314f in smt::theory_seq::simplify_eq(ref_vector<expr, ast_manager>&, ref_vector<expr, ast_manager>&, dependency_manager<scoped_dependency_manager<smt::theory_seq::assumption>::config>::dependency*) ../src/smt/theory_seq.cpp:947\n  #6 0x55b44202742f in smt::theory_seq::solve_eq(unsigned int) ../src/smt/seq_eq_solver.cpp:59\n  #7 0x55b442027a92 in smt::theory_seq::solve_eqs(unsigned int) ../src/smt/seq_eq_solver.cpp:33\n  #8 0x55b441b642b9 in smt::theory_seq::new_eq_eh(dependency_manager<scoped_dependency_manager<smt::theory_seq::assumption>::config>::dependency*, smt::enode*, smt::enode*) ../src/smt/theory_seq.cpp:3146\n  #9 0x55b441b66431 in smt::theory_seq::propagate_eq(dependency_manager<scoped_dependency_manager<smt::theory_seq::assumption>::config>::dependency*, svector<smt::literal, unsigned int> const&, expr*, expr*, bool) ../src/smt/theory_seq.cpp:2957\n  #10 0x55b441b6b43e in smt::theory_seq::propagate_eq(smt::literal, expr*, expr*, bool) ../src/smt/theory_seq.cpp:2939\n  #11 0x55b441b6fa66 in smt::theory_seq::assign_eh(int, bool) ../src/smt/theory_seq.cpp:3052\n  #12 0x55b441518667 in smt::context::propagate_atoms() ../src/smt/smt_context.cpp:1335\n  #13 0x55b441523c35 in smt::context::propagate() ../src/smt/smt_context.cpp:1690\n  #14 0x55b4415252a2 in smt::context::push() ../src/smt/smt_context.cpp:2855\n  #15 0x55b442a13dec in solver_na2as::push() ../src/solver/solver_na2as.cpp:88\n  #16 0x55b44296ce82 in cmd_context::push() ../src/cmd_context/cmd_context.cpp:1361\n  #17 0x55b44296d88a in cmd_context::push(unsigned int) ../src/cmd_context/cmd_context.cpp:1375\n  #18 0x55b44289a9c7 in smt2::parser::parse_push() ../src/parsers/smt2/smt2parser.cpp:2523\n  #19 0x55b44289a9c7 in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:2941\n  #20 0x55b44289a9c7 in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3129\n  #21 0x55b442851e95 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3178\n  #22 0x55b43feffad6 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:90\n  #23 0x55b43feb82ee in main ../src/shell/main.cpp:352\n  #24 0x7fed609f9b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #25 0x55b43fecc5f9 in _start (/local/suz-local/software/z3san/build-05212020212726-18bb90f/z3+0x2135f9)\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../src/util/dependency.h:42 in dependency_manager<scoped_dependency_manager<smt::theory_seq::assumption>::config>::dependency::is_marked() const\n==7686==ABORTING\n[628] % \n[628] % cat small.smt2\n(set-logic QF_S)\n(set-option :rlimit 600)\n(declare-fun a () String)\n(assert (= (str.len a) 3))\n(push)\n(assert (= 0 (str.indexof a \"abc\" 0)))\n(check-sat)\n(get-model)\n(pop)\n(assert (= 0 (str.indexof a \"abc\" 0)))\n(push)\n(check-sat)\n[629] %\n```\nOS: Ubuntu 18.04\nCommit: b7d7ff3\n",
    "priority": 1
  },
  "292": {
    "body": "\n```\n[575] % for f in $(seq 1 100); do z3release model_validate=true rewriter.flat=false smt.threads=8 small.smt2; done\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nunknown\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nunknown\nsat\nsat\nunknown\nunknown\nsat\nsat\nsat\n(error \"line 25 column 10: an invalid model was generated\")\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nunknown\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nunknown\nsat\nsat\nsat\nsat\nunknown\nsat\nsat\nsat\nsat\nsat\nsat\n(error \"line 25 column 10: an invalid model was generated\")\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nunknown\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nunknown\nsat\nsat\nsat\nunknown\nunknown\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nsat\nunknown\nsat\n[576] % \n[576] % cat small.smt2\n(declare-fun b () Real)\n(declare-fun Jsnkj_new () Real)\n(declare-fun t () Real)\n(declare-fun f () Real)\n(declare-fun g () Real)\n(declare-fun i () Real)\n(declare-fun j () Real)\n(declare-fun l () Real)\n(declare-fun k () Real)\n(declare-fun m () Real)\n(declare-fun n () Real)\n(declare-fun o () Real)\n(declare-fun t17uscore0dollarskuscore1_shifted () Real)\n(assert (not (=> (or (=> (< 0.0) (or (<= 0.0 (+ (- k))) (<= m n 40\n  (div 249 b i)))) (< (+ (+ g (mod 0 (* 2.0))) (/ (+ (- (- j) (-\n  Jsnkj_new l)) 1.0) (+ (+ (* (div 113)) (- t m))))) (+ 37 f o)) (<=\n  0.0 (- t m)) (< 0.0 (- Jsnkj_new l)) (< 0.0 (div 63 b i))) (< (- f\n  o) (/ (- 1 2) (+ (/ t17uscore0dollarskuscore1_shifted (- t m)))))\n  (< (- (+ (* (- l) t17uscore0dollarskuscore1_shifted) g) (div (* (+\n  (* l t17uscore0dollarskuscore1_shifted) (- t m)) (+ (* (/ (- 1.0)\n  (/ 117 Jsnkj_new l)) t17uscore0dollarskuscore1_shifted) (- t m)))\n  (* 2.0 (- Jsnkj_new)))) (- 11)))))\n(check-sat)\n[577] %\n```\nOS: Ubuntu 18.04\nCommit: b7d7ff3\n",
    "priority": 0
  },
  "293": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :proof true)\n(set-option :rlimit 256)\n(set-option :smt.arith.solver 3)\n(set-option :rewriter.cache_all true)\n(assert (forall ((a Int)) (= a (- 1))))\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/qe/qsat.cpp\nLine: 174\nm.is_true(val)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 18bb90f\n",
    "priority": 1
  },
  "294": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :smt.phase_selection 0)\n(set-option :rlimit 630)\n(set-option :rewriter.cache_all true)\n(assert (forall ((a Int) (b Int)) (exists ((x Int)) (< a (* 20 x) b))))\n(check-sat-using qe2)\n```\nZ3  throws out an assertion violation:\n```\nFailed to verify: a.is_numeral(val, r)\nASSERTION VIOLATION\nFile: ../src/qe/qe_arith.cpp\nLine: 348\nUNREACHABLE CODE WAS REACHED.\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 18bb90f\n",
    "priority": 1
  },
  "295": {
    "body": "Hi,\nFor this case, Z3  throws out a segmentation fault:\n```\n[622] % z3debug small.smt2\nSegmentation fault\n[623] % z3release small.smt2\nSegmentation fault\n[624] % z3san small.smt2\nASAN:DEADLYSIGNAL\n=================================================================\n==7796==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x55d5d8746f50 bp 0x7ffd196cb5d0 sp 0x7ffd196cb530 T0)\n==7796==The signal is caused by a READ memory access.\n==7796==Hint: address points to the zero page.\n  #0 0x55d5d8746f4f in model::operator()(expr*) ../src/model/model.cpp:520\n  #1 0x55d5d8746f4f in model::is_true(expr*) ../src/model/model.cpp:538\n  #2 0x55d5d5f17d33 in spacer::context::handle_unknown(spacer::pob&, datalog::rule const*, model&) ../src/muz/spacer/spacer_context.cpp:3427\n  #3 0x55d5d5f522ea in spacer::context::expand_pob(spacer::pob&, sref_buffer<spacer::pob, 16u>&) ../src/muz/spacer/spacer_context.cpp:3494\n  #4 0x55d5d5f56272 in spacer::context::check_reachability() ../src/muz/spacer/spacer_context.cpp:3204\n  #5 0x55d5d5f5e6de in spacer::context::solve_core(unsigned int) ../src/muz/spacer/spacer_context.cpp:3023\n  #6 0x55d5d5f5f58c in spacer::context::solve(unsigned int) ../src/muz/spacer/spacer_context.cpp:2720\n  #7 0x55d5d5ef7538 in spacer::dl_interface::query(expr*) ../src/muz/spacer/spacer_dl_interface.cpp:167\n  #8 0x55d5d6724e9d in datalog::context::query(expr*) ../src/muz/base/dl_context.cpp:880\n  #9 0x55d5d5e316ed in horn_tactic::imp::verify(expr*, ref<goal> const&, sref_buffer<goal, 16u>&, ref<model_converter>&, ref<proof_converter>&) ../src/muz/fp/horn_tactic.cpp:255\n  #10 0x55d5d5e316ed in horn_tactic::imp::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/muz/fp/horn_tactic.cpp:241\n  #11 0x55d5d86756f8 in cleanup_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:937\n  #12 0x55d5d863fe4a in exec(tactic&, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactic.cpp:150\n  #13 0x55d5d864214d in check_sat(tactic&, ref<goal>&, ref<model>&, labels_vec&, obj_ref<app, ast_manager>&, obj_ref<dependency_manager<ast_manager::expr_dependency_config>::dependency, ast_manager>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) ../src/tactic/tactic.cpp:170\n  #14 0x55d5d84ad9c8 in check_sat_core2 ../src/solver/tactic2solver.cpp:185\n  #15 0x55d5d84ccb67 in solver_na2as::check_sat_core(unsigned int, expr* const*) ../src/solver/solver_na2as.cpp:67\n  #16 0x55d5d84e0394 in combined_solver::check_sat_core(unsigned int, expr* const*) ../src/solver/combined_solver.cpp:246\n  #17 0x55d5d84bb761 in solver::check_sat(unsigned int, expr* const*) ../src/solver/solver.cpp:330\n  #18 0x55d5d8436170 in cmd_context::check_sat(unsigned int, expr* const*) ../src/cmd_context/cmd_context.cpp:1549\n  #19 0x55d5d83518b3 in smt2::parser::parse_check_sat() ../src/parsers/smt2/smt2parser.cpp:2595\n  #20 0x55d5d83518b3 in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:2937\n  #21 0x55d5d83518b3 in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3129\n  #22 0x55d5d8308e95 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3178\n  #23 0x55d5d59b6ad6 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:90\n  #24 0x55d5d596f2ee in main ../src/shell/main.cpp:352\n  #25 0x7f98652d2b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #26 0x55d5d59835f9 in _start (/local/suz-local/software/z3san/build-05212020212726-18bb90f/z3+0x2135f9)\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../src/model/model.cpp:520 in model::operator()(expr*)\n==7796==ABORTING\n[625] % \n[625] % cat small.smt2\n(set-logic HORN)\n(set-option :rlimit 610)\n(set-option :rewriter.elim_and true)\n(assert (forall ((a Int) (b Int)) (or (< a (mod b 2)) (forall ((c Int)) (> c b a)))))\n(check-sat)\n[626] %\n```\n\nOS: Ubuntu 18.04\nCommit: 18bb90f\n",
    "priority": 1
  },
  "296": {
    "body": "Files t1 and t2 show two related crashes in Z3 debug built.\r\n```\r\n[591] % z3debug t1.smt2\r\nunsat\r\nASSERTION VIOLATION\r\nFile: ../src/cmd_context/cmd_context_to_goal.cpp\r\nLine: 34\r\nctx.assertions().size() == ctx.assertion_names().size()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[592] % z3release t1.smt2\r\nunsat\r\nSegmentation fault\r\n[593] % z3san t1.smt2\r\nunsat\r\nASAN:DEADLYSIGNAL\r\n=================================================================\r\n==13574==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x563399d7eeac bp 0x7ffc68dbeca0 sp 0x7ffc68dbea80 T0)\r\n==13574==The signal is caused by a READ memory access.\r\n==13574==Hint: address points to the zero page.\r\n  #0 0x563399d7eeab in assert_exprs_from(cmd_context const&, goal&) ../src/cmd_context/cmd_context_to_goal.cpp:36\r\n  #1 0x563399d3cc47 in check_sat_using_tactict_cmd::execute(cmd_context&) ../src/cmd_context/tactic_cmds.cpp:205\r\n  #2 0x563399cd00d8 in smt2::parser::parse_ext_cmd(int, int) ../src/parsers/smt2/smt2parser.cpp:2894\r\n  #3 0x563399cd712c in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:3000\r\n  #4 0x563399cd712c in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3129\r\n  #5 0x563399c8e885 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3178\r\n  #6 0x56339734fd36 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:90\r\n  #7 0x56339730854e in main ../src/shell/main.cpp:352\r\n  #8 0x7f4faec3db96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\r\n  #9 0x56339731c859 in _start (/local/suz-local/software/z3san/build-05212020125809-ed92b84/z3+0x213859)\r\nAddressSanitizer can not provide additional info.\r\nSUMMARY: AddressSanitizer: SEGV ../src/cmd_context/cmd_context_to_goal.cpp:36 in assert_exprs_from(cmd_context const&, goal&)\r\n==13574==ABORTING\r\n[594] %\r\n[594] % cat t1.smt2\r\n(set-option :unsat_core true)\r\n(set-option :produce-unsat-cores false)\r\n(assert false)\r\n(set-option :rlimit 10)\r\n(check-sat)\r\n(check-sat-using fix-dl-var)\r\n[595] %\r\n[595] % z3debug t2.smt2\r\nunsat\r\nASSERTION VIOLATION\r\nFile: ../src/cmd_context/cmd_context_to_goal.cpp\r\nLine: 43\r\nctx.assertion_names().empty()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[596] % z3release t2.smt2\r\nunsat\r\nunsat\r\n[597] % z3san t2.smt2\r\nunsat\r\nunsat\r\n[598] %\r\n[598] % cat t2.smt2\r\n(set-option :unsat_core false)\r\n(set-option :produce-unsat-cores true)\r\n(assert false)\r\n(set-option :rlimit 10)\r\n(check-sat)\r\n(check-sat-using fix-dl-var)\r\n[599] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: ed92b84\r\n",
    "priority": 1
  },
  "297": {
    "body": "Hi,\r\nFor this case, Z3  gives an invalid model:\r\n```\r\n[653] % cvc4 -q --produce-models small.smt2\r\nsat\r\n(model\r\n(define-fun a () String \"\\u{0}\")\r\n)\r\n[654] % z3 smt.string_solver=z3str3 model_validate=true small.smt2\r\nsat\r\n(error \"line 3 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun a () String\r\n  \"?\")\r\n)\r\n[655] % \r\n[655] % cat small.smt2\r\n(declare-fun a () String)\r\n(assert (= (str.to_code a) 0))\r\n(check-sat)\r\n(get-model)\r\n[656] %\r\n```\r\nIt could be related to  https://github.com/Z3Prover/z3/issues/4409.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 1729232\r\n",
    "priority": 0
  },
  "298": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :proof true)\n(set-option :smt.arith.solver 3)\n(set-option :rewriter.expand_nested_stores true)\n(declare-fun b ((Array Int (Array Int Real)) Int) Bool)\n(declare-fun c () Int)\n(declare-fun d () Real)\n(declare-fun e () (Array Int (Array Int Real)))\n(declare-fun f () (Array Int (Array Int Real)))\n(declare-fun g () (Array Int (Array Int Real)))\n(declare-fun h () (Array Int (Array Int Real)))\n(declare-fun k () (Array Int (Array Int Real)))\n(assert\n (forall ((a (Array Int (Array Int Real))))\n (distinct (b a c)\n  (exists ((i Int) (j Int))\n  (or true (> c (select (a j) i)))))))\n(assert (b e c))\n(assert (= f (store e 0 (store (select e 44) 3 d))))\n(assert (= g (store f 8 (store (select f (- 1)) 0 1))))\n(assert (distinct h (store g 9 (store (select g 0) 8 2)) k))\n(check-sat-using (then purify-arith qfnra))\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ast/ast.cpp\nLine: 3103\nis_or(f1)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 1729232\n",
    "priority": 0
  },
  "299": {
    "body": "Hi,\nFor this case, Z3  throws out a segmentation fault:\n```\n[576] % z3release small.smt2\nsat\n[577] % z3debug smt.string_solver=z3str3 small.smt2\nSegmentation fault\n[578] % z3release smt.string_solver=z3str3 small.smt2\nSegmentation fault\n[579] % z3san smt.string_solver=z3str3 small.smt2\nASAN:DEADLYSIGNAL\n=================================================================\n==16389==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000004 (pc 0x56103c6921fe bp 0x7ffd15509bd0 sp 0x7ffd15509b90 T0)\n==16389==The signal is caused by a READ memory access.\n==16389==Hint: address points to the zero page.\n  #0 0x56103c6921fd in ast::get_kind() const ../src/ast/ast.h:505\n  #1 0x56103c6921fd in is_app_of(expr const*, int, int) ../src/ast/ast.h:1374\n  #2 0x56103c6921fd in bv_recognizers::is_numeral(expr const*, rational&, unsigned int&) const ../src/ast/bv_decl_plugin.cpp:784\n  #3 0x56103c5e8d04 in seq_util::is_const_char(expr*, unsigned int&) const ../src/ast/seq_decl_plugin.cpp:1135\n  #4 0x56103a77395d in smt::theory_str::aut_path_rewrite_constraint(expr*, expr*) ../src/smt/theory_str_regex.cpp:1379\n  #5 0x56103a785eaa in smt::theory_str::generate_regex_path_constraints(expr*, automaton<sym_expr, sym_expr_manager>*, rational, obj_ref<expr, ast_manager>&) ../src/smt/theory_str_regex.cpp:1555\n  #6 0x56103a794a1b in smt::theory_str::solve_regex_automata() ../src/smt/theory_str_regex.cpp:211\n  #7 0x56103a31782a in smt::theory_str::final_check_eh() ../src/smt/theory_str.cpp:8577\n  #8 0x561039dd8974 in smt::context::final_check() ../src/smt/smt_context.cpp:3874\n  #9 0x561039de8096 in smt::context::bounded_search() ../src/smt/smt_context.cpp:3790\n  #10 0x561039de8997 in smt::context::search() ../src/smt/smt_context.cpp:3614\n  #11 0x561039deaa21 in smt::context::check(unsigned int, expr* const*, bool) ../src/smt/smt_context.cpp:3497\n  #12 0x561039deb6f1 in smt::context::setup_and_check(bool) ../src/smt/smt_context.cpp:3433\n  #13 0x561039a0b08f in smt_tactic::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/smt/tactic/smt_tactic.cpp:201\n  #14 0x56103b47fc87 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:122\n  #15 0x56103b4726f1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1053\n  #16 0x56103b4726f1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1053\n...\nSUMMARY: AddressSanitizer: SEGV ../src/ast/ast.h:505 in ast::get_kind() const\n==16389==ABORTING\n[580] % \n[580] % cat small.smt2\n(set-logic QF_S)\n(declare-fun a () String)\n(assert (str.in_re a (re.range \"a\" \"z\")))\n(assert (str.in_re (str.++ a \"b\") (re.comp (re.range \"a\" \"z\"))))\n(check-sat)\n[581] %\n```\n\nOS: Ubuntu 18.04\nCommit: f2d3160\n",
    "priority": 1
  },
  "300": {
    "body": "Hi,\nFor this case, Z3  throws out a segmentation fault:\n```\n[511] % z3 small.smt2\nsat\n[512] % z3 smt.string_solver=z3str3 small.smt2\nSegmentation fault\n[513] % \n[513] % cat small.smt2\n(declare-fun a () String)\n(declare-fun b () String)\n(declare-fun c () String)\n(declare-fun d () String)\n(declare-fun e () String)\n(declare-fun f () String)\n(declare-fun g () String)\n(declare-fun h () String)\n(declare-fun i () String)\n(assert (= c (str.++ a b)))\n(assert (= d \"b\"))\n(assert (= f (str.++ c d)))\n(assert (distinct \"c\"))\n(assert (= g (str.++ f e)))\n(assert (distinct h \"ab\"))\n(assert (= i (str.++ g h)))\n(assert (str.in.re i (str.to.re \"abc\")))\n(check-sat)\n[514] %\n```\n\nOS: Ubuntu 18.04\nCommit: f2d3160\n",
    "priority": 1
  },
  "301": {
    "body": "\n```\n[541] % z3 small.smt2\n(smt.diff_logic: non-diff logic expression (+ y (str.indexof (seq.idx.right (seq.unit #x42) x y) x 0)))\nunknown\n[542] % z3 smt.string_solver=z3str3 small.smt2\n(smt.diff_logic: non-diff logic expression (+ (str.len t0!tmp2) (str.len t1!tmp3)))\nASSERTION VIOLATION\nFile: ../src/smt/arith_eq_adapter.cpp\nLine: 84\nn1 != n2\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[543] % \n[543] % cat small.smt2\n(set-option :smt.arith.solver 1)\n(declare-fun x () String)\n(declare-fun y () Int)\n(assert (distinct (str.substr x 1 (str.indexof \"B\" x y)) \"\"))\n(check-sat)\n[544] %\n```\n\nOS: Ubuntu 18.04\nCommit: 0f8f886\n",
    "priority": 0
  },
  "302": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :smt.clause_proof true)\n(set-option :smt.arith.solver 1)\n(declare-fun a () String)\n(assert (= a \"A\"))\n(check-sat-using (then qflra qfufbv_ackr ufbv default))\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ackermannization/ackr_model_converter.cpp\nLine: 49\n!fixed_model || md.get() == 0 || (!md->get_num_constants() && !md->get_num_functions())\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 0f8f886\n",
    "priority": 0
  },
  "303": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(set-option :proof true)\r\n(declare-fun a () String)\r\n(assert (= (str.replace \"B\" (str.replace \"\" a \"A\") \"\") (str.replace \"B\" a \"\")))\r\n(check-sat)\r\n```\r\nZ3 smt.string_solver=z3str3  throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_context.cpp\r\nLine: 2954\r\n!m_all_th_case_split_literals.contains(l.index())\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nThis crashes at the same location as https://github.com/Z3Prover/z3/issues/4348, but the code paths (and the formulas) seem different.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 0f8f886\r\n",
    "priority": 1
  },
  "304": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :smt.str.fixed_length_naive_cex false)\n(declare-fun a () String)\n(assert (= (str.at (str.substr (str.substr (str.substr a 1 (- (str.len a) 1))\n 1 (- (str.len (str.substr a 1 (- (str.len a) 1))) 1)) 0 (- (-\n (str.len (str.substr (str.substr a 1 (- (str.len a) 1)) 1 (-\n (str.len (str.substr a 1 (- (str.len a) 1))) 1))) 1) 0)) 0) \"a\"))\n(assert (not (= (str.at (str.substr (str.substr a 1 (- (str.len a) 1))\n 1 (- (str.len (str.substr a 1 (- (str.len a) 1))) 1)) 0) \"a\")))\n(check-sat)\n```\nZ3 smt.string_solver=z3str3 throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/smt/smt_internalizer.cpp\nLine: 1056\nb_internalized(n)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 0f8f886\n",
    "priority": 0
  },
  "305": {
    "body": "Hi,\r\nFor this case, Z3  gives an invalid model error on a valid model:\r\n```\r\n[748] % z3 model_validate=true small.smt2\r\nsat\r\nsat\r\n[749] % z3 smt.string_solver=z3str3 model_validate=true small.smt2\r\nsat\r\nsat\r\n(error \"line 11 column 44: an invalid model was generated\")\r\n[750] % \r\n[750] % cat small.smt2\r\n(declare-fun a () Int)\r\n(declare-fun b () Int)\r\n(declare-fun c () Int)\r\n(declare-fun d () Int)\r\n(declare-fun e () Int)\r\n(declare-fun f () Int)\r\n(declare-fun g () Int)\r\n(assert (forall ((f Int)) (not (= (div a e) (mod c f) d))))\r\n(assert (= b (mod f g)))\r\n(check-sat)\r\n(check-sat-using (then purify-arith aufnira))\r\n[751] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: e525543\r\n",
    "priority": 0
  },
  "306": {
    "body": "Hi,\nFor this case, Z3  gives an invalid model:\n```\n[670] % z3release model_validate=true small.smt2\nunknown\n[671] % z3release smt.string_solver=z3str3 model_validate=true small.smt2\nsat\n(error \"line 5 column 10: an invalid model was generated\")\n[672] % \n[672] % cat small.smt2\n(set-option :smt.phase_selection 5)\n(set-option :smt.random_seed 14)\n(declare-fun x () Int)\n(assert (= (str.to_int (str.from_code x)) x))\n(check-sat)\n[673] %\n```\n\nOS: Ubuntu 18.04\nCommit: 6e55880\n",
    "priority": 1
  },
  "307": {
    "body": "Hi,\nFor this case, Z3  throws out a segmentation fault:\n```\n[503] % z3debug small.smt2\nunknown\n[504] % z3debug smt.string_solver=z3str3 small.smt2\nSegmentation fault\n[505] % z3release smt.string_solver=z3str3 small.smt2\nSegmentation fault\n[506] % z3san smt.string_solver=z3str3 small.smt2\nASAN:DEADLYSIGNAL\n=================================================================\n==2450==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x55ff78c7123f bp 0x7ffdac4f0640 sp 0x7ffdac4f01f0 T0)\n==2450==The signal is caused by a READ memory access.\n==2450==Hint: address points to the zero page.\n  #0 0x55ff78c7123e in automaton<sym_expr, sym_expr_manager>::compress() ../src/math/automata/automaton.h:349\n  #1 0x55ff78ea6964 in smt::theory_str::solve_regex_automata() ../src/smt/theory_str_regex.cpp:280\n  #2 0x55ff78a2f33a in smt::theory_str::final_check_eh() ../src/smt/theory_str.cpp:8577\n  #3 0x55ff784f0464 in smt::context::final_check() ../src/smt/smt_context.cpp:3874\n  #4 0x55ff784ffb86 in smt::context::bounded_search() ../src/smt/smt_context.cpp:3790\n  #5 0x55ff78500487 in smt::context::search() ../src/smt/smt_context.cpp:3614\n  #6 0x55ff78502511 in smt::context::check(unsigned int, expr* const*, bool) ../src/smt/smt_context.cpp:3497\n  #7 0x55ff785031e1 in smt::context::setup_and_check(bool) ../src/smt/smt_context.cpp:3433\n  #8 0x55ff78124bff in smt_tactic::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/smt/tactic/smt_tactic.cpp:201\n  #9 0x55ff79b96fb7 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #10 0x55ff79b89a21 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #11 0x55ff79b89a21 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #12 0x55ff79b89a21 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #13 0x55ff79b89a21 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #14 0x55ff79b89a21 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #15 0x55ff79b89a21 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #16 0x55ff79b89a21 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #17 0x55ff79b89a21 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #18 0x55ff79b89a21 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #19 0x55ff79b89a21 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #20 0x55ff79b89a21 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #21 0x55ff79b89a21 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #22 0x55ff79b96fb7 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #23 0x55ff79b52a0a in exec(tactic&, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactic.cpp:150\n  #24 0x55ff79b54d0d in check_sat(tactic&, ref<goal>&, ref<model>&, labels_vec&, obj_ref<app, ast_manager>&, obj_ref<dependency_manager<ast_manager::expr_dependency_config>::dependency, ast_manager>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) ../src/tactic/tactic.cpp:170\n  #25 0x55ff799c0588 in check_sat_core2 ../src/solver/tactic2solver.cpp:185\n  #26 0x55ff799df727 in solver_na2as::check_sat_core(unsigned int, expr* const*) ../src/solver/solver_na2as.cpp:67\n  #27 0x55ff799f2f54 in combined_solver::check_sat_core(unsigned int, expr* const*) ../src/solver/combined_solver.cpp:246\n  #28 0x55ff799ce321 in solver::check_sat(unsigned int, expr* const*) ../src/solver/solver.cpp:330\n  #29 0x55ff79948d30 in cmd_context::check_sat(unsigned int, expr* const*) ../src/cmd_context/cmd_context.cpp:1549\n  #30 0x55ff798644b3 in smt2::parser::parse_check_sat() ../src/parsers/smt2/smt2parser.cpp:2595\n  #31 0x55ff798644b3 in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:2937\n  #32 0x55ff798644b3 in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3129\n  #33 0x55ff7981ba95 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3178\n  #34 0x55ff76ed5606 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #35 0x55ff76e8de6e in main ../src/shell/main.cpp:352\n  #36 0x7fbe788fab96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #37 0x55ff76ea2179 in _start (/local/suz-local/software/z3san/build-05172020210850-1c760b0/z3+0x213179)\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../src/math/automata/automaton.h:349 in automaton<sym_expr, sym_expr_manager>::compress()\n==2450==ABORTING\n[507] %\n[507] % cat small.smt2\n(assert (str.in.re \"\" (re.loop (str.to.re \"\") (- 1))))\n(check-sat)\n[508] %\n```\n\nOS: Ubuntu 18.04\nCommit: 1c760b0\n",
    "priority": 0
  },
  "308": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :smt.arith.solver 1)\n(declare-fun a () String)\n(assert (str.in.re a (re.* (str.to.re \"a\"))))\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/smt/theory_diff_logic_def.h\nLine: 977\n(asgn == l_true) == a->is_true()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n```\n\nOS: Ubuntu 18.04\nCommit: 1c760b0\n",
    "priority": 0
  },
  "309": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :smt.arith.solver 2)\n(set-option :smt.phase_selection 1)\n(set-option :smt.random_seed 4)\n(set-option :smt.arith.random_initial_value true)\n(set-option :rewriter.arith_lhs true)\n(set-option :smt.str.fixed_length_naive_cex false)\n(declare-fun x () String)\n(declare-fun y () String)\n(assert (distinct (str.replace (str.replace x y x) x y) x))\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/smt/theory_str.cpp\nLine: 9016\nUNREACHABLE CODE WAS REACHED.\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: fc8dfe3\n",
    "priority": 0
  },
  "310": {
    "body": "Hi,\nFor this formula:\n```\n(assert (= \"\" (str.replace_all \"\" \"\" \"\")))\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ast/seq_decl_plugin.cpp\nLine: 919\nUNREACHABLE CODE WAS REACHED.\nZ3 4.8.9.0\nPlease file an issue with this message and more detail about how you encountered it at https://github.com/Z3Prover/z3/issues/new\n```\n\nOS: Ubuntu 18.04\nCommit: fc8dfe3\n",
    "priority": 1
  },
  "311": {
    "body": "Hi,\r\nFor this formula, Z3  throws out an assertion violation:\r\n```\r\n[617] % z3release smt.string_solver=z3str3 small.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.cpp\r\nLine: 431\r\nUNREACHABLE CODE WAS REACHED.\r\nZ3 4.8.9.0\r\nPlease file an issue with this message and more detail about how you encountered it at https://github.com/Z3Prover/z3/issues/new\r\n[618] % \r\n[618] % z3debug smt.string_solver=z3str3 small.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 492\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[619] % \r\n[619] % cat small.smt2\r\n(set-option :rewriter.arith_ineq_lhs true)\r\n(set-option :smt.str.fixed_length_naive_cex false)\r\n(declare-fun a () Bool)\r\n(declare-fun b () Bool)\r\n(declare-fun c () Bool)\r\n(declare-fun d () String)\r\n(declare-fun e () String)\r\n(declare-fun f () Bool)\r\n(declare-fun g () String)\r\n(declare-fun h () Bool)\r\n(declare-fun i () Bool)\r\n(declare-fun j () Bool)\r\n(declare-fun aa () Bool)\r\n(assert (not (= \"\" (str.substr d 0 (str.len e)))))\r\n(assert (= i (= \"-\" (str.substr d 0 (str.len e)))))\r\n(assert (= (= b f) (= \"-\" e)))\r\n(assert (= j (= b c)))\r\n(assert (= aa (= \"\" (str.substr d 0 (str.len e)))))\r\n(assert (= a (= h f)))\r\n(assert b)\r\n(assert (= d (str.++ e g)))\r\n(check-sat-using (then dom-simplify ctx-solver-simplify))\r\n[620] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: fc8dfe3\r\n",
    "priority": 0
  },
  "312": {
    "body": "Hi,\r\nFor this formula, Z3  throws out an assertion violation:\r\n```\r\n[582] % z3release smt.string_solver=z3str3 small.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_str_mc.cpp\r\nLine: 1162\r\nNOT IMPLEMENTED YET!\r\nZ3 4.8.9.0\r\nPlease file an issue with this message and more detail about how you encountered it at https://github.com/Z3Prover/z3/issues/new\r\n[583] % z3debug smt.string_solver=z3str3 small.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_str_mc.cpp\r\nLine: 1162\r\nNOT IMPLEMENTED YET!\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[584] % \r\n[584] % cat small.smt2\r\n(set-option :smt.str.fixed_length_refinement true)\r\n(declare-fun a () String)\r\n(declare-fun b () Int)\r\n(assert (= (str.replace \"B\" (str.at \"A\" b) \"\") \"B\" a))\r\n(check-sat-using (then dom-simplify ctx-solver-simplify))\r\n[585] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: fc8dfe3\r\n",
    "priority": 0
  },
  "313": {
    "body": "Hi,\nFor this case, Z3  throws out a segmentation fault:\n```\n[521] % z3release smt.string_solver=z3str3 small.smt2\nSegmentation fault\n[522] % z3debug smt.string_solver=z3str3 small.smt2\nASSERTION VIOLATION\nFile: ../src/smt/theory_str_regex.cpp\nLine: 967\nstr1.length() == 1\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[523] % \n[523] % cat small.smt2\n(assert (str.in.re \"\" (re.loop (re.range \"\" \"\") 0)))\n(check-sat)\n[524] %\n```\n\nOS: Ubuntu 18.04\nCommit: fc8dfe3\n",
    "priority": 1
  },
  "314": {
    "body": "Hi,\nFor this case, Z3  throws out a segmentation fault:\n```\n[516] % z3 smt.string_solver=z3str3 small.smt2\nASSERTION VIOLATION\nFile: ../src/util/obj_hashtable.h\nLine: 177\ne\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[517] % \n[517] % cat small.smt2\n(set-option :smt.str.fixed_length_naive_cex false)\n(declare-fun a () String)\n(assert (str.in.re a re.allchar))\n(check-sat-using ctx-solver-simplify)\n[518] %\n```\n\nOS: Ubuntu 18.04\nCommit: fc8dfe3\n",
    "priority": 1
  },
  "315": {
    "body": "Hi,\nFor this case, Z3  throws out a segmentation fault:\n```\n[556] % z3release smt.string_solver=z3str3 small.smt2\nSegmentation fault\n[557] % \n[557] % cat small.smt2\n(declare-fun a () String)\n(assert (str.in.re a (re.inter (str.to.re a) re.allchar)))\n(check-sat)\n[558] %\n```\n\nOS: Ubuntu 18.04\nCommit: b2bfb1f\n",
    "priority": 1
  },
  "316": {
    "body": "Hi,\r\nFor this case, Z3  gives an invalid model:\r\n```\r\n[509] % z3release small.smt2\r\nsat\r\n(model \r\n (define-fun a () String\r\n  \"1\")\r\n)\r\n[510] % z3release smt.string_solver=z3str3 small.smt2\r\nsat\r\n(model \r\n (define-fun a () String\r\n  \"2\")\r\n)\r\n[511] % \r\n[511] % cat small.smt2\r\n(declare-fun a () String)\r\n(assert (= (str.to.int a) 1))\r\n(check-sat)\r\n(get-model)\r\n[512] %\r\n```\r\nIt might be related to  https://github.com/Z3Prover/z3/issues/2981.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: b2bfb1f\r\n",
    "priority": 0
  },
  "317": {
    "body": "Hi,\r\nFor this formula, Z3  throws out a flaky assertion violation:\r\n```\r\n[512] % for i in $(seq 1 5) ; do timeout -s 9 20 z3 small.smt2; done\r\nKilled\r\nKilled\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_model_finder.cpp\r\nLine: 632\r\nt_val != nullptr\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nKilled\r\nKilled\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_model_finder.cpp\r\nLine: 632\r\nt_val != nullptr\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nKilled\r\n[513] % \r\n[513] % cat small.smt2\r\n(set-option :smt.threads 20)\r\n(set-option :smt.phase_selection 5)\r\n(declare-sort m)\r\n(declare-sort n)\r\n(declare-datatypes () ((a f j)))\r\n(declare-datatypes () ((c1 q p t) (c2 (c4 (k c1) (c3 m)))))\r\n(declare-fun o () m)\r\n(declare-fun x () n)\r\n(declare-fun d () a)\r\n(declare-fun u () (Array n a))\r\n(declare-fun h () (Array n c2))\r\n(declare-fun v () (Array n c2))\r\n(declare-fun w () n)\r\n(assert (forall ((e n)) (= (= d f) (= (select u e) (ite (= e w) f j)))))\r\n(assert (forall ((e n)) (=(= (k (select v e)) p) (= (k (select h e)) q))))\r\n(assert\r\n (=\r\n (ite (= d f)\r\n  (ite (= (= d j)\r\n     (= (= o (c3 (select v x)))\r\n     (forall ((e n)) (= (k (select h e)) t)))) f j)\r\n  (ite (forall ((e n)) (= (= (k (select h e)) t) (= d f))) f j))\r\n f))\r\n(check-sat-using (then purify-arith ctx-solver-simplify))\r\n[514] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: ce07138\r\n",
    "priority": 1
  },
  "318": {
    "body": "Hi,\r\nFor this case, Z3  throws out an assertion violation:\r\n```\r\n[537] % for i in $(seq 1 5); do\r\n> timeout -s 9 8 z3debug small.smt2\r\n> done\r\nKilled\r\nASSERTION VIOLATION\r\nFile: ../src/math/lp/nla_core.cpp\r\nLine: 1499\r\n!l_vec.empty() || elists_are_consistent(true)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nKilled\r\nKilled\r\nASSERTION VIOLATION\r\nFile: ../src/math/lp/nla_core.cpp\r\nLine: 1499\r\n!l_vec.empty() || elists_are_consistent(true)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nKilled\r\nASSERTION VIOLATION\r\nFile: ../src/math/lp/nla_core.cpp\r\nLine: 1499\r\n!l_vec.empty() || elists_are_consistent(true)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nKilled\r\n[538] % \r\n[538] % cat small.smt2\r\n(set-option :smt.phase_selection 1)\r\n(set-option :smt.threads 3)\r\n(declare-fun e (Int) Int)\r\n(define-fun f ((h Int) (a Int) (b Int)) Int (ite (= b 0) a (mod a b)))\r\n(define-fun g ((h Int) (a Int) (b Int)) Int (f h (* a (e b)) h))\r\n(assert (not (forall ((c Int) (d Int) (h Int)) (= (g h 0 c) (g c c d) c))))\r\n(check-sat-using (then simplify purify-arith ctx-solver-simplify))\r\n[539] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 127ef59\r\n",
    "priority": 0
  },
  "319": {
    "body": "\n```\n[530] % z3release small.smt2\nsat\n[531] % z3release smt.string_solver=z3str3 small.smt2\nASSERTION VIOLATION\nFile: ../src/ast/ast.cpp\nLine: 431\nUNREACHABLE CODE WAS REACHED.\nZ3 4.8.9.0\nPlease file an issue with this message and more detail about how you encountered it at https://github.com/Z3Prover/z3/issues/new\n[532] % \n[532] % cat small.smt2\n(set-option :smt.str.fixed_length_naive_cex false)\n(declare-fun s () String)\n(assert (not (= (str.at (str.substr s 0 (- (str.len s) 1)) 0) (str.at s 0) \"a\")))\n(check-sat)\n[533] %\n```\n\nOS: Ubuntu 18.04\nCommit: 32055a3\n",
    "priority": 0
  },
  "320": {
    "body": "\n```\n[513] % z3release smt.string_solver=z3str3 small.smt2\nASSERTION VIOLATION\nFile: ../src/smt/theory_str_regex.cpp\nLine: 913\nUNREACHABLE CODE WAS REACHED.\nZ3 4.8.9.0\nPlease file an issue with this message and more detail about how you encountered it at https://github.com/Z3Prover/z3/issues/new\n[514] % \n[514] % cat small.smt2\n(declare-fun a () String)\n(assert (str.in.re a (re.loop (str.to.re \"\") (- 1))))\n(assert (< (str.len a) 0))\n(check-sat-using ctx-solver-simplify)\n[515] %\n```\n\nOS: Ubuntu 18.04\nCommit: 32055a3\n",
    "priority": 1
  },
  "321": {
    "body": "\n```\n[508] % z3release smt.string_solver=z3str3 small.smt2\nASSERTION VIOLATION\nFile: ../src/smt/theory_str_regex.cpp\nLine: 1148\nUNREACHABLE CODE WAS REACHED.\nZ3 4.8.9.0\nPlease file an issue with this message and more detail about how you encountered it at https://github.com/Z3Prover/z3/issues/new\n[509] % \n[509] % cat small.smt2\n(declare-fun a () String)\n(assert (str.in.re a (re.inter (re.* (str.to.re \"\")) (str.to.re \"\"))))\n(check-sat)\n[510] %\n\n```\n\nOS: Ubuntu 18.04\nCommit: 32055a3\n",
    "priority": 1
  },
  "322": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real)\n(assert (forall ((b Real)) (> (/ 0 (* (- 2 (* a b)))) (/ 0 (- a b)))))\n(check-sat-using qe_rec)\n```\nZ3  throws out an assertion violation:\n```\nFailed to verify: a.is_numeral(val, r)\nASSERTION VIOLATION\nFile: ../src/qe/qe_arith.cpp\nLine: 348\nUNREACHABLE CODE WAS REACHED.\nZ3 4.8.9.0\nPlease file an issue with this message and more detail about how you encountered it at https://github.com/Z3Prover/z3/issues/new\n```\n\nOS: Ubuntu 18.04\nCommit: a14c2a3\n",
    "priority": 0
  },
  "323": {
    "body": "Hi,\nFor this case, Z3  gives an invalid model:\n```\n[721] % z3-4.8.8 model_validate=true small.smt2\nsat\n[722] % z3release model_validate=true small.smt2\nsat\n(error \"line 4 column 10: an invalid model was generated\")\n[723] % \n[723] % cat small.smt2\n(declare-fun a () Real)\n(assert (> (/ (* a a) (* 2 a)) 2))\n(push)\n(check-sat)\n[724] %\n```\n\nOS: Ubuntu 18.04\nCommit: a14c2a3\n",
    "priority": 1
  },
  "324": {
    "body": "Hi,\nFor this case, Z3  gives an invalid model:\n```\n[662] % z3release model_validate=true small.smt2\nsat\n(error \"line 7 column 10: an invalid model was generated\")\n[663] % \n[663] % cat small.smt2\n(set-logic AUFNIRA)\n(declare-fun a () Real)\n(declare-fun b () Real)\n(assert (= (- b a) 1))\n(assert (= 2 (/ 1 a b)))\n(assert (< b 0))\n(check-sat)\n[664] %\n```\n\nOS: Ubuntu 18.04\nCommit: a14c2a3\n",
    "priority": 1
  },
  "325": {
    "body": "Hi,\nFor this case, Z3  gives an invalid model:\n```\n[677] % z3-4.8.8 model_validate=true small.smt2\nsat\n[678] % z3release model_validate=true small.smt2\nsat\n(error \"line 55 column 10: an invalid model was generated\")\n[679] %\n[679] % cat small.smt2\n(set-option :smt.arith.bprop_on_pivoted_rows false)\n(set-option :rewriter.sort_sums true)\n(set-option :rewriter.arith_ineq_lhs true)\n(set-option :smt.phase_selection 6)\n(set-option :smt.random_seed 15)\n(declare-fun a () String)\n(declare-fun b () String)\n(declare-fun c () String)\n(declare-fun d () String)\n(declare-fun w () String)\n(declare-fun e () Bool)\n(declare-fun f () Bool)\n(declare-fun x () Bool)\n(declare-fun y () Bool)\n(declare-fun g () Bool)\n(declare-fun h () Bool)\n(declare-fun i () Bool)\n(declare-fun j () String)\n(declare-fun k () Int)\n(declare-fun l () Int)\n(declare-fun m () String)\n(declare-fun n () String)\n(declare-fun o () String)\n(declare-fun z () String)\n(declare-fun p () String)\n(declare-fun q () Bool)\n(declare-fun r () Bool)\n(declare-fun aa () Bool)\n(declare-fun s () Bool)\n(declare-fun ab () Bool)\n(declare-fun ac () String)\n(declare-fun t () Bool)\n(declare-fun ad () Bool)\n(declare-fun v () String)\n(assert (= (distinct \"-\" (str.substr j 0 (str.len ac))) (not (= f (not (= h s))))))\n(assert (not (distinct f (not (= i ab)))))\n(assert (not (= x (not (= g aa)))))\n(assert (= (not (= g t)) (not distinct )))\n(assert (ite aa (and (= l 0) (= c m) (= k 0) (distinct 0 (str.len m))\n (= n o) (= \"\" z) (= p \"ab\")) (and (= ac n) (not\n (str.in.re n (str.to.re \"_\"))) y (not (= g aa)))))\n(assert (= ab (not s)))\n(assert (= (not (= x r)) (= \"\" (str.substr a (str.len n) (str.len\n (str.substr c (str.len o) (str.len (str.substr d (str.len z)\n (str.len (str.substr j (str.len ac) (str.len v)))))))))))\n(assert (= (not (= e q)) (distinct (str.substr w (str.len p) (str.len v)) \"\")))\n(assert (= c (str.++ o v) d (str.++ z v)))\n(assert (distinct w (str.++ p v)))\n(assert (= e (not q)))\n(assert (= x (xor (= r t))))\n(assert (= g (not (= aa t))))\n(assert (= h (not (= s ad))))\n(assert (= i (not (= ab ad))))\n(assert (= j (str.++ ac v)))\n(check-sat)\n[680] %\n```\n\nOS: Ubuntu 18.04\nCommit: a14c2a3\n",
    "priority": 1
  },
  "326": {
    "body": "Hi,\nFor this case, Z3  throws out a segmentation fault:\n```\n[551] % z3debug rewriter.flat=false small.smt2\nASSERTION VIOLATION\nFile: ../src/util/vector.h\nLine: 375\nidx < size()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[552] % z3release rewriter.flat=false small.smt2\nSegmentation fault\n[553] % z3san rewriter.flat=false small.smt2\nASAN:DEADLYSIGNAL\n=================================================================\n==14196==ERROR: AddressSanitizer: SEGV on unknown address 0x60e400003848 (pc 0x55949133f6f4 bp 0x7ffcc56f7dd0 sp 0x7ffcc56f7780 T0)\n==14196==The signal is caused by a READ memory access.\n  #0 0x55949133f6f3 in smt::theory_lra::imp::nl_value(int, _scoped_numeral<algebraic_numbers::manager>&) ../src/smt/theory_lra.cpp:3371\n  #1 0x55949131d0dc in smt::theory_lra::imp::mk_value(smt::enode*, smt::model_generator&) ../src/smt/theory_lra.cpp:3399\n  #2 0x55949131d0dc in smt::theory_lra::mk_value(smt::enode*, smt::model_generator&) ../src/smt/theory_lra.cpp:3955\n  #3 0x559491399f41 in smt::model_generator::mk_value_procs(obj_map<smt::enode, smt::model_value_proc*>&, ptr_vector<smt::enode>&, ptr_vector<smt::model_value_proc>&) ../src/smt/smt_model_generator.cpp:113\n  #4 0x55949139bb59 in smt::model_generator::mk_values() ../src/smt/smt_model_generator.cpp:297\n  #5 0x5594913a089a in smt::model_generator::mk_model() ../src/smt/smt_model_generator.cpp:500\n  #6 0x5594913c9b97 in smt::context::mk_proto_model() ../src/smt/smt_context.cpp:4456\n  #7 0x5594913e187f in smt::context::get_model(ref<model>&) ../src/smt/smt_context.cpp:4487\n  #8 0x55949102b9b6 in smt_tactic::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/smt/tactic/smt_tactic.cpp:224\n  #9 0x559492a6f687 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #10 0x559492a620f1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #11 0x559492a620f1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #12 0x559492a620f1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #13 0x559492a620f1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #14 0x559492a620f1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #15 0x559492a620f1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #16 0x559492a620f1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #17 0x559492a620f1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #18 0x559492a620f1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #19 0x559492a620f1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #20 0x559492a620f1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #21 0x559492a620f1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #22 0x559492a6f687 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #23 0x559492a2b0da in exec(tactic&, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactic.cpp:150\n  #24 0x559492a2d3dd in check_sat(tactic&, ref<goal>&, ref<model>&, labels_vec&, obj_ref<app, ast_manager>&, obj_ref<dependency_manager<ast_manager::expr_dependency_config>::dependency, ast_manager>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) ../src/tactic/tactic.cpp:170\n  #25 0x559492898ed8 in check_sat_core2 ../src/solver/tactic2solver.cpp:185\n  #26 0x5594928b7df7 in solver_na2as::check_sat_core(unsigned int, expr* const*) ../src/solver/solver_na2as.cpp:67\n  #27 0x5594928cb624 in combined_solver::check_sat_core(unsigned int, expr* const*) ../src/solver/combined_solver.cpp:246\n  #28 0x5594928a69f1 in solver::check_sat(unsigned int, expr* const*) ../src/solver/solver.cpp:330\n  #29 0x5594928214f0 in cmd_context::check_sat(unsigned int, expr* const*) ../src/cmd_context/cmd_context.cpp:1549\n  #30 0x55949273cc63 in smt2::parser::parse_check_sat() ../src/parsers/smt2/smt2parser.cpp:2596\n  #31 0x55949273cc63 in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:2938\n  #32 0x55949273cc63 in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #33 0x5594926f4255 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\n  #34 0x55948fddadc6 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #35 0x55948fd937be in main ../src/shell/main.cpp:352\n  #36 0x7f2342d24b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #37 0x55948fda7969 in _start (/local/suz-local/software/z3san/build-05112020173930-a14c2a3/z3+0x211969)\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../src/smt/theory_lra.cpp:3371 in smt::theory_lra::imp::nl_value(int, _scoped_numeral<algebraic_numbers::manager>&)\n==14196==ABORTING\n[554] % \n[554] % cat small.smt2\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(declare-fun d () Real)\n(declare-fun g () Real)\n(declare-fun e () Real)\n(define-fun h () Bool (and (> c 0) (= (+ e (div d b) g) (+ (* a a) c a))))\n(define-fun f () Bool (= (+ g e) 0))\n(assert h)\n(assert (not f))\n(check-sat)\n[555] %\n```\n\nOS: Ubuntu 18.04\nCommit: a14c2a3\n",
    "priority": 1
  },
  "327": {
    "body": "Hi,\nFor this formula:\n```\n(assert (forall ((a Int) (b Int)) (distinct (div a b) 0)))\n(check-sat-using ctx-solver-simplify)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/lp/nla_core.cpp\nLine: 1500\nelists_are_consistent(true)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: a14c2a3\n",
    "priority": 1
  },
  "328": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a (Int Bool) Bool)\n(assert (= a (lambda ((b Int) (c Bool)) c)))\n(check-sat-using ufbv)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ast/rewriter/rewriter_def.h\nLine: 83\nst != BR_DONE || m().get_sort(m_r) == m().get_sort(t)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 179c9c2\n",
    "priority": 1
  },
  "329": {
    "body": "Hi,\r\nFor this case, Z3 master branch hangs on it while z3-4.8.7 answers it quickly:\r\n```\r\n[619] % time z3-4.8.7 small.smt2\r\nsat\r\nreal  0m0.053s\r\nuser  0m0.014s\r\nsys   0m0.003s\r\n[620] % timeout -s 9 30 z3release small.smt2\r\nKilled\r\n[621] % \r\n[621] % cat small.smt2\r\n(define-funs-rec ((a ((b Int)) Int) (c ((d Int)) Int)) ((a 0) (c 0)))\r\n(assert (= (a 0) 0))\r\n(check-sat)\r\n[622] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 6c72f39",
    "priority": 0
  },
  "330": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () String)\n(assert\n (xor\n (str.in.re a (re.* (str.to.re \"A\")))\n (str.in.re a (re.++ re.allchar re.all))\n (str.in.re a (re.opt (str.to.re \"A\")))))\n(check-sat-using ctx-solver-simplify)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/smt/tactic/ctx_solver_simplify_tactic.cpp\nLine: 141\nUNREACHABLE CODE WAS REACHED.\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 6c72f39\n",
    "priority": 1
  },
  "331": {
    "body": "\n```\n[672] % z3 small.smt2\nunknown\n[673] % z3 proof=true small.smt2\nunknown\n[674] % z3 rewriter.expand_nested_stores=true small.smt2\nsat\n[675] % z3 proof=true rewriter.expand_nested_stores=true small.smt2\nASSERTION VIOLATION\nFile: ../src/smt/smt_conflict_resolution.cpp\nLine: 800\nm_ctx.is_true(n2) || m_ctx.is_false(n2)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[676] % \n[676] % cat small.smt2\n(declare-fun a () (Array Int (Array Int Real)))\n(declare-fun b () Real)\n(declare-fun c () (Array Int (Array Int Real)))\n(declare-fun d () Real)\n(declare-fun e () (Array Int (Array Int Real)))\n(declare-fun f () Real)\n(declare-fun g () (Array Int (Array Int Real)))\n(declare-fun h () Real)\n(declare-fun i () (Array Int (Array Int Real)))\n(declare-fun j () Real)\n(declare-fun k () (Array Int (Array Int Real)))\n(declare-fun l ((Array Int (Array Int Real)) Int) Bool)\n(declare-fun m () Int)\n(assert (forall ((a (Array Int (Array Int Real)))) (l a m)))\n(assert\n (= c i (store a 0 (store (select a 0) 0 b))\n (store c 0 (store (select c 0) 0 d))\n (store e 1 (store (select e 0) 0 f))\n (store g 2 (store (select g 3) 0 h))))\n(assert (= k (store i 0 (store (select i 4) 1 j))))\n(assert (l k m))\n(check-sat-using (then qfbv default))\n[677] %\n```\n\nOS: Ubuntu 18.04\nCommit: becf423\n",
    "priority": 1
  },
  "332": {
    "body": "\n```\n[589] % z3debug small.smt2\nASSERTION VIOLATION\nFile: ../src/ast/rewriter/rewriter.h\nLine: 239\nframe_stack().empty() || frame_stack().back().m_state != PROCESS_CHILDREN || this->is_child_of_top_frame(old_t)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[590] % z3release small.smt2\nsat\n[591] % cat small.smt2\n(define-funs-rec ((a () Int)) ((+ 0 0)))\n(assert (= a 0))\n(check-sat)\n[592] %\n```\n\nOS: Ubuntu 18.04\nCommit: becf423\n",
    "priority": 1
  },
  "333": {
    "body": "Hi,\r\nFor this case, Z3  throws out a segmentation fault:\r\n```\r\n[576] % z3debug small.smt2\r\nSegmentation fault\r\n[577] % z3release small.smt2\r\nSegmentation fault\r\n[578] % z3san small.smt2\r\nASAN:DEADLYSIGNAL\r\n=================================================================\r\n==11048==ERROR: AddressSanitizer: SEGV on unknown address 0x6250000b2440 (pc 0x6250000b2440 bp 0x7ffc80258b30 sp 0x7ffc80258ac8 T0)\r\n==11048==The signal is caused by a READ memory access.\r\n  #0 0x6250000b243f (<unknown module>)\r\nAddressSanitizer can not provide additional info.\r\nSUMMARY: AddressSanitizer: SEGV (<unknown module>) \r\n==11048==ABORTING\r\n[579] % \r\n[579] % cat small.smt2\r\n(assert (str.in.re \"ab\" (re.union (re.inter (str.to.re \"\") (str.to.re \"a\")) (str.to.re \"ab\"))))\r\n(check-sat-using (then horn default))\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: becf423\r\n",
    "priority": 0
  },
  "334": {
    "body": "\n```\n[601] % z3debug small.smt2\nunknown\n[602] % z3debug model_validate=true parallel.enable=true small.smt2\nsat\nSegmentation fault\n[603] % z3release model_validate=true parallel.enable=true small.smt2\nsat\nSegmentation fault\n[604] % z3san model_validate=true parallel.enable=true small.smt2\nsat\nASAN:DEADLYSIGNAL\n=================================================================\n==3162==ERROR: AddressSanitizer: stack-overflow on address 0x7fff04698fe8 (pc 0x7f803d4ceade bp 0x7fff04699850 sp 0x7fff04698ff0 T0)\n  #0 0x7f803d4ceadd in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeadd)\n  #1 0x5593ce6e52dd in memory::allocate(unsigned long) ../src/util/memory_manager.cpp:268\n  #2 0x5593cd42334e in rewriter_core::init_cache_stack() ../src/ast/rewriter/rewriter.cpp:26\n  #3 0x5593cd42334e in rewriter_core::rewriter_core(ast_manager&, bool) ../src/ast/rewriter/rewriter.cpp:196\n  #4 0x5593ccf39690 in rewriter_tpl<mev::evaluator_cfg>::rewriter_tpl(ast_manager&, bool, mev::evaluator_cfg&) ../src/ast/rewriter/rewriter_def.h:623\n  #5 0x5593ccf39690 in model_evaluator::imp::imp(model_core&, params_ref const&) ../src/model/model_evaluator.cpp:602\n  #6 0x5593ccf4c7b6 in model_evaluator::model_evaluator(model_core&, params_ref const&) ../src/model/model_evaluator.cpp:614\n  #7 0x5593ccf4c7b6 in mev::evaluator_cfg::reduce_app_core(func_decl*, unsigned int, expr* const*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/model/model_evaluator.cpp:257\n  #8 0x5593ccf54f94 in mev::evaluator_cfg::reduce_app(func_decl*, unsigned int, expr* const*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/model/model_evaluator.cpp:148\n  #9 0x5593ccf54f94 in bool rewriter_tpl<mev::evaluator_cfg>::process_const<false>(app*) ../src/ast/rewriter/rewriter_def.h:82\n  #10 0x5593ccf55705 in bool rewriter_tpl<mev::evaluator_cfg>::visit<false>(expr*, unsigned int) ../src/ast/rewriter/rewriter_def.h:190\n  #11 0x5593ccf47fc4 in void rewriter_tpl<mev::evaluator_cfg>::process_app<false>(app*, rewriter_core::frame&) ../src/ast/rewriter/rewriter_def.h:260\n  #12 0x5593ccf498cd in void rewriter_tpl<mev::evaluator_cfg>::resume_core<false>(obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/rewriter/rewriter_def.h:769\n  #13 0x5593ccf4a731 in void rewriter_tpl<mev::evaluator_cfg>::main_loop<false>(expr*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/rewriter/rewriter_def.h:728\n  #14 0x5593ccf31f8b in rewriter_tpl<mev::evaluator_cfg>::operator()(expr*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/rewriter/rewriter_def.h:800\n  #15 0x5593ccf31f8b in rewriter_tpl<mev::evaluator_cfg>::operator()(expr*, obj_ref<expr, ast_manager>&) ../src/ast/rewriter/rewriter.h:357\n  #16 0x5593ccf31f8b in model_evaluator::operator()(expr*, obj_ref<expr, ast_manager>&) ../src/model/model_evaluator.cpp:671\n  #17 0x5593ccf31f8b in model_evaluator::operator()(expr*) ../src/model/model_evaluator.cpp:679\n  #18 0x5593ccf4c81d in mev::evaluator_cfg::reduce_app_core(func_decl*, unsigned int, expr* const*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/model/model_evaluator.cpp:258\n  #19 0x5593ccf54f94 in mev::evaluator_cfg::reduce_app(func_decl*, unsigned int, expr* const*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/model/model_evaluator.cpp:148\n  #20 0x5593ccf54f94 in bool rewriter_tpl<mev::evaluator_cfg>::process_const<false>(app*) ../src/ast/rewriter/rewriter_def.h:82\n  #21 0x5593ccf55705 in bool rewriter_tpl<mev::evaluator_cfg>::visit<false>(expr*, unsigned int) ../src/ast/rewriter/rewriter_def.h:190\n  #22 0x5593ccf47fc4 in void rewriter_tpl<mev::evaluator_cfg>::process_app<false>(app*, rewriter_core::frame&) ../src/ast/rewriter/rewriter_def.h:260\n  #23 0x5593ccf498cd in void rewriter_tpl<mev::evaluator_cfg>::resume_core<false>(obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/rewriter/rewriter_def.h:769\n...\nSUMMARY: AddressSanitizer: stack-overflow (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeadd) in __interceptor_malloc\n==3162==ABORTING\n[605] % \n[605] % cat small.smt2\n(declare-fun a (Int) Bool)\n(declare-fun b (Int) Bool)\n(assert (xor (= a b) (b 0)))\n(check-sat-using (then qfbv default))\n[606] %\n```\n\nOS: Ubuntu 18.04\nCommit: 9a44ed8\n",
    "priority": 1
  },
  "335": {
    "body": "\n```\n[585] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/ast/rewriter/rewriter_def.h\nLine: 310\nst != BR_DONE || m().get_sort(m_r) == m().get_sort(t)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[586] % \n[586] % cat small.smt2\n(declare-fun a () (Array Int Real))\n(assert (distinct a ((as const (Array Int Real)) 0)))\n(check-sat)\n[587] %\n```\n\nOS: Ubuntu 18.04\nCommit: b42ea38\n",
    "priority": 1
  },
  "336": {
    "body": "\n```\n[503] % z3 small.smt2\nunsat\nASSERTION VIOLATION\nFile: ../src/nlsat/nlsat_solver.cpp\nLine: 950\nnum_lits > 0\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[504] % z3release small.smt2\nunsat\nSegmentation fault\n[505] % z3san small.smt2\nunsat\nASAN:DEADLYSIGNAL\n=================================================================\n==18154==ERROR: AddressSanitizer: SEGV on unknown address 0x603400044328 (pc 0x55c59dfdb87e bp 0x7ffd2f126c00 sp 0x7ffd2f126bf0 T0)\n==18154==The signal is caused by a READ memory access.\n  #0 0x55c59dfdb87d in vector<nlsat::clause*, false, unsigned int>::push_back(nlsat::clause*&&) ../src/util/vector.h:434\n  #1 0x55c59dfdbc35 in nlsat::solver::imp::attach_clause(nlsat::clause&) ../src/nlsat/nlsat_solver.cpp:703\n  #2 0x55c59dfef399 in nlsat::solver::imp::mk_clause(unsigned int, sat::literal const*, bool, dependency_manager<nlsat::solver::imp::dconfig>::dependency*) ../src/nlsat/nlsat_solver.cpp:945\n  #3 0x55c59cb766f4 in goal2nlsat::imp::process(expr*, dependency_manager<ast_manager::expr_dependency_config>::dependency*) ../src/nlsat/tactic/goal2nlsat.cpp:251\n  #4 0x55c59cb766f4 in goal2nlsat::imp::operator()(goal const&) ../src/nlsat/tactic/goal2nlsat.cpp:260\n  #5 0x55c59cb766f4 in goal2nlsat::operator()(goal const&, params_ref const&, nlsat::solver&, expr2var&, expr2var&) ../src/nlsat/tactic/goal2nlsat.cpp:294\n  #6 0x55c59cb71cc4 in nlsat_tactic::imp::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/nlsat/tactic/nlsat_tactic.cpp:149\n  #7 0x55c59cb745e6 in nlsat_tactic::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/nlsat/tactic/nlsat_tactic.cpp:241\n  #8 0x55c59d4311c8 in cleanup_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:918\n  #9 0x55c59d3fb91a in exec(tactic&, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactic.cpp:150\n  #10 0x55c59d3fdc1d in check_sat(tactic&, ref<goal>&, ref<model>&, labels_vec&, obj_ref<app, ast_manager>&, obj_ref<dependency_manager<ast_manager::expr_dependency_config>::dependency, ast_manager>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) ../src/tactic/tactic.cpp:170\n  #11 0x55c59d173320 in check_sat_using_tactict_cmd::execute(cmd_context&) ../src/cmd_context/tactic_cmds.cpp:223\n  #12 0x55c59d1062e8 in smt2::parser::parse_ext_cmd(int, int) ../src/parsers/smt2/smt2parser.cpp:2895\n  #13 0x55c59d10d33c in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:3001\n  #14 0x55c59d10d33c in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #15 0x55c59d0c4aa5 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179  \n  #16 0x55c59a755c26 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #17 0x55c59a70e3ae in main ../src/shell/main.cpp:352\n  #18 0x7ff8a7527b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #19 0x55c59a7225f9 in _start (/local/suz-local/software/z3san/build-05052020155909-f2449df/z3+0x2125f9)\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../src/util/vector.h:434 in vector<nlsat::clause*, false, unsigned int>::push_back(nlsat::clause*&&)\n==18154==ABORTING\n[506] %\n[506] % cat small.smt2\n(assert or)\n(check-sat)\n(check-sat-using nlsat)\n[507] %\n```\n\nOS: Ubuntu 18.04\nCommit: f2449df\n",
    "priority": 1
  },
  "337": {
    "body": "Hi,\r\nFor this case,  smt.arith.solver=6 hangs on it while smt.arith.solver=2 solves it quickly:\r\n```\r\n[566] % time cvc4 -q small.smt2\r\nunsat\r\nreal\t0m0.028s\r\nuser\t0m0.020s\r\nsys\t0m0.008s\r\n[567] % time z3release smt.arith.solver=2 small.smt2\r\nunsat\r\nreal\t0m0.022s\r\nuser\t0m0.009s\r\nsys\t0m0.009s\r\n[568] % timeout -s 9 60 z3release smt.arith.solver=6 small.smt2\r\nKilled\r\n[569] % \r\n[569] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(assert (forall ((e Real)) (distinct (<= e 0) (= 0 (- d)))))\r\n(assert\r\n (forall ((f Real))\r\n (distinct (and (<= 0 (div 3 (to_int a) (to_int b))) (<= 0.0 c 0.0 (- a b)))\r\n  (<= 0.0 (mod 0 0)))))\r\n(check-sat)\r\n[570] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: a34c5a9",
    "priority": 0
  },
  "338": {
    "body": "Hi,\r\nFor this case, smt.arith.solver=6 takes more time than arith.solver=2 for solving this formula:\r\n```\r\n[639] % time z3release smt.arith.solver=2 small.smt2\r\nunsat\r\nreal\t0m0.046s\r\nuser\t0m0.022s\r\nsys\t0m0.007s\r\n[640] % \r\n[640] % time z3release smt.arith.solver=6 small.smt2\r\nunsat\r\nreal\t0m28.650s\r\nuser\t0m28.268s\r\nsys\t0m0.287s\r\n[641] % \r\n[641] % cat small.smt2\r\n(declare-fun a () String)\r\n(declare-fun n () String)\r\n(declare-fun b () String)\r\n(declare-fun c () String)\r\n(declare-fun d () String)\r\n(declare-fun p () Bool)\r\n(declare-fun e () Bool)\r\n(declare-fun f () Bool)\r\n(declare-fun aa () Bool)\r\n(declare-fun g () Bool)\r\n(declare-fun h () Bool)\r\n(declare-fun i () Bool)\r\n(declare-fun j () Bool)\r\n(declare-fun k () String)\r\n(declare-fun l () String)\r\n(declare-fun m () String)\r\n(declare-fun o () String)\r\n(declare-fun q () Bool)\r\n(declare-fun r () Bool)\r\n(declare-fun s () Bool)\r\n(declare-fun t () Bool)\r\n(declare-fun u () Bool)\r\n(declare-fun v () Bool)\r\n(declare-fun w () Bool)\r\n(declare-fun x () String)\r\n(declare-fun y () Bool)\r\n(declare-fun ab () Bool)\r\n(declare-fun ac () String)\r\n(assert (= (not (= p y)) (not (= \"\" (str.substr k 0 (str.len x))))\r\n (= p (not (= i v))) r (= \"-\" (str.substr k 171 (str.len x)))))\r\n(assert (distinct s (not r)))\r\n(assert s)\r\n(assert (= (= f ab) (= \"\" x)))\r\n(assert (= (xor g (not (= h u))) (= aa y)))\r\n(assert (= false (not (distinct \"\" (str.substr n (str.len m) (str.len\r\n (str.substr b 0 (str.len (str.substr c (str.len o) (str.len ac))))))))\r\n (= aa t) (= e r)))\r\n(assert (= (not (= j w)) (xor (= \"\" (str.substr a (str.len l) (str.len\r\n (str.substr n (str.len m) (str.len (str.substr b 0 (str.len\r\n (str.substr c 0 (str.len (str.substr d 0 (str.len (str.substr k\r\n (str.len x) (str.len ac))))))))))))))))\r\n(assert (= a (str.++ l ac) d))\r\n(assert (distinct p (not (= q y))))\r\n(assert (= e f(= t y)))\r\n(assert (distinct i (not (= v y))))\r\n(assert (distinct j (not (distinct w ab))))\r\n(assert (= k (str.++ x ac)))\r\n(check-sat)\r\n[642] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 6a540e8",
    "priority": 0
  },
  "339": {
    "body": "Hi,\nFor this case, Z3  throws out a segmentation fault:\n```\n[612] % z3debug model_validate=true small.smt2\nsat\nSegmentation fault\n[613] % z3release model_validate=true small.smt2\nsat\nSegmentation fault\n[614] % z3san model_validate=true small.smt2\nsat\nASAN:DEADLYSIGNAL\n=================================================================\n==10551==ERROR: AddressSanitizer: stack-overflow on address 0x7fff86460ff8 (pc 0x7fec5715ebf4 bp 0x7fff86461870 sp 0x7fff86461000 T0)\n  #0 0x7fec5715ebf3 (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xeebf3)\n  #1 0x7fec5714eb67 in __interceptor_malloc (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xdeb67)\n  #2 0x55fe46d4537d in memory::allocate(unsigned long) ../src/util/memory_manager.cpp:268\n  #3 0x55fe45a838ce in rewriter_core::init_cache_stack() ../src/ast/rewriter/rewriter.cpp:26\n  #4 0x55fe45a838ce in rewriter_core::rewriter_core(ast_manager&, bool) ../src/ast/rewriter/rewriter.cpp:196\n  #5 0x55fe4559a7c0 in rewriter_tpl<mev::evaluator_cfg>::rewriter_tpl(ast_manager&, bool, mev::evaluator_cfg&) ../src/ast/rewriter/rewriter_def.h:623\n  #6 0x55fe4559a7c0 in model_evaluator::imp::imp(model_core&, params_ref const&) ../src/model/model_evaluator.cpp:602\n  #7 0x55fe455ad8e6 in model_evaluator::model_evaluator(model_core&, params_ref const&) ../src/model/model_evaluator.cpp:614\n  #8 0x55fe455ad8e6 in mev::evaluator_cfg::reduce_app_core(func_decl*, unsigned int, expr* const*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/model/model_evaluator.cpp:257\n  #9 0x55fe455b60c4 in mev::evaluator_cfg::reduce_app(func_decl*, unsigned int, expr* const*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/model/model_evaluator.cpp:148\n  #10 0x55fe455b60c4 in bool rewriter_tpl<mev::evaluator_cfg>::process_const<false>(app*) ../src/ast/rewriter/rewriter_def.h:82\n  #11 0x55fe455b6835 in bool rewriter_tpl<mev::evaluator_cfg>::visit<false>(expr*, unsigned int) ../src/ast/rewriter/rewriter_def.h:190\n  #12 0x55fe455a90f4 in void rewriter_tpl<mev::evaluator_cfg>::process_app<false>(app*, rewriter_core::frame&) ../src/ast/rewriter/rewriter_def.h:260\n  #13 0x55fe455aa9fd in void rewriter_tpl<mev::evaluator_cfg>::resume_core<false>(obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/rewriter/rewriter_def.h:769\n  #14 0x55fe455ab861 in void rewriter_tpl<mev::evaluator_cfg>::main_loop<false>(expr*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/rewriter/rewriter_def.h:728\n  #15 0x55fe455930bb in rewriter_tpl<mev::evaluator_cfg>::operator()(expr*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/rewriter/rewriter_def.h:800\n  #16 0x55fe455930bb in rewriter_tpl<mev::evaluator_cfg>::operator()(expr*, obj_ref<expr, ast_manager>&) ../src/ast/rewriter/rewriter.h:357\n  #17 0x55fe455930bb in model_evaluator::operator()(expr*, obj_ref<expr, ast_manager>&) ../src/model/model_evaluator.cpp:671\n  #18 0x55fe455930bb in model_evaluator::operator()(expr*) ../src/model/model_evaluator.cpp:679\n...\nSUMMARY: AddressSanitizer: stack-overflow (/usr/lib/x86_64-linux-gnu/libasan.so.4+0xeebf3) \n==10551==ABORTING\n[615] % \n[615] % cat small.smt2\n(declare-fun a (Int) Bool)\n(declare-fun b (Int) Bool)\n(assert (= (= a b) (b 0)))\n(check-sat-using ufbv)\n[616] %\n```\n\nOS: Ubuntu 18.04\nCommit: 6a540e8\n",
    "priority": 1
  },
  "340": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :proof true)\n(set-option :rewriter.pull_cheap_ite true)\n(declare-datatypes ((a 0)) (((j) (b))))\n(declare-sort c 0)\n(declare-fun d () (Array c a))\n(declare-fun f () (Array c a))\n(declare-fun h () (Array c a))\n(declare-fun k () (Array c (Array c a)))\n(declare-fun l () (Array c (Array c a)))\n(assert (forall ((e c)) (= (select k e) d)))\n(assert (forall ((m c)) (= (select f m) j)))\n(assert (forall ((g c)) (= (select l g) f)))\n(assert (forall ((i c)) (= (select h i) b)))\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ast/rewriter/rewriter_def.h\nLine: 176\nrewrites_to(r, pr)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 2695221\n",
    "priority": 1
  },
  "341": {
    "body": "Hi,\nFor this case, Z3  gives an invalid model:\n```\n[618] % z3-4.8.5 model_validate=true small.smt2\nsat\n(error \"line 5 column 35: an invalid model was generated\")\n[619] % z3-4.8.6 model_validate=true small.smt2\nsat\n(error \"line 5 column 35: an invalid model was generated\")\n[620] % z3-4.8.7 model_validate=true small.smt2\nsat\n(error \"line 5 column 35: an invalid model was generated\")\n[621] % z3 model_validate=true small.smt2\nsat\n(error \"line 5 column 35: an invalid model was generated\")\n[622] % \n[622] % cat small.smt2\n(set-logic QF_UFLIA)\n(declare-fun a () Bool)\n(declare-fun b () Bool)\n(assert (= (+ (ite a 1 0) (ite b 1 0)) 1))\n(check-sat-using (then card2bv smt))\n[623] %\n```\n\nOS: Ubuntu 18.04\nCommit: 6088da5\n",
    "priority": 0
  },
  "342": {
    "body": "Hi, \r\nFor this case, smt.arith.solver=6 is slower than smt.arith.solver=2\r\n```\r\n[613] % time z3release smt.arith.solver=2 small.smt2\r\nsat\r\nsat\r\nreal  0m0.020s\r\nuser  0m0.012s\r\nsys   0m0.004s\r\n[614] % time z3release smt.arith.solver=6 small.smt2\r\nsat\r\nsat\r\nreal  0m23.188s\r\nuser  0m22.999s\r\nsys   0m0.008s\r\n[615] % \r\n[615] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(assert (> a 2))\r\n(check-sat)\r\n(assert (not (> 0 (+ (/ 1 c a)) (- 1))))\r\n(check-sat)\r\n[616] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 5b6255e\r\n",
    "priority": 1
  },
  "343": {
    "body": "Hi,\r\nFor this case, Z3  throws out an assertion violation:\r\n```\r\n[602] % z3 small.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/muz/spacer/spacer_util.cpp\r\nLine: 430\r\n!m.is_false(a)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[603] % z3release small.smt2\r\nUnexpected expression: false\r\nASSERTION VIOLATION\r\nFile: ../src/muz/spacer/spacer_util.cpp\r\nLine: 529\r\nUNREACHABLE CODE WAS REACHED.\r\nZ3 4.8.8.0\r\nPlease file an issue with this message and more detail about how you encountered it at https://github.com/Z3Prover/z3/issues/new\r\n[604] % \r\n[604] % cat small.smt2\r\n(set-logic HORN)\r\n(set-option :rewriter.elim_ite false)\r\n(assert (forall ((a Int) (b Int)) (= (ite (= b 0) 0 1) (ite (= a 0) 0 2))))\r\n(check-sat)\r\n[605] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 5b6255e\r\n",
    "priority": 0
  },
  "344": {
    "body": "Hi,\nFor this case, Z3  gives an invalid model:\n```\n[630] % z3-4.8.7 model_validate=true small.smt2\nsat\n[631] % z3 model_validate=true small.smt2\nsat\n(error \"line 11 column 10: an invalid model was generated\")\n[632] % \n[632] % cat small.smt2\n(set-option :smt.phase_selection 5)\n(declare-datatypes ((a 0)) (((b))))\n(define-fun v () (Seq Bool) (as seq.empty (Seq Bool)))\n(declare-fun e () (Seq a))\n(define-fun w () Int (seq.len e))\n(define-fun o () (Seq Bool) (seq.unit false))\n(define-fun p () (Seq Bool) (ite (= w (- 1)) v o))\n(define-fun s () (Seq Bool) (seq.extract p 1 (- (seq.len p) 1)))\n(define-fun u () (Seq Bool) (seq.extract s 1 (- (seq.len s) 1)))\n(assert (not (seq.nth u 0)))\n(check-sat)\n[633] %\n```\n\nOS: Ubuntu 18.04\nCommit: 5b6255e\n",
    "priority": 0
  },
  "345": {
    "body": "\n```\n[629] % z3 small.smt2\nBad literal: (< query!0_1_n (* 2 query!0_0_n))\nASSERTION VIOLATION\nFile: ../src/muz/spacer/spacer_util.cpp\nLine: 377\nm_model.is_true(res)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[630] % \n[630] % cat small.smt2\n(set-logic HORN)\n(set-option :smt.phase_selection 5)\n(assert (forall ((a Int) (b Int)) (and (= (* 2 a) b) (xor (distinct 0 b) (> b 0)))))\n(check-sat)\n[631] %\n```\n\nOS: Ubuntu 18.04\nCommit: 799b613\n",
    "priority": 1
  },
  "346": {
    "body": "Hi,\nFor this case, Z3  throws out a segmentation fault:\n```\n[517] % z3release small.smt2\nSegmentation fault\n[518] % z3san small.smt2\nASAN:DEADLYSIGNAL\n=================================================================\n==57744==ERROR: AddressSanitizer: SEGV on unknown address 0x002e7fff8009 (pc 0x56397ef2ffbf bp 0x7ffe350733c0 sp 0x7ffe35073270 T0)\n==57744==The signal is caused by a READ memory access.\n  #0 0x56397ef2ffbe in smt::context::add_diseq(smt::enode*, smt::enode*) ../src/smt/smt_context.cpp:1060\n  #1 0x56397ef4efa9 in smt::context::propagate_atoms() ../src/smt/smt_context.cpp:1326\n  #2 0x56397ef5a895 in smt::context::propagate() ../src/smt/smt_context.cpp:1685\n  #3 0x56397ef661a7 in smt::context::bounded_search() ../src/smt/smt_context.cpp:3725\n  #4 0x56397ef66e07 in smt::context::search() ../src/smt/smt_context.cpp:3609\n  #5 0x56397ef68e99 in smt::context::check(unsigned int, expr* const*, bool) ../src/smt/smt_context.cpp:3492\n  #6 0x56397fb56219 in smt::model_checker::check(quantifier*) ../src/smt/smt_model_checker.cpp:356\n  #7 0x56397fb56c01 in smt::model_checker::check_quantifiers(bool&, unsigned int&) ../src/smt/smt_model_checker.cpp:484\n  #8 0x56397fb572ef in smt::model_checker::check(proto_model*, obj_map<smt::enode, app*> const&) ../src/smt/smt_model_checker.cpp:430\n  #9 0x56397f680dc5 in smt::default_qm_plugin::check_model(proto_model*, obj_map<smt::enode, app*> const&) ../src/smt/smt_quantifier.cpp:722\n  #10 0x56397f680dc5 in smt::quantifier_manager::imp::check_model(proto_model*, obj_map<smt::enode, app*> const&) ../src/smt/smt_quantifier.cpp:384\n  #11 0x56397f680dc5 in smt::quantifier_manager::check_model(proto_model*, obj_map<smt::enode, app*> const&) ../src/smt/smt_quantifier.cpp:492\n  #12 0x56397ef65166 in smt::context::restart(lbool&, unsigned int) ../src/smt/smt_context.cpp:3644\n  #13 0x56397ef66e3e in smt::context::search() ../src/smt/smt_context.cpp:3614\n  #14 0x56397ef69b3d in smt::context::setup_and_check(bool) ../src/smt/smt_context.cpp:3432\n  #15 0x56397edecd2f in smt_tactic::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/smt/tactic/smt_tactic.cpp:201\n  #16 0x56398088dd27 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #17 0x563980880791 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #18 0x563980880791 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #19 0x563980880791 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #20 0x563980880791 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #21 0x563980880791 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #22 0x563980880791 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #23 0x563980880791 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #24 0x563980880791 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #25 0x563980880791 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #26 0x563980880791 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #27 0x563980880791 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #28 0x563980880791 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #29 0x56398088dd27 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #30 0x5639807eff3a in exec(tactic&, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactic.cpp:148\n  #31 0x5639807f223d in check_sat(tactic&, ref<goal>&, ref<model>&, labels_vec&, obj_ref<app, ast_manager>&, obj_ref<dependency_manager<ast_manager::expr_dependency_config>::dependency, ast_manager>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) ../src/tactic/tactic.cpp:168\n  #32 0x5639806f17c8 in check_sat_core2 ../src/solver/tactic2solver.cpp:185\n  #33 0x5639806f8b87 in solver_na2as::check_sat_core(unsigned int, expr* const*) ../src/solver/solver_na2as.cpp:67\n  #34 0x5639806b64b4 in combined_solver::check_sat_core(unsigned int, expr* const*) ../src/solver/combined_solver.cpp:246\n  #35 0x5639806974a1 in solver::check_sat(unsigned int, expr* const*) ../src/solver/solver.cpp:330\n  #36 0x5639805e9e80 in cmd_context::check_sat(unsigned int, expr* const*) ../src/cmd_context/cmd_context.cpp:1549\n  #37 0x563980539853 in smt2::parser::parse_check_sat() ../src/parsers/smt2/smt2parser.cpp:2596\n  #38 0x563980539853 in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:2938\n  #39 0x563980539853 in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #40 0x5639804f0e45 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\n  #41 0x56397db63646 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #42 0x56397db3bd0e in main ../src/shell/main.cpp:352\n  #43 0x7fa3025d7b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #44 0x56397db4fc89 in _start (/home/suz/software/z3san/build-04292020120653-9f6a733/z3+0x211c89)\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../src/smt/smt_context.cpp:1060 in smt::context::add_diseq(smt::enode*, smt::enode*)\n==57744==ABORTING\n[519] % \n[519] % cat small.smt2\n(set-option :rewriter.expand_nested_stores true)\n(declare-fun b ((Array Int (Array Int Real)) Int) Bool)\n(declare-fun c () Int)\n(declare-fun a0 () (Array Int (Array Int Real)))\n(declare-fun d () Real)\n(declare-fun a1 () (Array Int (Array Int Real)))\n(declare-fun f () Real)\n(declare-fun a3 () (Array Int (Array Int Real)))\n(declare-fun e3 () Real)\n(declare-fun a4 () (Array Int (Array Int Real)))\n(declare-fun e4 () Real)\n(declare-fun g () (Array Int (Array Int Real)))\n(assert (forall ((a (Array Int (Array Int Real))) (c Int)) (distinct (b a c)\n(exists ((h Int) (i Int)) (distinct (select (a h) i) (select (a i) h))))))\n(assert (b a0 c))\n(assert (= a1 (store a0 93 (store (select a0 0) (- 3) d)) (store a1 15 (store (select a1 204) 0 f))))\n(assert (distinct a4 (store a3 0 (store (select a3 17) 0 e3)) (store a4 286 (store (select a4 4) 44 e4))))\n(assert (b g c))\n(check-sat)\n[520] %\n```\n\nOS: Ubuntu 18.04\nCommit: 9f6a733\n",
    "priority": 1
  },
  "347": {
    "body": "Hi,\r\nFor this case, Z3 ASAN build throws out a heap-use-after-free:\r\n```\r\n[631] % z3 small.smt2\r\nunknown\r\n[632] % z3release small.smt2\r\nunknown\r\n[633] % z3san small.smt2\r\n=================================================================\r\n==5628==ERROR: AddressSanitizer: heap-use-after-free on address 0x61c00003d2c0 at pc 0x55feb9c59d28 bp 0x7f5e0b57d650 sp 0x7f5e0b57d640\r\nREAD of size 4 at 0x61c00003d2c0 thread T3\r\n  #0 0x55feb9c59d27 in smt::theory_datatype::final_check_eh() ../src/smt/theory_datatype.cpp:490\r\n  #1 0x55feb9110e14 in smt::context::final_check() ../src/smt/smt_context.cpp:3860\r\n  #2 0x55feb9120c26 in smt::context::bounded_search() ../src/smt/smt_context.cpp:3776\r\n  #3 0x55feb9121527 in smt::context::search() ../src/smt/smt_context.cpp:3603\r\n  #4 0x55feb91235b9 in smt::context::check(unsigned int, expr* const*, bool) ../src/smt/smt_context.cpp:3486\r\n  #5 0x55feb979da44 in smt::parallel::operator()(ref_vector<expr, ast_manager> const&) ../src/smt/smt_parallel.cpp:39\r\n  #6 0x55feb912393e in smt::context::check(unsigned int, expr* const*, bool) ../src/smt/smt_context.cpp:3475\r\n  #7 0x55feba89b137 in solver_na2as::check_sat_core(unsigned int, expr* const*) ../src/solver/solver_na2as.cpp:67\r\n  #8 0x55feba839a51 in solver::check_sat(unsigned int, expr* const*) ../src/solver/solver.cpp:330\r\n  #9 0x55feba826a42 in solver::check_sat(ref_vector<expr, ast_manager> const&) ../src/solver/solver.h:149\r\n  #10 0x55feba826a42 in parallel_tactic::solver_state::simplify() ../src/solver/parallel_tactic.cpp:265\r\n  #11 0x55feba826a42 in parallel_tactic::cube_and_conquer(parallel_tactic::solver_state&) ../src/solver/parallel_tactic.cpp:481\r\n  #12 0x55feba82f015 in parallel_tactic::run_solver() ../src/solver/parallel_tactic.cpp:634\r\n  #13 0x55feba831ce0 in parallel_tactic::solve(ref<model>&)::{lambda()#1}::operator()() const ../src/solver/parallel_tactic.cpp:670\r\n  #14 0x55feba831ce0 in void std::__invoke_impl<void, parallel_tactic::solve(ref<model>&)::{lambda()#1}>(std::__invoke_other, parallel_tactic::solve(ref<model>&)::{lambda()#1}&&) /usr/include/c++/7/bits/invoke.h:60\r\n  #15 0x55feba831ce0 in std::__invoke_result<parallel_tactic::solve(ref<model>&)::{lambda()#1}>::type std::__invoke<parallel_tactic::solve(ref<model>&)::{lambda()#1}>(std::__invoke_result&&, (parallel_tactic::solve(ref<model>&)::{lambda()#1}&&)...) /usr/include/c++/7/bits/invoke.h:95\r\n  #16 0x55feba831ce0 in decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<parallel_tactic::solve(ref<model>&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) /usr/include/c++/7/thread:234\r\n  #17 0x55feba831ce0 in std::thread::_Invoker<std::tuple<parallel_tactic::solve(ref<model>&)::{lambda()#1}> >::operator()() /usr/include/c++/7/thread:243\r\n  #18 0x55feba831ce0 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<parallel_tactic::solve(ref<model>&)::{lambda()#1}> > >::_M_run() /usr/include/c++/7/thread:186\r\n  #19 0x7f5e100c46de (/usr/lib/x86_64-linux-gnu/libstdc++.so.6+0xbd6de)\r\n  #20 0x7f5e103976da in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x76da)\r\n  #21 0x7f5e0f78188e in __clone (/lib/x86_64-linux-gnu/libc.so.6+0x12188e)\r\n...\r\nSUMMARY: AddressSanitizer: heap-use-after-free ../src/smt/theory_datatype.cpp:490 in smt::theory_datatype::final_check_eh()\r\n...\r\n==5628==ABORTING\r\n[634] % \r\n[634] % cat small.smt2\r\n(set-option :smt.phase_selection 5)\r\n(set-option :parallel.enable true)\r\n(set-option :smt.threads 5)\r\n(set-option :rewriter.cache_all true)\r\n(declare-sort T)\r\n(declare-datatypes ((L 0)) (((C (h T) (t L)) N)))\r\n(declare-datatypes ((O 0)) (((M) (S (u T)))))\r\n(declare-fun a () Bool)\r\n(declare-fun b () O)\r\n(declare-fun c () Bool)\r\n(declare-fun d ((Array T Bool) L) Bool)\r\n(declare-fun e ((Array T Bool) L) O)\r\n(declare-fun f ((Array T Bool) L) Bool)\r\n(declare-fun g () Bool)\r\n(declare-fun h ((Array T Bool) L) Bool)\r\n(declare-fun i () Bool)\r\n(assert (forall ((j (Array T Bool)) (k L)) (= (d j k) (ite ((_ is S) (e j k)) (f j k) (ite ((_ is M) (e j k)) (and (f j k)) a)))))\r\n(assert (forall ((l (Array T Bool)) (m L)) (distinct (e l m) (ite ((_ is C) m) (ite (l (h m)) (S (h m)) (e l (t m))) (ite ((_ is N) m) M b)))))\r\n(assert (forall ((n (Array T Bool)) (o L)) (distinct (f n o) (ite ((_ is C) o) (or (or (n (h o)))) c))))\r\n(assert (forall ((p (Array T Bool)) (q L)) (= (h p q) (ite ((_ is C) q) (and (xor (d p q) (d p q))) (ite ((_ is N) q) (d p q) g)))))\r\n(assert (forall ((q L) (p (Array T Bool))) (ite (and (h p (t q)) (d p q)) ((_ is C) q) (ite ((_ is N) q) (d p q) i))))\r\n(check-sat-using qflia)\r\n[635] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 9f6a733\r\n",
    "priority": 1
  },
  "348": {
    "body": "Hi,\nFor this formula:\n```\n(set-logic HORN)\n(declare-fun a (Bool Bool Int) Bool)\n(assert (forall ((b Bool) (f Bool) (g Int))\n     (=> (not b) (= g 0) (a b f g))))\n(assert (forall ((b Bool) (f Bool) (g Int) (c Bool) (d Int) (e Bool))\n     (=> (a b f g) (= c b) e (a c e d))))\n(assert (forall ((b Bool) (f Bool ))\n     (=> (a b f 1) (= b f) false)))\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/muz/spacer/spacer_context.cpp\nLine: 929\n!lemma->is_ground() || is_clause(m, l)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 9f6a733\n",
    "priority": 1
  },
  "349": {
    "body": "Hi,\r\nFor this case,\r\nZ3  throws out an assertion violation:\r\n```\r\n[596] % z3 small.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[597] % z3release small.smt2\r\nunknown\r\n[598] % z3release small.smt2\r\nunknown\r\n[599] % z3release small.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.cpp\r\nLine: 431\r\nUNREACHABLE CODE WAS REACHED.\r\nZ3 4.8.8.0\r\nPlease file an issue with this message and more detail about how you encountered it at https://github.com/Z3Prover/z3/issues/new\r\n[600] % z3san small.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.cpp\r\nLine: 431\r\nUNREACHABLE CODE WAS REACHED.\r\nZ3 4.8.8.0\r\nPlease file an issue with this message and more detail about how you encountered it at https://github.com/Z3Prover/z3/issues/new\r\n[601] % z3san small.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.cpp\r\nLine: 431\r\nUNREACHABLE CODE WAS REACHED.\r\nZ3 4.8.8.0\r\nPlease file an issue with this message and more detail about how you encountered it at https://github.com/Z3Prover/z3/issues/new\r\n[602] % \r\n[602] % cat small.smt2\r\n(set-option :smt.random_seed 2)\r\n(set-option :trace true)\r\n(set-option :smt.dack.eq true)\r\n(declare-datatypes ((Lst 0) (Nat 0)) (((cons (a Nat) (tail Lst)) (nil)) ((succ (b Nat)) c)))\r\n(declare-fun len (Lst) Nat)\r\n(declare-fun append (Lst Lst) Lst)\r\n(assert (forall ((x Lst)) (= (append nil x) x)))\r\n(assert (forall ((x Nat) (d Lst) (z Lst)) (= (append (cons x d) z) (cons x (append d z)))))\r\n(assert (not (forall ((x Lst) (d Lst)) (= (len (append x d)) (len (append d x))))))\r\n(check-sat-using qfidl)\r\n[603] %\r\n```\r\nThe assertion violation is flaky for release build.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 9f6a733\r\n",
    "priority": 1
  },
  "350": {
    "body": "\n```\n[632] % z3 small.smt2 \nASSERTION VIOLATION\nFile: ../src/ast/rewriter/seq_rewriter.cpp\nLine: 460\nnum_args == 2\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[633] % z3release small.smt2 \nSegmentation fault\n[634] % z3san small.smt2 \n=================================================================\n==2834==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60300000f180 at pc 0x5647f49bcebf bp 0x7ffefd598850 sp 0x7ffefd598840\nREAD of size 8 at 0x60300000f180 thread T0\n  #0 0x5647f49bcebe in seq_rewriter::mk_app_core(func_decl*, unsigned int, expr* const*, obj_ref<expr, ast_manager>&) ../src/ast/rewriter/seq_rewriter.cpp:461\n  #1 0x5647f48409c3 in reduce_app_core ../src/ast/rewriter/th_rewriter.cpp:223\n  #2 0x5647f48409c3 in reduce_app ../src/ast/rewriter/th_rewriter.cpp:620\n  #3 0x5647f4849e6a in process_app<false> ../src/ast/rewriter/rewriter_def.h:298\n  #4 0x5647f4849e6a in resume_core<false> ../src/ast/rewriter/rewriter_def.h:769\n  #5 0x5647f4859eba in main_loop<false> ../src/ast/rewriter/rewriter_def.h:728\n  #6 0x5647f4859eba in operator() ../src/ast/rewriter/rewriter_def.h:800\n  #7 0x5647f4859eba in th_rewriter::operator()(expr*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/rewriter/th_rewriter.cpp:860\n  #8 0x5647f31f4abb in asserted_formulas::assert_expr(expr*, app*) ../src/smt/asserted_formulas.cpp:158\n  #9 0x5647f2ce0b4c in smt::context::assert_expr_core(expr*, app*) ../src/smt/smt_context.cpp:2901\n  #10 0x5647f2ce0b4c in smt::context::assert_expr(expr*, app*) ../src/smt/smt_context.cpp:2913\n  #11 0x5647f2ce0b4c in smt::context::assert_expr(expr*) ../src/smt/smt_context.cpp:2908\n  #12 0x5647f441279c in solver::assert_expr(expr*) ../src/solver/solver.cpp:210\n  #13 0x5647f441279c in solver::assert_expr(expr*) ../src/solver/solver.cpp:210\n  #14 0x5647f43490c8 in cmd_context::assert_expr(expr*) ../src/cmd_context/cmd_context.cpp:1319\n  #15 0x5647f42aaf58 in smt2::parser::parse_assert() ../src/parsers/smt2/smt2parser.cpp:2571\n  #16 0x5647f42b16f7 in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:2926\n  #17 0x5647f42b16f7 in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #18 0x5647f4268b85 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\n  #19 0x5647f18fa886 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #20 0x5647f18d30be in main ../src/shell/main.cpp:352\n  #21 0x7f6619894b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #22 0x5647f18e6ef9 in _start (/home/suz/software/z3san/build-04272020171048-38e0968/z3+0x1f7ef9)\n...\nSUMMARY: AddressSanitizer: heap-buffer-overflow ../src/ast/rewriter/seq_rewriter.cpp:461 in seq_rewriter::mk_app_core(func_decl*, unsigned int, expr* const*, obj_ref<expr, ast_manager>&)\n...\n==2834==ABORTING\n[635] % \n[635] % cat small.smt2 \n(declare-fun a () String)\n(assert (str.in.re a (re.inter (str.to.re \"a\"))))\n(check-sat)\n[636] %\n```\n\nOS: Ubuntu 18.04\nCommit: b571e43\n",
    "priority": 1
  },
  "351": {
    "body": "\n```\n[716] % z3 small.smt2\n(error \"line 3 column 35: invalid expression, unexpected ')'\")\n(error \"line 4 column 27: invalid expression, unexpected ')'\")\nASSERTION VIOLATION\nFile: ../src/ast/recfun_decl_plugin.h\nLine: 240\nm_plugin->has_def(f)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[717] % \n[717] % z3release small.smt2\n(error \"line 3 column 35: invalid expression, unexpected ')'\")\n(error \"line 4 column 27: invalid expression, unexpected ')'\")\nSegmentation fault\n[718] % \n[718] % z3san small.smt2\n(error \"line 3 column 35: invalid expression, unexpected ')'\")\n(error \"line 4 column 27: invalid expression, unexpected ')'\")\nASAN:DEADLYSIGNAL\n=================================================================\n==25940==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x564f44a40f73 bp 0x7fff24a0d540 sp 0x7fff24a0d210 T0)\n==25940==The signal is caused by a READ memory access.\n==25940==Hint: address points to the zero page.\n  #0 0x564f44a40f72 in recfun::decl::plugin::get_def(func_decl*) ../src/ast/recfun_decl_plugin.h:192\n  #1 0x564f44a40f72 in recfun::util::get_def(func_decl*) ../src/ast/recfun_decl_plugin.h:241\n  #2 0x564f44a40f72 in recfun_rewriter::mk_app_core(func_decl*, unsigned int, expr* const*, obj_ref<expr, ast_manager>&) ../src/ast/rewriter/recfun_rewriter.cpp:29\n  #3 0x564f44a145b3 in reduce_app_core ../src/ast/rewriter/th_rewriter.cpp:225\n  #4 0x564f44a145b3 in reduce_app ../src/ast/rewriter/th_rewriter.cpp:620\n  #5 0x564f44a1de6a in process_app<false> ../src/ast/rewriter/rewriter_def.h:298\n  #6 0x564f44a1de6a in resume_core<false> ../src/ast/rewriter/rewriter_def.h:769\n  #7 0x564f44a2deba in main_loop<false> ../src/ast/rewriter/rewriter_def.h:728\n  #8 0x564f44a2deba in operator() ../src/ast/rewriter/rewriter_def.h:800\n  #9 0x564f44a2deba in th_rewriter::operator()(expr*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/rewriter/th_rewriter.cpp:860\n  #10 0x564f433c8abb in asserted_formulas::assert_expr(expr*, app*) ../src/smt/asserted_formulas.cpp:158\n  #11 0x564f42eb7b80 in smt::context::assert_expr_core(expr*, app*) ../src/smt/smt_context.cpp:2901\n  #12 0x564f42eb7b80 in smt::context::assert_expr(expr*, app*) ../src/smt/smt_context.cpp:2913\n  #13 0x564f42eb7b80 in smt::context::assert_expr(expr*) ../src/smt/smt_context.cpp:2908\n  #14 0x564f42eb7b80 in smt::context::copy(smt::context&, smt::context&, bool) ../src/smt/smt_context.cpp:178\n  #15 0x564f435450d9 in smt::parallel::operator()(ref_vector<expr, ast_manager> const&) ../src/smt/smt_parallel.cpp:74\n  #16 0x564f42ec9613 in smt::context::setup_and_check(bool) ../src/smt/smt_context.cpp:3414\n  #17 0x564f42d4b83f in smt_tactic::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/smt/tactic/smt_tactic.cpp:201\n  #18 0x564f447db4e7 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #19 0x564f447cde41 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #20 0x564f447cde41 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #21 0x564f447cde41 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #22 0x564f447cde41 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #23 0x564f447cde41 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #24 0x564f447cde41 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #25 0x564f447cde41 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #26 0x564f447cde41 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #27 0x564f447cde41 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #28 0x564f447cde41 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #29 0x564f447cde41 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #30 0x564f447cde41 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #31 0x564f447db4e7 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #32 0x564f4473ceda in exec(tactic&, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactic.cpp:148\n  #33 0x564f4473f1dd in check_sat(tactic&, ref<goal>&, ref<model>&, labels_vec&, obj_ref<app, ast_manager>&, obj_ref<dependency_manager<ast_manager::expr_dependency_config>::dependency, ast_manager>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) ../src/tactic/tactic.cpp:168\n  #34 0x564f4463db38 in check_sat_core2 ../src/solver/tactic2solver.cpp:185\n  #35 0x564f44644ef7 in solver_na2as::check_sat_core(unsigned int, expr* const*) ../src/solver/solver_na2as.cpp:67\n  #36 0x564f44602904 in combined_solver::check_sat_core(unsigned int, expr* const*) ../src/solver/combined_solver.cpp:246\n  #37 0x564f445e39f1 in solver::check_sat(unsigned int, expr* const*) ../src/solver/solver.cpp:330\n  #38 0x564f4453ea60 in cmd_context::check_sat(unsigned int, expr* const*) ../src/cmd_context/cmd_context.cpp:1549\n  #39 0x564f44485663 in smt2::parser::parse_check_sat() ../src/parsers/smt2/smt2parser.cpp:2596\n  #40 0x564f44485663 in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:2938\n  #41 0x564f44485663 in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #42 0x564f4443cb85 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\n  #43 0x564f41ace886 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #44 0x564f41aa70be in main ../src/shell/main.cpp:352\n  #45 0x7fb589f26b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #46 0x564f41abaef9 in _start (/home/suz/software/z3san/build-04272020171048-38e0968/z3+0x1f7ef9)\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../src/ast/recfun_decl_plugin.h:192 in recfun::decl::plugin::get_def(func_decl*)\n==25940==ABORTING\n[719] % \n[719] % cat small.smt2\n(set-option :smt.threads 2)\n(declare-datatypes ((a 0)) (((b (c a)) (d))))\n(define-fun-rec app ((e a) (h a)) a)\n(define-fun-rec f ((g a)) a)\n(assert (forall ((i a) (j a)) (= (f (app i j)) j)))\n(assert (not (forall ((k a)) (= (f (f k)) k))))\n(check-sat)\n[720] %\n```\n\nOS: Ubuntu 18.04\nCommit: b571e43\n",
    "priority": 1
  },
  "352": {
    "body": "\n```\n[532] % z3 small.smt2\nunknown\nunknown\nASSERTION VIOLATION\nFile: ../src/util/vector.h\nLine: 370\nidx < size()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[533] % z3release small.smt2\nunknown\nunknown\nSegmentation fault\n[534] % z3san small.smt2\nunknown\nunknown\nASAN:DEADLYSIGNAL\n=================================================================\n==6832==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55ef49ffccdb bp 0x7ffdbbf0aff0 sp 0x7ffdbbf0ae20 T0)\n==6832==The signal is caused by a READ memory access.\n==6832==Hint: address points to the zero page.\n  #0 0x55ef49ffccda in mpz_manager<true>::is_zero(mpz const&) ../src/util/mpz.h:444\n  #1 0x55ef49ffccda in mpq_manager<true>::is_zero(mpz const&) ../src/util/mpq.h:175\n  #2 0x55ef49ffccda in mpq_manager<true>::is_zero(mpq const&) ../src/util/mpq.h:185\n  #3 0x55ef49ffccda in rational::is_zero() const ../src/util/rational.h:267\n  #4 0x55ef49ffccda in inf_rational::is_zero() const ../src/util/inf_rational.h:278\n  #5 0x55ef49ffccda in smt::theory_dense_diff_logic<smt::mi_ext>::fix_zero() ../src/smt/theory_dense_diff_logic_def.h:802\n  #6 0x55ef4a00c4d1 in smt::theory_dense_diff_logic<smt::mi_ext>::init_model(smt::model_generator&) ../src/smt/theory_dense_diff_logic_def.h:826\n  #7 0x55ef4a3a57a6 in smt::model_generator::init_model() ../src/smt/smt_model_generator.cpp:67\n  #8 0x55ef4a3b82b2 in smt::model_generator::mk_model() ../src/smt/smt_model_generator.cpp:497\n  #9 0x55ef49c3bcff in smt::context::mk_proto_model() ../src/smt/smt_context.cpp:4443\n  #10 0x55ef49c5358f in smt::context::get_model(ref<model>&) ../src/smt/smt_context.cpp:4474\n  #11 0x55ef4b3a0ebc in check_sat_result::get_model(ref<model>&) ../src/solver/check_sat_result.h:58\n  #12 0x55ef4b3a0ebc in combined_solver::get_model_core(ref<model>&) ../src/solver/combined_solver.cpp:298\n  #13 0x55ef4b2ebd38 in check_sat_result::get_model(ref<model>&) ../src/solver/check_sat_result.h:58\n  #14 0x55ef4b2ebd38 in cmd_context::is_model_available(ref<model>&) const ../src/cmd_context/cmd_context.cpp:2064\n  #15 0x55ef4b3264e2 in get_model_cmd::execute(cmd_context&) ../src/cmd_context/basic_cmds.cpp:116\n  #16 0x55ef4b22d878 in smt2::parser::parse_ext_cmd(int, int) ../src/parsers/smt2/smt2parser.cpp:2895\n  #17 0x55ef4b2344ec in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:3001\n  #18 0x55ef4b2344ec in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #19 0x55ef4b1ebb85 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179 \n  #20 0x55ef4887d886 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #21 0x55ef488560be in main ../src/shell/main.cpp:352\n  #22 0x7f6b19f3db96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #23 0x55ef48869ef9 in _start (/home/suz/software/z3san/build-04272020171048-38e0968/z3+0x1f7ef9)\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../src/util/mpz.h:444 in mpz_manager<true>::is_zero(mpz const&)\n==6832==ABORTING\n[535] %\n[535] % cat small.smt2\n(set-option :smt.arith.solver 3)\n(declare-fun a () String)\n(assert (= (str.len a) 0))\n(check-sat (= a \"\"))\n(check-sat)\n(get-model)\n[536] %\n```\n\nOS: Ubuntu 18.04\nCommit: 38e0968\n",
    "priority": 1
  },
  "353": {
    "body": "\n```\n[682] % z3release rewriter.flat=false smt.threads=2 model_validate=true small.smt2\nsat\n(error \"line 3 column 10: an invalid model was generated\")\n[683] % \n[683] % cat small.smt2\n(declare-fun s () String)\n(assert (str.contains (str.substr (str.replace (str.substr s 0 (+ (str.indexof s \"a\" 0) 1)) \"a\" \"b\") 1 (str.len s)) \"c\"))\n(check-sat)\n[684] %\n```\nOS: Ubuntu 18.04\nCommit: 38e0968\n",
    "priority": 1
  },
  "354": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(declare-fun n () Real)\n(declare-fun k () Real)\n(declare-fun d () Real)\n(declare-fun o () Real)\n(declare-fun p () Real)\n(declare-fun e () Real)\n(declare-fun f () Real)\n(declare-fun l () Real)\n(declare-fun g () Real)\n(declare-fun m () Real)\n(declare-fun h () Real)\n(declare-fun i () Real)\n(assert (not (exists ((j Real)) (=> (and (=> (<= 0 j f) (<= j g)) (>=\n f 0) (= (/ c d) m) (> (/ a n) (+ m (/ (* l l) (* 2 (- (- b (-\n 680.2932226634903)) k))) (* (+ (/ p e) 1) (+ (* (/ p 2) g g) (* g\n l))))) (>= l 0) (<= l (/ 0 0)) (< (/ a n) i) (> (- (- b (-\n 680.2932226634903)) k) 0) (>= p 0)) (or (= h 7) (< o f ) (> (/ a n)\n (+ (* f l) (/ (* l l) (* 2 (- (- b (- 680.2932226634903))\n k))))))))))\n(assert (= a (* n o)))\n(assert (= o (/ a n)))\n(assert (= b (+ e k (- 680.2932226634903))))\n(assert (= d (/ c o)))\n(assert (= o (/ c d)))\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\n[549] % z3 small.smt2\nunsat\nASSERTION VIOLATION\nFile: ../src/math/polynomial/polynomial.cpp\nLine: 801\nm_monomials.empty()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[550] % \n[550] % cat small.smt2\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(declare-fun n () Real)\n(declare-fun k () Real)\n(declare-fun d () Real)\n(declare-fun o () Real)\n(declare-fun p () Real)\n(declare-fun e () Real)\n(declare-fun f () Real)\n(declare-fun l () Real)\n(declare-fun g () Real)\n(declare-fun m () Real)\n(declare-fun h () Real)\n(declare-fun i () Real)\n(assert (not (exists ((j Real)) (=> (and (=> (<= 0 j f) (<= j g)) (>=\n f 0) (= (/ c d) m) (> (/ a n) (+ m (/ (* l l) (* 2 (- (- b (-\n 680.2932226634903)) k))) (* (+ (/ p e) 1) (+ (* (/ p 2) g g) (* g\n l))))) (>= l 0) (<= l (/ 0 0)) (< (/ a n) i) (> (- (- b (-\n 680.2932226634903)) k) 0) (>= p 0)) (or (= h 7) (< o f ) (> (/ a n)\n (+ (* f l) (/ (* l l) (* 2 (- (- b (- 680.2932226634903))\n k))))))))))\n(assert (= a (* n o)))\n(assert (= o (/ a n)))\n(assert (= b (+ e k (- 680.2932226634903))))\n(assert (= d (/ c o)))\n(assert (= o (/ c d)))\n(check-sat)\n[551] %\n```\n\nOS: Ubuntu 18.04\nCommit: 38e0968\n",
    "priority": 1
  },
  "355": {
    "body": "Hi,\nFor this case, Z3  gives an invalid model:\n```\n[566] % z3 model_validate=true small.smt2\nsat\n(error \"line 4 column 10: an invalid model was generated\")\n[567] % \n[567] % cat small.smt2\n(declare-fun a () String)\n(declare-fun b () String)\n(assert (= (str.substr (str.++ a \"aa\" b) 4 (str.len a)) a))\n(check-sat)\n[568] %\n```\n\nOS: Ubuntu 18.04\nCommit: 38e0968\n",
    "priority": 1
  },
  "356": {
    "body": "\n```\n[529] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/util/vector.h\nLine: 405\n!empty()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[530] % z3release small.smt2\nSegmentation fault\n[531] % z3san small.smt2\nASAN:DEADLYSIGNAL\n=================================================================\n==28377==ERROR: AddressSanitizer: SEGV on unknown address 0x00017fff7fff (pc 0x55c7832168ed bp 0x7ffdd9dc97c0 sp 0x7ffdd9dc9720 T0)\n==28377==The signal is caused by a READ memory access.\n  #0 0x55c7832168ec in ref_vector_core<expr, ref_manager_wrapper<expr, ast_manager> >::back() const ../src/util/ref_vector.h:121\n  #1 0x55c7832168ec in purify_arith_proc::rw_cfg::push_cnstr_pr(app*) ../src/tactic/arith/purify_arith_tactic.cpp:263\n  #2 0x55c78322dff5 in purify_arith_proc::process_quantifier(quantifier*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/tactic/arith/purify_arith_tactic.cpp:742\n  #3 0x55c78322ea90 in purify_arith_proc::rw_cfg::get_subst(expr*, expr*&, app*&) ../src/tactic/arith/purify_arith_tactic.cpp:696\n  #4 0x55c78322ea90 in bool rewriter_tpl<purify_arith_proc::rw_cfg>::visit<true>(expr*, unsigned int) ../src/ast/rewriter/rewriter_def.h:140\n  #5 0x55c783235074 in void rewriter_tpl<purify_arith_proc::rw_cfg>::main_loop<true>(expr*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/rewriter/rewriter_def.h:715\n  #6 0x55c78323a601 in rewriter_tpl<purify_arith_proc::rw_cfg>::operator()(expr*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/rewriter/rewriter_def.h:798\n  #7 0x55c78323a601 in purify_arith_proc::operator()(ref<model_converter>&, bool) ../src/tactic/arith/purify_arith_tactic.cpp:761\n  #8 0x55c783240abd in purify_arith_tactic::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/arith/purify_arith_tactic.cpp:908\n  #9 0x55c783a72f61 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:111\n  #10 0x55c783a73f57 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #11 0x55c783a73f57 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #12 0x55c7839d594a in exec(tactic&, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactic.cpp:148\n  #13 0x55c7839d7c4d in check_sat(tactic&, ref<goal>&, ref<model>&, labels_vec&, obj_ref<app, ast_manager>&, obj_ref<dependency_manager<ast_manager::expr_dependency_config>::dependency, ast_manager>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) ../src/tactic/tactic.cpp:168\n  #14 0x55c783787cc0 in check_sat_using_tactict_cmd::execute(cmd_context&) ../src/cmd_context/tactic_cmds.cpp:223\n  #15 0x55c7837172e8 in smt2::parser::parse_ext_cmd(int, int) ../src/parsers/smt2/smt2parser.cpp:2895\n  #16 0x55c78371df5c in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:3001\n  #17 0x55c78371df5c in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #18 0x55c7836d55f5 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\n  #19 0x55c780d671a6 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #20 0x55c780d3fa3e in main ../src/shell/main.cpp:352\n  #21 0x7f858678eb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #22 0x55c780d53819 in _start (/home/suz/software/z3san/build-04272020120633-8996e81/z3+0x1f7819)\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../src/util/ref_vector.h:121 in ref_vector_core<expr, ref_manager_wrapper<expr, ast_manager> >::back() const\n==28377==ABORTING\n[532] % \n[532] % cat small.smt2\n(set-option :proof true)\n(declare-sort a)\n(declare-fun f (a) a)\n(assert (forall ((t a)) (= (f t) t)))\n(check-sat-using purify-arith)\n[533] %\n```\n\nOS: Ubuntu 18.04\nCommit: 3a63c37\n",
    "priority": 1
  },
  "357": {
    "body": "\n```\n[528] % z3 small.smt2\nSegmentation fault\n[529] % z3release small.smt2\nSegmentation fault\n[530] % z3san small.smt2\nASAN:DEADLYSIGNAL\n=================================================================\n==29146==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000004 (pc 0x5605e1d5ed85 bp 0x7ffc1a197080 sp 0x7ffc1a197070 T0)\n==29146==The signal is caused by a READ memory access.\n==29146==Hint: address points to the zero page.\n  #0 0x5605e1d5ed84 in ast::get_kind() const ../src/ast/ast.h:504\n  #1 0x5605e1d5ed84 in get_sort(expr const*) ../src/ast/ast.cpp:423\n  #2 0x5605e1d5ed84 in ast_manager::get_sort(expr const*) const ../src/ast/ast.h:1734\n  #3 0x5605e1d5ed84 in basic_decl_plugin::check_proof_args(basic_op_kind, unsigned int, expr* const*) const ../src/ast/ast.cpp:771\n  #4 0x5605e1daba5e in basic_decl_plugin::check_proof_args(basic_op_kind, unsigned int, expr* const*) const ../src/ast/ast.cpp:765\n  #5 0x5605e1daba5e in basic_decl_plugin::mk_func_decl(int, unsigned int, parameter const*, unsigned int, expr* const*, sort*) ../src/ast/ast.cpp:1196\n  #6 0x5605e1d72ad2 in ast_manager::mk_func_decl(int, int, unsigned int, parameter const*, unsigned int, expr* const*, sort*) ../src/ast/ast.cpp:2009\n  #7 0x5605e1daa6ca in ast_manager::mk_app(int, int, unsigned int, parameter const*, unsigned int, expr* const*, sort*) ../src/ast/ast.cpp:2015\n  #8 0x5605e1daa6ca in ast_manager::mk_th_lemma(int, expr*, unsigned int, app* const*, unsigned int, parameter const*) ../src/ast/ast.cpp:3366\n  #9 0x5605e04c993b in purify_arith_proc::rw_cfg::push_cnstr_pr(app*) ../src/tactic/arith/purify_arith_tactic.cpp:263\n  #10 0x5605e04e117d in purify_arith_proc::process_quantifier(quantifier*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/tactic/arith/purify_arith_tactic.cpp:748\n  #11 0x5605e04e1a90 in purify_arith_proc::rw_cfg::get_subst(expr*, expr*&, app*&) ../src/tactic/arith/purify_arith_tactic.cpp:696\n  #12 0x5605e04e1a90 in bool rewriter_tpl<purify_arith_proc::rw_cfg>::visit<true>(expr*, unsigned int) ../src/ast/rewriter/rewriter_def.h:140\n  #13 0x5605e04e8074 in void rewriter_tpl<purify_arith_proc::rw_cfg>::main_loop<true>(expr*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/rewriter/rewriter_def.h:715\n  #14 0x5605e04ed601 in rewriter_tpl<purify_arith_proc::rw_cfg>::operator()(expr*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/rewriter/rewriter_def.h:798\n  #15 0x5605e04ed601 in purify_arith_proc::operator()(ref<model_converter>&, bool) ../src/tactic/arith/purify_arith_tactic.cpp:761\n  #16 0x5605e04f3abd in purify_arith_tactic::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/arith/purify_arith_tactic.cpp:908\n  #17 0x5605e0d25f61 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:111\n  #18 0x5605e0d26f57 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #19 0x5605e0d26f57 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #20 0x5605e0c8894a in exec(tactic&, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactic.cpp:148\n  #21 0x5605e0c8ac4d in check_sat(tactic&, ref<goal>&, ref<model>&, labels_vec&, obj_ref<app, ast_manager>&, obj_ref<dependency_manager<ast_manager::expr_dependency_config>::dependency, ast_manager>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) ../src/tactic/tactic.cpp:168\n  #22 0x5605e0a3acc0 in check_sat_using_tactict_cmd::execute(cmd_context&) ../src/cmd_context/tactic_cmds.cpp:223\n  #23 0x5605e09ca2e8 in smt2::parser::parse_ext_cmd(int, int) ../src/parsers/smt2/smt2parser.cpp:2895\n  #24 0x5605e09d0f5c in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:3001\n  #25 0x5605e09d0f5c in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #26 0x5605e09885f5 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\n  #27 0x5605de01a1a6 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #28 0x5605ddff2a3e in main ../src/shell/main.cpp:352\n  #29 0x7fda2b8d7b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #30 0x5605de006819 in _start (/home/suz/software/z3san/build-04272020120633-8996e81/z3+0x1f7819)\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../src/ast/ast.h:504 in ast::get_kind() const\n==29146==ABORTING\n[531] %\n[531] % cat small.smt2\n(set-option :proof true)\n(assert (forall ((a Real)) (= a (/ 0 0))))\n(check-sat-using purify-arith)\n[532] %\n```\n\nOS: Ubuntu 18.04\nCommit: 8996e81\n",
    "priority": 1
  },
  "358": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(assert (forall ((x Int) (y Int) (z Int)) (= x (/ 1 y z (- 128 z 1)))))\r\n(check-sat-using (then simplify bv))\r\n```\r\nZ3  throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/math/lp/int_branch.cpp\r\nLine: 84\r\n!lia.column_is_int_inf(j) || !lia.is_fixed(j)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: a0de244\r\n",
    "priority": 0
  },
  "359": {
    "body": "Hi,\nFor this case, Z3  throws out a segmentation fault:\n```\n[552] % z3 small.smt2\nSegmentation fault\n[553] % z3release small.smt2\nBus error\n[554] % z3san small.smt2\nASAN:DEADLYSIGNAL\n=================================================================\n==31497==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x559d85378ab5 bp 0x7fff44523120 sp 0x7fff44522d70 T0)\n==31497==The signal is caused by a READ memory access.\n==31497==Hint: address points to the zero page.\n  #0 0x559d85378ab4 in cache_all_results ../src/ast/rewriter/rewriter.h:248\n  #1 0x559d85378ab4 in must_cache ../src/ast/rewriter/rewriter.h:279\n  #2 0x559d85378ab4 in visit<false> ../src/ast/rewriter/rewriter_def.h:159\n  #3 0x559d8537f5ba in process_app<false> ../src/ast/rewriter/rewriter_def.h:260\n  #4 0x559d8537f5ba in resume_core<false> ../src/ast/rewriter/rewriter_def.h:769\n  #5 0x559d8539057a in main_loop<false> ../src/ast/rewriter/rewriter_def.h:728\n  #6 0x559d8539057a in operator() ../src/ast/rewriter/rewriter_def.h:800\n  #7 0x559d8539057a in th_rewriter::operator()(expr*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/rewriter/th_rewriter.cpp:860\n  #8 0x559d84cebe80 in simplify_tactic::imp::operator()(goal&) ../src/tactic/core/simplify_tactic.cpp:57\n  #9 0x559d84cebe80 in simplify_tactic::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/core/simplify_tactic.cpp:94\n  #10 0x559d8512ed98 in cleanup_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:918\n  #11 0x559d8513dba7 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #12 0x559d8513cbb1 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:111\n  #13 0x559d8513dba7 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #14 0x559d8513dba7 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #15 0x559d8513cbb1 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:111\n  #16 0x559d8513dba7 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #17 0x559d8513dba7 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #18 0x559d8513af02 in repeat_tactical::operator()(unsigned int, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:814\n  #19 0x559d8513cbb1 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:111\n  #20 0x559d8509f59a in exec(tactic&, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactic.cpp:148\n  #21 0x559d850a189d in check_sat(tactic&, ref<goal>&, ref<model>&, labels_vec&, obj_ref<app, ast_manager>&, obj_ref<dependency_manager<ast_manager::expr_dependency_config>::dependency, ast_manager>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) ../src/tactic/tactic.cpp:168\n  #22 0x559d84e51910 in check_sat_using_tactict_cmd::execute(cmd_context&) ../src/cmd_context/tactic_cmds.cpp:223\n  #23 0x559d84de0f38 in smt2::parser::parse_ext_cmd(int, int) ../src/parsers/smt2/smt2parser.cpp:2895\n  #24 0x559d84de7bac in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:3001\n  #25 0x559d84de7bac in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #26 0x559d84d9f245 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\n  #27 0x559d824310b6 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #28 0x559d8240994e in main ../src/shell/main.cpp:352\n  #29 0x7fd10912cb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #30 0x559d8241d729 in _start (/home/suz/software/z3san/build-04262020232942-a0de244/z3+0x1f7729)\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../src/ast/rewriter/rewriter.h:248 in cache_all_results\n==31497==ABORTING\n[555] % \n[555] % cat small.smt2\n(declare-sort c_unique)\n(declare-sort c_ssorted)\n(declare-sort e)\n(declare-fun c_sort (e c_unique) c_ssorted)\n(declare-fun f (Int) c_unique)\n(declare-fun g (c_ssorted) Int)\n(declare-fun h () e)\n(declare-fun type_pointer (e) e)\n(declare-fun type_alloc_table () e)\n(declare-fun block_length (c_ssorted c_ssorted) Int)\n(declare-fun j (c_ssorted) Int)\n(declare-fun shift (c_ssorted Int) c_unique)\n(declare-fun n (c_ssorted c_ssorted) Bool)\n(declare-fun type_memory (e e) e)\n(declare-fun acc (c_ssorted c_ssorted) c_unique)\n(declare-fun ac (c_ssorted c_ssorted c_ssorted) c_unique)\n(declare-fun type_pset (e) e)\n(declare-fun ad (c_ssorted) c_unique)\n(declare-fun bj (c_ssorted Int) c_unique)\n(declare-fun s (c_ssorted c_ssorted Int) c_unique)\n(declare-fun v (c_ssorted c_ssorted) c_unique)\n(declare-fun not_in_pset (c_ssorted c_ssorted) Bool)\n(declare-fun t (c_ssorted c_ssorted c_ssorted c_ssorted) Bool)\n(declare-fun bn (c_ssorted) Bool)\n(declare-fun type_global () e)\n(assert (forall ((?i c_unique)) (= (f (g (c_sort h ?i))) ?i)))\n(assert (forall ((?k e) (?l c_unique) (?m c_unique)) (let ((?r (c_sort\n type_alloc_table ?l)) (?o (c_sort (type_pointer ?k) ?m)) (?aa 0)) (=\n (n ?r ?o) (< ?aa (block_length ?r ?o ))))))\n(assert (exists ((?ab e)) (forall ((?p c_unique) (?q c_unique)) (let\n ((?o (type_pointer ?ab))) (let ((?r (c_sort ?o ?q))) (and (= 0 (j\n ?r)) (= ?p ?q)))))))\n(assert (forall ((?u e) (?y e) (?w c_unique) (?ae c_unique) (?af\n c_unique)) (let ((?o (type_pointer ?u))) (= (forall ((?ag c_unique))\n (let ((?aa (c_sort (type_pointer ?y) ?ag))) (=(= ?af (acc (c_sort\n (type_memory ?o ?y) ?ae) ?aa)) (not_in_pset ?aa (c_sort (type_pset\n ?y) ?w))))) (not_in_pset (c_sort (type_pset ?y) ?w) (c_sort\n (type_memory ?o ?y) ?ae ))))))\n(assert (forall ((?ah e) (?ai c_unique) (?aj c_unique) (?ak Int)) (let\n ((?o (type_pset ?ah))) (= (forall ((?al c_unique)) (or (forall ((?am\n Int)) (=(<= ?ak) (not (= ?ai (shift (c_sort (type_pointer ?ah) ?al)\n ?am))))))) (not_in_pset (c_sort (type_pointer ?ah) ?ai) (c_sort ?o\n (bj (c_sort ?o ?aj) ?ak)))))))\n(assert (forall ((?an e) (?x e) (?ao c_unique) (?ap c_unique) (?aq\n c_unique) (?ar Int)) (let ((?o (type_pointer ?x))) (= (forall ((?bk\n c_unique)) (=(not (not_in_pset (c_sort (type_pointer ?an) ?bk)\n (c_sort (type_pset ?an) ?ap))) (forall ((?z Int)) (let ((?aa\n (type_pointer ?an))) (=(= ?ar ?z) (not (= ?ao (acc (c_sort\n (type_memory ?o ?an) ?aq) (c_sort ?aa (shift (c_sort ?aa ?bk)\n ?z)))))))))) (not_in_pset (c_sort ?o ?ao) (c_sort (type_pset ?x) (s\n (c_sort (type_pset ?an) ?ap) (c_sort (type_memory ?o ?an) ?aq)\n ?ar)))))))\n(assert (forall ((?as e) (?bl e) (?at c_unique)) (= (bn (c_sort\n (type_memory (type_pointer ?bl) ?as) ?at)) (forall ((?bm c_unique)\n (?bo c_unique)) (let ((?aa (type_pointer ?bl)) (?o (c_sort\n type_alloc_table ?bo)) (?r (c_sort (type_pointer ?as) ?bm))) (n ?o\n (c_sort ?aa (acc (c_sort (type_memory ?aa ?as) ?at) ?r))))))))\n(assert (not (forall ((?a c_unique) (?b c_unique) (?c c_unique) (?d\n c_unique) (?alloc c_unique) (?au c_unique)) (let ((?o (c_sort\n type_alloc_table ?alloc)) (?aa (type_pointer type_global))) (=> and\n (n ?o (c_sort ?aa ?c)) (forall ((?intM_global0 c_unique)) (let ((?av\n (c_sort ?aa ?a)) (?aw (c_sort ?aa ?b)) (?ax (type_memory h\n type_global))) (let ((?r (c_sort ?ax ?intM_global0)) (?ay (c_sort\n ?ax ?au)) (?az type_global )) (=> (t ?o ?ay ?r (c_sort ?az (v\n (c_sort ?az (ad ?aw)) (c_sort ?az (ad ?av))))) (xor (n ?o (c_sort\n ?aa ?c)) (forall ((?ba c_unique)) (=(= ?ba (acc ?r (c_sort ?aa ?c)))\n (forall ((?bb c_unique)) (=(= ?bb (acc ?r (c_sort ?aa ?d))) (forall\n ((?bc c_unique)) (=(= ?bc (acc ?r (c_sort ?aa ?c))) (forall ((?bd\n Int)) (=> (= (f ?bd) ?bc) (forall ((?be c_unique)) (=> (n ?o (c_sort\n ?aa ?c)) (forall ((?bf c_unique)) (=> (= ?bf (ac ?r (c_sort ?aa ?c)\n (c_sort h ?be))) (forall ((?bg c_unique)) (=> (= ?bg (ac (c_sort ?ax\n ?bf) (c_sort ?aa ?d) (c_sort h (f ?bd)))) (forall ((?bh c_unique))\n (let ((?bi (c_sort ?aa ?bh))) (= ?r ?bi)))))))))))))))))))))))))))\n(check-sat-using ufbv)\n[556] %\n```\n\nOS: Ubuntu 18.04\nCommit: a0de244\n",
    "priority": 1
  },
  "360": {
    "body": "\n```\n[507] % z3 small.smt2\nFailed to verify: a.is_numeral(val, r)\nASSERTION VIOLATION\nFile: ../src/muz/spacer/spacer_qe_project.cpp\nLine: 495\nUNREACHABLE CODE WAS REACHED.\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[508] % z3release small.smt2\nFailed to verify: a.is_numeral(val, r)\nSegmentation fault\n[509] % z3san small.smt2\nFailed to verify: a.is_numeral(val, r)\n*** stack smashing detected ***: <unknown> terminated\nAborted\n[510] % \n[510] % cat small.smt2\n(set-logic HORN)\n(set-option :fp.spacer.native_mbp false)\n(set-option :fp.spacer.reach_dnf false)\n(declare-fun a () Bool)\n(assert (forall ((b Int) (c Int)) (= b c 0)))\n(assert (not a))\n(check-sat)\n[511] %\n```\n\nOS: Ubuntu 18.04\nCommit: a0de244\n",
    "priority": 0
  },
  "361": {
    "body": "\n```\n[510] % z3 small.smt2\n(error \"line 1 column 38: invalid recursive function definition, '(' expected\")\nSegmentation fault\n[511] % z3release small.smt2\n(error \"line 1 column 38: invalid recursive function definition, '(' expected\")\nSegmentation fault\n[512] % z3san small.smt2\n(error \"line 1 column 38: invalid recursive function definition, '(' expected\")\nASAN:DEADLYSIGNAL\n=================================================================\n==8280==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000004 (pc 0x562d164cd8dd bp 0x7ffebfe9e100 sp 0x7ffebfe9e0d0 T0)\n==8280==The signal is caused by a READ memory access.\n==8280==Hint: address points to the zero page.\n  #0 0x562d164cd8dc in ast::get_kind() const ../src/ast/ast.h:504\n  #1 0x562d164cd8dc in is_app(ast const*) ../src/ast/ast.h:914\n  #2 0x562d164cd8dc in is_ground(expr const*) ../src/ast/ast.h:1378\n  #3 0x562d164cd8dc in var_subst::operator()(expr*, unsigned int, expr* const*) ../src/ast/rewriter/var_subst.cpp:28\n  #4 0x562d1644373d in recfun_rewriter::mk_app_core(func_decl*, unsigned int, expr* const*, obj_ref<expr, ast_manager>&) ../src/ast/rewriter/recfun_rewriter.cpp:31\n  #5 0x562d16416c73 in reduce_app_core ../src/ast/rewriter/th_rewriter.cpp:225\n  #6 0x562d16416c73 in reduce_app ../src/ast/rewriter/th_rewriter.cpp:620\n  #7 0x562d1642052a in process_app<false> ../src/ast/rewriter/rewriter_def.h:298\n  #8 0x562d1642052a in resume_core<false> ../src/ast/rewriter/rewriter_def.h:769\n  #9 0x562d1643057a in main_loop<false> ../src/ast/rewriter/rewriter_def.h:728\n  #10 0x562d1643057a in operator() ../src/ast/rewriter/rewriter_def.h:800\n  #11 0x562d1643057a in th_rewriter::operator()(expr*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/rewriter/th_rewriter.cpp:860\n  #12 0x562d14dca2cb in asserted_formulas::assert_expr(expr*, app*) ../src/smt/asserted_formulas.cpp:158\n  #13 0x562d148b5c4c in smt::context::assert_expr_core(expr*, app*) ../src/smt/smt_context.cpp:2901\n  #14 0x562d148b5c4c in smt::context::assert_expr(expr*, app*) ../src/smt/smt_context.cpp:2913\n  #15 0x562d148b5c4c in smt::context::assert_expr(expr*) ../src/smt/smt_context.cpp:2908\n  #16 0x562d15fe8e5c in solver::assert_expr(expr*) ../src/solver/solver.cpp:210\n  #17 0x562d15fe8e5c in solver::assert_expr(expr*) ../src/solver/solver.cpp:210\n  #18 0x562d15f1f788 in cmd_context::assert_expr(expr*) ../src/cmd_context/cmd_context.cpp:1319\n  #19 0x562d15e81618 in smt2::parser::parse_assert() ../src/parsers/smt2/smt2parser.cpp:2571\n  #20 0x562d15e87db7 in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:2926\n  #21 0x562d15e87db7 in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #22 0x562d15e3f245 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\n  #23 0x562d134d10b6 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #24 0x562d134a994e in main ../src/shell/main.cpp:352\n  #25 0x7f341d1cfb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #26 0x562d134bd729 in _start (/home/suz/software/z3san/build-04262020232942-a0de244/z3+0x1f7729)\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../src/ast/ast.h:504 in ast::get_kind() const\n==8280==ABORTING\n[513] %\n[513] % cat small.smt2\n(define-funs-rec ((a ((b Int)) Bool)))\n(assert (a 0))\n(check-sat)\n[514] %\n```\n\nOS: Ubuntu 18.04\nCommit: a0de244\n",
    "priority": 1
  },
  "362": {
    "body": "\n```\n[553] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/math/lp/lar_core_solver.h\nLine: 760\nl <= u\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[554] % cat small.smt2\n(declare-fun a () Int)\n(declare-fun b () Int)\n(declare-fun c () Int)\n(declare-fun d () Int)\n(assert (< a 0))\n(assert (= (/ 2 (- b) (- c a) d 10) a))\n(check-sat-using (then add-bounds ctx-solver-simplify))\n[555] %\n```\n\nOS: Ubuntu 18.04\nCommit: a0de244\n",
    "priority": 0
  },
  "363": {
    "body": "\n```\n[533] % z3 small.smt2\nunknown\n[534] % z3release small.smt2\nunknown\n[535] % z3san small.smt2\n=================================================================\n==30783==ERROR: AddressSanitizer: heap-use-after-free on address 0x61c00003d27c at pc 0x563cdfbc1164 bp 0x7f2497f8cf90 sp 0x7f2497f8cf80\nREAD of size 1 at 0x61c00003d27c thread T3\n  #0 0x563cdfbc1163 in smt::theory_bv::relevant_eh(app*) ../src/smt/theory_bv.cpp:1414\n  #1 0x563cdeec9f4f in smt::context::relevant_eh(expr*) ../src/smt/smt_context.cpp:1576\n  #2 0x563cdef4f28b in smt::relevancy_propagator_imp::set_relevant(expr*) ../src/smt/smt_relevancy.cpp:308\n  #3 0x563cdef4f28b in smt::relevancy_propagator_imp::mark_as_relevant(expr*) ../src/smt/smt_relevancy.cpp:336\n  #4 0x563cdef4f28b in smt::relevancy_propagator_imp::propagate_relevant_app(app*) ../src/smt/smt_relevancy.cpp:357\n  #5 0x563cdef4f28b in smt::relevancy_propagator_imp::propagate() ../src/smt/smt_relevancy.cpp:485\n  #6 0x563cdeeb2c2e in smt::context::propagate_relevancy(unsigned int) ../src/smt/smt_context.cpp:1599\n  #7 0x563cdeeeb7d3 in smt::context::propagate() ../src/smt/smt_context.cpp:1676\n  #8 0x563cdf8ca414 in smt::lookahead::choose() ../src/smt/smt_lookahead.cpp:107\n  #9 0x563cdf5b0d46 in smt::kernel::imp::next_cube() ../src/smt/smt_kernel.cpp:193\n  #10 0x563cdf5b0d46 in smt::kernel::next_cube() ../src/smt/smt_kernel.cpp:367\n  #11 0x563cdf671bea in cube ../src/smt/smt_solver.cpp:45\n  #12 0x563cdf671bea in cube ../src/smt/smt_solver.cpp:288\n  #13 0x563ce0606afa in parallel_tactic::cube_and_conquer(parallel_tactic::solver_state&) ../src/solver/parallel_tactic.cpp:501\n  #14 0x563ce060de45 in parallel_tactic::run_solver() ../src/solver/parallel_tactic.cpp:634\n  #15 0x563ce0610b10 in parallel_tactic::solve(ref<model>&)::{lambda()#1}::operator()() const ../src/solver/parallel_tactic.cpp:670\n  #16 0x563ce0610b10 in void std::__invoke_impl<void, parallel_tactic::solve(ref<model>&)::{lambda()#1}>(std::__invoke_other, parallel_tactic::solve(ref<model>&)::{lambda()#1}&&) /usr/include/c++/7/bits/invoke.h:60\n  #17 0x563ce0610b10 in std::__invoke_result<parallel_tactic::solve(ref<model>&)::{lambda()#1}>::type std::__invoke<parallel_tactic::solve(ref<model>&)::{lambda()#1}>(std::__invoke_result&&, (parallel_tactic::solve(ref<model>&)::{lambda()#1}&&)...) /usr/include/c++/7/bits/invoke.h:95\n  #18 0x563ce0610b10 in decltype (__invoke((_S_declval<0ul>)())) std::thread::_Invoker<std::tuple<parallel_tactic::solve(ref<model>&)::{lambda()#1}> >::_M_invoke<0ul>(std::_Index_tuple<0ul>) /usr/include/c++/7/thread:234\n  #19 0x563ce0610b10 in std::thread::_Invoker<std::tuple<parallel_tactic::solve(ref<model>&)::{lambda()#1}> >::operator()() /usr/include/c++/7/thread:243\n  #20 0x563ce0610b10 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<parallel_tactic::solve(ref<model>&)::{lambda()#1}> > >::_M_run() /usr/include/c++/7/thread:186\n  #21 0x7f249c3626de (/usr/lib/x86_64-linux-gnu/libstdc++.so.6+0xbd6de)\n  #22 0x7f249c6356da in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x76da)\n  #23 0x7f249ba1f88e in __clone (/lib/x86_64-linux-gnu/libc.so.6+0x12188e)\n...\nSUMMARY: AddressSanitizer: heap-use-after-free ../src/smt/theory_bv.cpp:1414 in smt::theory_bv::relevant_eh(app*)\n...\n==30783==ABORTING\n[536] % \n[536] % cat small.smt2\n(set-option :rewriter.flat false)\n(set-option :smt.phase_selection 5)\n(set-option :parallel.enable true)\n(set-option :smt.arith.solver 1)\n(set-option :smt.threads 4)\n(declare-fun c () (_ BitVec 32))\n(declare-fun d (Int Int) Int)\n(declare-fun a () (_ BitVec 32))\n(declare-fun oh () Bool)\n(declare-fun ih () Bool)\n(declare-fun of () Bool)\n(declare-fun if () Bool)\n(declare-fun aa () (_ BitVec 32))\n(declare-fun k () (_ BitVec 32))\n(declare-fun ka () (_ BitVec 32))\n(declare-fun b () (_ BitVec 32))\n(declare-fun ba () (_ BitVec 32))\n(declare-fun l () (_ BitVec 32))\n(declare-fun la () (_ BitVec 32))\n(declare-fun mh () (_ BitVec 32))\n(declare-fun jh () (_ BitVec 32))\n(declare-fun ac () Bool)\n(declare-fun jf () (_ BitVec 32))\n(declare-fun ad () Bool)\n(assert (not (= (not ih) (bvslt l c) (bvslt la c) (= (= b ba) (or\n(distinct a aa) (distinct k ka) (distinct l la))) (= (d 0 7) 7) (=>\n(not oh) (= jh #x00000000)) (or ac (=> (= (d 0 7) 0) (= (not ih) (= mh\n#x00000000)) (= mh #x00000000)) (=> (=> of (= jf #x00000005) ad (= (=\n(d 0 4117) 0) (not if))) (=> (not if) (= (d 0 4117) 0) (not of) (= jf\n#x00000000)))))))\n(check-sat-using (then qfnra qfaufbv))\n[537] %\n```\n\nOS: Ubuntu 18.04\nCommit: 626d018\n",
    "priority": 1
  },
  "364": {
    "body": "\n```\n[564] % z3 small.smt2\nunsat\nASSERTION VIOLATION\nFile: ../src/qe/qe_mbp.cpp\nLine: 215\nm.is_true(val) || m.is_false(val)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[565] % \n[565] % cat small.smt2\n(declare-datatypes ((a 0)) (((u))))\n(declare-datatypes ((b 0)) (((c (d a) (g b)) (h))))\n(declare-fun e () b)\n(assert (forall ((f b)) (= (ite (= u (d f)) f (c (d f) f)) e)))\n(check-sat)\n(check-sat-using qe2)\n[566] %\n```\n\nOS: Ubuntu 18.04\nCommit: 7f1b147\n",
    "priority": 1
  },
  "365": {
    "body": "Hi,\nFor this case, Z3  throws out a segmentation fault:\n```\n[113] % ./z3debug small.smt2\nASSERTION VIOLATION\nFile: ../src/ast/ast.cpp\nLine: 1929\nm_ast_table.contains(n)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\nA\n[113] % ./z3release small.smt2 \nunknown\n[1]    70788 segmentation fault  ./z3release small.smt2\n[114] % cat small.smt2 \n(declare-sort a) \n(declare-sort b) \n(declare-sort c) \n(declare-sort d) \n(declare-sort n) \n(declare-fun e (b Int) a) \n(declare-fun f () b) \n(declare-fun o (c a) Int) \n(declare-fun g () c) \n(declare-fun h (d Int) Int) \n(declare-fun i () d) \n(declare-fun j (n Int) c) \n(declare-fun k () n) \n(assert (= 0   (o (j k 0) (e f 2)))) \n(assert (forall ((?l Int)) (let ((?m (e f 2))) (= (o (j k (h i ?l)) ?m) 0)))) \n(assert (forall ((?l Int)) (let ((?m (o (j k ?l) (e f 2)))) (= (h i ?m) ?m)))) \n(assert (forall ((?l Int)) (= (o g (e f ?l)) 0))) \n(check-sat-using bv)                                                                                                                \n[115] %\n```\n\nOS: Ubuntu 18.04\nCommit: 7f1b147\n",
    "priority": 1
  },
  "366": {
    "body": "\n```\n% z3debug bug.smt2\nASSERTION VIOLATION\nFile: ../src/util/mpq.h\nLine: 546\nis_int(a) && is_int(b)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\nunknown\n% cat bug.smt2\n(declare-fun a () Bool) \n(declare-fun b () Bool) \n(declare-fun c () Real) \n(assert (= c 1.0)) \n(assert (<= (+ (* (ite b 1.0 0.0)) \n(* (ite a 1.0 0.0) (/ 1.0 2.0))) c)) \n(check-sat-using (then dom-simplify card2bv)) \n```\n\nOS: Ubuntu 18.04\nCommit: 7f1b147\n",
    "priority": 1
  },
  "367": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(set-logic AUFNIRA) \r\n(declare-fun a () Real ) \r\n(assert (not (exists ((b Real)) (and (< (- (/ a )) 0)))))        \r\n(check-sat)   \r\n```\r\nZ3  throws out an assertion violation:\r\n```\r\n[106] % ./z3debug small.smt2 \r\nASSERTION VIOLATION\r\nFile: ../src/cmd_context/check_logic.cpp\r\nLine: 310\r\nn->get_num_args() == 2\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nA\r\n[107] % ./z3release small.smt2 \r\nsat\r\n[108] % cat small.smt2 \r\n(set-logic AUFNIRA) \r\n(declare-fun a () Real ) \r\n(assert (not (exists ((b Real)) (and (< (- (/ a )) 0)))))        \r\n(check-sat) \r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 7f1b147\r\n",
    "priority": 1
  },
  "368": {
    "body": "Hi,\nFor this case, Z3  throws out a segmentation fault:\n```\n[626] % z3 small.smt2\nunsat\n[627] % z3 smt.threads=3 rewriter.flat=false smt.ematching=false small.smt2\nSegmentation fault\n[628] % z3release smt.threads=3 rewriter.flat=false smt.ematching=false small.smt2\nSegmentation fault\n[629] % z3san smt.threads=3 rewriter.flat=false smt.ematching=false small.smt2\n=================================================================\n==24360==ERROR: AddressSanitizer: heap-use-after-free on address 0x60700003e328 at pc 0x55b91c7f6eae bp 0x7f6c4affde00 sp 0x7f6c4affddf0\nREAD of size 8 at 0x60700003e328 thread T1\n  #0 0x55b91c7f6ead in smt::theory_array::merge_eh(int, int, int, int) ../src/smt/theory_array.cpp:60\n  #1 0x55b91c918fa0 in smt::theory_array_full::merge_eh(int, int, int, int) ../src/smt/theory_array_full.cpp:331\n  #2 0x55b91c7ec56a in union_find<smt::theory_array>::merge(unsigned int, unsigned int) ../src/util/union_find.h:129\n  #3 0x55b91c7ec56a in smt::theory_array::new_eq_eh(int, int) ../src/smt/theory_array.cpp:305\n  #4 0x55b91bc57ca4 in smt::context::propagate_th_eqs() ../src/smt/smt_context.cpp:1616\n  #5 0x55b91bc57ca4 in smt::context::propagate() ../src/smt/smt_context.cpp:1683\n  #6 0x55b91bc63b67 in smt::context::bounded_search() ../src/smt/smt_context.cpp:3719\n  #7 0x55b91bc647c7 in smt::context::search() ../src/smt/smt_context.cpp:3603\n  #8 0x55b91bc66819 in smt::context::check(unsigned int, expr* const*, bool) ../src/smt/smt_context.cpp:3486\n  #9 0x55b91c2d5b35 in operator() ../src/smt/smt_parallel.cpp:140\n  #10 0x55b91c2d5b35 in operator() ../src/smt/smt_parallel.cpp:191\n  #11 0x55b91c2d5b35 in __invoke_impl<void, smt::parallel::operator()(const expr_ref_vector&)::<lambda()> > /usr/include/c++/7/bits/invoke.h:60\n  #12 0x55b91c2d5b35 in __invoke<smt::parallel::operator()(const expr_ref_vector&)::<lambda()> > /usr/include/c++/7/bits/invoke.h:95\n  #13 0x55b91c2d5b35 in _M_invoke<0> /usr/include/c++/7/thread:234\n  #14 0x55b91c2d5b35 in operator() /usr/include/c++/7/thread:243\n  #15 0x55b91c2d5b35 in _M_run /usr/include/c++/7/thread:186\n  #16 0x7f6c4ebaf6de (/usr/lib/x86_64-linux-gnu/libstdc++.so.6+0xbd6de)\n  #17 0x7f6c4ee826da in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x76da)\n  #18 0x7f6c4e26c88e in __clone (/lib/x86_64-linux-gnu/libc.so.6+0x12188e)\n...\nSUMMARY: AddressSanitizer: heap-use-after-free ../src/smt/theory_array.cpp:60 in smt::theory_array::merge_eh(int, int, int, int)\n...\n==24360==ABORTING\n[630] % \n[630] % cat small.smt2\n(declare-sort Loc 0)\n(define-sort a () (Set Loc))\n(declare-sort FldLoc 0)\n(declare-fun msz () Loc)\n(declare-fun b (FldLoc Loc) Loc)\n(declare-fun c (FldLoc Loc Loc) FldLoc)\n(declare-fun d (FldLoc a Loc) Loc)\n(declare-fun bsz (FldLoc Loc Loc Loc) Bool)\n(declare-fun e (a a FldLoc FldLoc) Bool)\n(declare-fun asz () a)\n(declare-fun g () a)\n(declare-fun h () a)\n(declare-fun i () a)\n(declare-fun sz () a)\n(declare-fun j () Loc)\n(declare-fun k () Loc)\n(declare-fun l (FldLoc Loc Loc) a)\n(declare-fun m (a FldLoc Loc Loc) Bool)\n(declare-fun lstsz () Loc)\n(declare-fun n () Loc)\n(declare-fun aa () FldLoc)\n(declare-fun nextu1sz () FldLoc)\n(declare-fun o () Bool)\n(declare-fun p () a)\n(declare-fun q () a)\n(declare-fun r () a)\n(declare-fun s () a)\n(declare-fun ab () a)\n(declare-fun t () a)\n(declare-fun w () a)\n(declare-fun tmpu2sz () Loc)\n(assert (forall ((y Loc)) (bsz aa msz (b aa msz) y)))\n(assert (forall ((y Loc)) (bsz aa tmpu2sz (b aa tmpu2sz) y)))\n(assert (forall ((y Loc)) (bsz aa k (b aa k) y)))\n(assert (forall ((y Loc)) (or (not (bsz aa msz y y)) (= msz y))))\n(assert (forall ((y Loc)) (= tmpu2sz y)))\n(assert (forall ((y Loc)) (or (not (= (b aa k) y)) (= k y))))\n(assert (bsz aa msz (b aa msz) (b aa msz)))\n(assert (bsz aa tmpu2sz (b aa tmpu2sz) (b aa tmpu2sz)))\n(assert (bsz aa k (b aa k) (b aa k)))\n(assert (forall ((f FldLoc)) (bsz f msz (d f s msz) (d f s msz))))\n(assert (forall ((f FldLoc)) (bsz f n (d f s n) (d f s n))))\n(assert (forall ((f FldLoc)) (bsz f k (d f s k) (d f s k))))\n(assert (forall ((f FldLoc)) (bsz f tmpu2sz (d f s tmpu2sz) (d f s tmpu2sz))))\n(assert (= (b (c aa k (b aa tmpu2sz)) k) (b aa tmpu2sz)))\n(assert (or (= tmpu2sz k) (= (b aa tmpu2sz) (b (c aa k (b aa tmpu2sz)) tmpu2sz))))\n(assert (= (b aa msz) msz (b nextu1sz msz)))\n(assert (= sz (union g sz)))\n(assert (= w g))\n(assert (m t aa lstsz j))\n(assert (= ab (l aa j msz) s (union ab t)))\n(assert (m q aa k msz))\n(assert (= r (union q p)))\n(assert (= q (l aa k msz)))\n(assert (= asz (union sz asz)))\n(assert (e h asz aa aa))\n(assert (= j lstsz))\n(assert (= i (union (setminus g h) (union (intersection asz h) (setminus asz asz)))))\n(assert (bsz aa lstsz j j))\n(assert (bsz aa k msz msz))\n(assert (or (= (b aa k) msz) (not o)))\n(assert (not (= tmpu2sz msz)))\n(assert (= w (l aa lstsz msz)))\n(assert (not (= j msz)))\n(assert (m ab aa j msz))\n(assert (= t (l aa lstsz j)))\n(assert (= s h))\n(assert (not (= k msz)))\n(assert (m p aa n k))\n(assert (= r (union (intersection asz h) (setminus asz asz))))\n(assert (= p (l aa n k)))\n(assert (= asz (union i asz)))\n(assert (distinct tmpu2sz (b aa k)))\n(assert (= n lstsz))\n(assert (bsz aa n k k))\n(assert (bsz aa j msz msz))\n(assert (forall ((u Loc) (v Loc) (z Loc))\n     (and (or (bsz (c aa k (b aa tmpu2sz)) z u v))\n     (or (bsz aa z v v) (bsz aa z u k)\n      (and (= k v) (not (bsz aa (b aa tmpu2sz) k k)))\n      (not (bsz (c aa k (b aa tmpu2sz)) z u v))))))\n(assert (forall ((x Loc)) (bsz aa x x x)))\n(assert (forall ((x Loc) (y Loc)) (or (not (bsz aa x y x)) (= x y))))\n(assert (forall ((x Loc) (y Loc) (z Loc)) (bsz aa x z y)))\n(assert (forall ((x Loc) (y Loc) (z Loc)) (bsz aa x y z)))\n(assert (forall ((x Loc) (z Loc)) (bsz aa x z z)))\n(assert (forall ((u Loc) (x Loc) (y Loc)) (bsz aa x y u)))\n(assert (forall ((u Loc) (x Loc) (z Loc)) (bsz aa x u z)))\n(check-sat)\n[631] %\n```\n\nOS: Ubuntu 18.04\nCommit: 785c9a1\n",
    "priority": 1
  },
  "369": {
    "body": "\n```\n[560] % z3san small.smt2\n=================================================================\n==1426==ERROR: AddressSanitizer: heap-use-after-free on address 0x61c000039267 at pc 0x55959a15d811 bp 0x7f5e34f83430 sp 0x7f5e34f83420\nREAD of size 1 at 0x61c000039267 thread T34\n==1426==AddressSanitizer: while reporting a bug found another one. Ignoring.\n  #0 0x55959a15d810 in smt::theory_array::final_check_eh() ../src/smt/theory_array.cpp:369\n  #1 0x5595995c7704 in smt::context::final_check() ../src/smt/smt_context.cpp:3860\n  #2 0x5595995d7ec6 in smt::context::bounded_search() ../src/smt/smt_context.cpp:3776\n  #3 0x5595995d87c7 in smt::context::search() ../src/smt/smt_context.cpp:3603\n  #4 0x5595995da819 in smt::context::check(unsigned int, expr* const*, bool) ../src/smt/smt_context.cpp:3486\n  #5 0x559599c49b35 in operator() ../src/smt/smt_parallel.cpp:140\n  #6 0x559599c49b35 in operator() ../src/smt/smt_parallel.cpp:191\n  #7 0x559599c49b35 in __invoke_impl<void, smt::parallel::operator()(const expr_ref_vector&)::<lambda()> > /usr/include/c++/7/bits/invoke.h:60\n  #8 0x559599c49b35 in __invoke<smt::parallel::operator()(const expr_ref_vector&)::<lambda()> > /usr/include/c++/7/bits/invoke.h:95\n  #9 0x559599c49b35 in _M_invoke<0> /usr/include/c++/7/thread:234\n  #10 0x559599c49b35 in operator() /usr/include/c++/7/thread:243\n  #11 0x559599c49b35 in _M_run /usr/include/c++/7/thread:186\n  #12 0x7f5e476036de (/usr/lib/x86_64-linux-gnu/libstdc++.so.6+0xbd6de)\n  #13 0x7f5e478d66da in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x76da)\n  #14 0x7f5e46cc088e in __clone (/lib/x86_64-linux-gnu/libc.so.6+0x12188e)\n...\nSUMMARY: AddressSanitizer: heap-use-after-free ../src/smt/theory_array.cpp:369 in smt::theory_array::final_check_eh()\n...\n==1426==ABORTING\n[561] % \n[561] % cat small.smt2\n(set-option :smt.phase_selection 5)\n(set-option :parallel.enable true)\n(set-option :smt.arith.solver 1)\n(set-option :smt.threads 2)\n(declare-fun a () (_ BitVec 32))\n(declare-fun b (Int) Int)\n(declare-fun c () Bool)\n(declare-fun d () (_ BitVec 32))\n(declare-fun l () Bool)\n(declare-fun e () (_ BitVec 32))\n(declare-fun m () (_ BitVec 32))\n(declare-fun f () (_ BitVec 32))\n(declare-fun n () (_ BitVec 32))\n(declare-fun j () Bool)\n(define-fun k () Bool (=> (= (b 0) 8) (and (bvsge f a) (bvslt n a) (= (= m f n) (= c l)) (=> l (= d e) c)) j))\n(assert (not k))\n(check-sat)\n[562] %\n```\n\nOS: Ubuntu 18.04\nCommit: 785c9a1\n",
    "priority": 1
  },
  "370": {
    "body": "\n```\n[574] % cvc4 -q --strings-exp small.smt2\nsat\n[575] % z3release model_validate=true small.smt2\nsat\n(error \"line 16 column 10: an invalid model was generated\")\n[576] % \n[576] % cat small.smt2\n(declare-fun value2 () String)\n(assert (and (str.contains (str.substr (str.++ (str.replace\n(str.substr (str.substr value2 1 (- (str.len value2) 1)) 0 (+\n(str.indexof (str.substr value2 1 (- (str.len value2) 1)) \"B\" 0) 1))\n\"B\" \"b\") (str.substr (str.substr value2 1 (- (str.len value2) 1)) 1 (-\n(+ (str.indexof (str.substr value2 1 (- (str.len value2) 1)) \"B\" 0)\n1)))) 1 (- (str.len (str.substr (str.substr value2 1 (- (str.len\nvalue2) 1)) 0 (- (str.len (str.substr value2 1 (- (str.len value2)\n1))) 0))) 0)) \"C\") (str.contains (str.++ (str.replace (str.substr\n(str.substr value2 1 (- (str.len value2) 1)) 0 (- (+ (str.indexof\n(str.substr value2 1 (- (str.len value2) 1)) \"B\" 0) 1) 0)) \"B\" \"b\")\n(str.substr (str.substr value2 1 (- (str.len value2) 1)) 0 (- (str.len\n(str.substr value2 1 (- (str.len value2) 1))) 0))) \"C\") (str.contains\n(str.substr value2 1 (- (str.len value2) 1)) \"B\") (not (str.contains\n(str.substr value2 1 (- (str.len value2) 1)) \"A\"))))\n(check-sat)\n[577] %\n```\nOS: Ubuntu 18.04\nCommit: 785c9a1\n",
    "priority": 1
  },
  "371": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :smt.threads 2)  \n(declare-fun a () Int)  \n(declare-fun b () Int)  \n(declare-fun c () Int)  \n(declare-fun d () Int)  \n(declare-fun m () Int)  \n(declare-fun e () Int)  \n(declare-fun f () Int)  \n(declare-fun n () Int)  \n(declare-fun g () Int)  \n(declare-fun h () Int)  \n(declare-fun i () Int)  \n(declare-fun j () Int)  \n(declare-fun k () Int)  \n(declare-fun l () Int)  \n(declare-fun o () Int)  \n(declare-fun w () Int)  \n(declare-fun p () Int)  \n(declare-fun q () Int)  \n(declare-fun r () Int)  \n(declare-fun s () Int)    \n(declare-fun x () Int)  \n(declare-fun t () Int)  \n(declare-fun y () Int)  \n(declare-fun u () Int)  \n(declare-fun v () Int)  \n(assert (or (= a 0) (= a 1)))   \n(assert (or (= n 0) (= n 1) (= g 0) (= g 1)))  \n(assert (xor (= h 0) (= i 1)))  \n(assert (<= 7 (+ b c d m e f n)))  \n(assert (<= (+ o w p) 1)) \n(assert (<= (* 2 (+ a b c d m n)) (* 3 (+ g h j k l)) p r s 1)) \n(assert (<= b 1 (+ o c) 1)) \n(assert (<= (+ q t) 1)) \n(assert (<= (+ r y  n) 1)) \n(assert (<= (+ s l) 1))  \n(assert (<= (+ y k  1) 1)) \n(assert (<= (* e 2) (* j t) v)) \n(assert (<= (+ (* f 2)) (* y 4) x)) \n(minimize u) \n(check-sat)                             \n\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/lp/lp_primal_core_solver.h\nLine: 156\n!this->column_is_feasible(bj)\n```\n\nOS: Ubuntu 18.04\nCommit: 470e87a\n",
    "priority": 0
  },
  "372": {
    "body": "\n```\n[548] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/smt/smt_enode.h\nLine: 412\nm_lbl_hash >= 0 && static_cast<unsigned>(m_lbl_hash) < approx_set_traits<unsigned long long>::capacity\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[549] % \n[549] % cat small.smt2\n(declare-fun b ((Array Int Int) (Array Int Int) Int Int) Bool)\n(assert\n (forall ((a (Array Int Int)) (c Int) (d Int) (f (Array Int Int)) (e (Array Int Int)) (j (Array Int Int)) (k Int))\n (let ((g (store f (- (* 4 d) (+ c 1)) (a (- (* 4 d) (+ c 1)))))\n    (h (store e (- (* 2 d) (+ c 1)) (a (- (* 5 d) (+ c 1))))))\n  (let ((i (= g h))) (= i (b a j k d))))))\n(check-sat)\n[550] %\n```\n\nOS: Ubuntu 18.04\nCommit: 470e87a\n",
    "priority": 1
  },
  "373": {
    "body": "\n```\n[506] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/ast/ast.cpp\nLine: 2910\nto_app(get_fact(p1))->get_arg(1) == to_app(get_fact(p2))->get_arg(0)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[507] % z3release small.smt2\nSegmentation fault\n[508] % z3san small.smt2\nASAN:DEADLYSIGNAL\n=================================================================\n==11031==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000020 (pc 0x55957a981a71 bp 0x7ffc12f08830 sp 0x7ffc12f08810 T0)\n==11031==The signal is caused by a READ memory access.\n==11031==Hint: address points to the zero page.\n  #0 0x55957a981a70 in ast::get_kind() const ../src/ast/ast.h:504\n  #1 0x55957a981a70 in get_sort(expr const*) ../src/ast/ast.cpp:423\n  #2 0x55957a981a70 in ast_manager::get_sort(expr const*) const ../src/ast/ast.h:1738\n  #3 0x55957a981a70 in basic_decl_plugin::join(unsigned int, expr* const*) ../src/ast/ast.cpp:1100\n  #4 0x55957a9c4cf0 in basic_decl_plugin::mk_func_decl(int, unsigned int, parameter const*, unsigned int, expr* const*, sort*) ../src/ast/ast.cpp:1181\n  #5 0x55957a98bf02 in ast_manager::mk_func_decl(int, int, unsigned int, parameter const*, unsigned int, expr* const*, sort*) ../src/ast/ast.cpp:2018\n  #6 0x55957a9a65f6 in ast_manager::mk_app(int, int, unsigned int, parameter const*, unsigned int, expr* const*, sort*) ../src/ast/ast.cpp:2024\n  #7 0x55957a9afc0b in ast_manager::mk_app(int, int, expr*, expr*) ../src/ast/ast.cpp:2040\n  #8 0x55957a9afc0b in ast_manager::mk_iff(expr*, expr*) ../src/ast/ast.h:2190\n  #9 0x55957a9afc0b in ast_manager::mk_iff_false(app*) ../src/ast/ast.cpp:2869\n  #10 0x5595785354ea in asserted_formulas::update_substitution(expr*, app*) ../src/smt/asserted_formulas.cpp:577\n  #11 0x55957853a1b3 in asserted_formulas::commit(unsigned int) ../src/smt/asserted_formulas.cpp:498\n  #12 0x55957853a1b3 in asserted_formulas::commit() ../src/smt/asserted_formulas.cpp:490\n  #13 0x559577fe9d7b in smt::context::internalize_assertions() ../src/smt/smt_context.cpp:3084\n  #14 0x55957802a197 in smt::context::check(unsigned int, expr* const*, bool) ../src/smt/smt_context.cpp:3477\n  #15 0x5595797a9407 in solver_na2as::check_sat_core(unsigned int, expr* const*) ../src/solver/solver_na2as.cpp:67\n  #16 0x559579766a23 in combined_solver::check_sat_core(unsigned int, expr* const*) ../src/solver/combined_solver.cpp:213\n  #17 0x559579747f01 in solver::check_sat(unsigned int, expr* const*) ../src/solver/solver.cpp:330\n  #18 0x5595796a2fc0 in cmd_context::check_sat(unsigned int, expr* const*) ../src/cmd_context/cmd_context.cpp:1551\n  #19 0x5595795e9ca3 in smt2::parser::parse_check_sat() ../src/parsers/smt2/smt2parser.cpp:2596\n  #20 0x5595795e9ca3 in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:2938\n  #21 0x5595795e9ca3 in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #22 0x5595795a11c5 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\n  #23 0x559576c31eb6 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #24 0x559576c0a7ae in main ../src/shell/main.cpp:352\n  #25 0x7f8f71fddb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #26 0x559576c1e529 in _start (/home/suz/software/z3san/build-04232020225820-7597396/z3+0x1f7529)\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../src/ast/ast.h:504 in ast::get_kind() const\n==11031==ABORTING\n[509] % \n[509] % cat small.smt2\n(set-option :proof true)\n(declare-fun a () Bool)\n(assert (not (! a :lblpos +)))\n(check-sat a)\n[510] %\n```\n\nOS: Ubuntu 18.04\nCommit: 470e87a\n",
    "priority": 1
  },
  "374": {
    "body": "Hi,\r\nIn this case, Z3 latest build hangs on the formula while z3-4.8.7 produces results quickly. \r\n```\r\n[613] % time z3-4.8.7 small.smt2\r\nunsat\r\nreal\t0m0.028s\r\nuser\t0m0.025s\r\nsys\t0m0.000s\r\n[614] % timeout -s 9 10 z3release small.smt2\r\nKilled\r\n[615] % timeout -s 9 10 z3release smt.arith.solver=2 small.smt2\r\nKilled\r\n[616] % \r\n[616] % cat small.smt2\r\n(declare-fun a () String)\r\n(assert (distinct (str.replace (str.++ \"A\" a) \"B\" a) (str.++ \"A\" (str.replace a \"B\" a))))\r\n(check-sat)\r\n[617] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 7597396",
    "priority": 1
  },
  "375": {
    "body": "Hi,\nFor this case, Z3  gives an invalid model:\n```\n[600] % z3release model_validate=true small.smt2\nsat\n(error \"line 4 column 10: an invalid model was generated\")\n[601] % cvc4 -q --strings-exp small.smt2\nsat\n[602] % cat small.smt2\n(declare-fun a () String)\n(declare-fun b () String)\n(assert (distinct (str.at a (str.indexof \"B\" b 1)) (str.at b 5 )))\n(check-sat)\n[603] %\n```\n\nOS: Ubuntu 18.04\nCommit: 7597396\n",
    "priority": 1
  },
  "376": {
    "body": "Hi,\nFor this case, Z3  gives an invalid model:\n```\n[579] % z3release model_validate=true small.smt2\nsat\n(error \"line 4 column 10: an invalid model was generated\")\n[580] % cat small.smt2\n(declare-fun a () String)\n(declare-fun b () String)\n(assert (= (str.substr (str.++ a \"abc\" b) 20 1) \"a\"))\n(check-sat)\n[581] %\n```\n\nOS: Ubuntu 18.04\nCommit: 7597396\n",
    "priority": 1
  },
  "377": {
    "body": "Hi,\nFor this case, Z3  throws out a segmentation fault:\n```\n[537] % z3 small.smt2\nsat\nASSERTION VIOLATION\nFile: ../src/ast/ast.h\nLine: 721\nidx < m_num_args\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[538] % z3release small.smt2\nsat\nSegmentation fault\n[539] % z3s\nz3san    z3str3    z3str3model  \n[539] % z3san small.smt2\nsat\nASAN:DEADLYSIGNAL\n=================================================================\n==116314==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000004 (pc 0x558a0abee7fb bp 0x7ffd4556c200 sp 0x7ffd4556c200 T0)\n==116314==The signal is caused by a READ memory access.\n==116314==Hint: address points to the zero page.\n  #0 0x558a0abee7fa in ast::get_kind() const ../src/ast/ast.h:504\n  #1 0x558a0abee7fa in get_sort(expr const*) ../src/ast/ast.cpp:423\n  #2 0x558a0abee7fa in ast_manager::get_sort(expr const*) const ../src/ast/ast.h:1738\n  #3 0x558a0abee7fa in ast_manager::is_bool(expr const*) const ../src/ast/ast.cpp:1773\n  #4 0x558a07eb44ba in qe::pred_abs::abstract_atoms(expr*, qe::max_level&, ref_vector<expr, ast_manager>&) ../src/qe/qsat.cpp:273\n  #5 0x558a07eccdc2 in qe::pred_abs::abstract_atoms(expr*, ref_vector<expr, ast_manager>&) ../src/qe/qsat.cpp:221\n  #6 0x558a07eccdc2 in qe::qsat::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/qe/qsat.cpp:1290\n  #7 0x558a09b043ea in exec(tactic&, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactic.cpp:148\n  #8 0x558a09b066ed in check_sat(tactic&, ref<goal>&, ref<model>&, labels_vec&, obj_ref<app, ast_manager>&, obj_ref<dependency_manager<ast_manager::expr_dependency_config>::dependency, ast_manager>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) ../src/tactic/tactic.cpp:168\n  #9 0x558a098b67b0 in check_sat_using_tactict_cmd::execute(cmd_context&) ../src/cmd_context/tactic_cmds.cpp:223\n  #10 0x558a09845eb8 in smt2::parser::parse_ext_cmd(int, int) ../src/parsers/smt2/smt2parser.cpp:2895\n  #11 0x558a0984cb2c in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:3001\n  #12 0x558a0984cb2c in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #13 0x558a098041c5 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\n  #14 0x558a06e94eb6 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #15 0x558a06e6d7ae in main ../src/shell/main.cpp:352\n  #16 0x7f73a4e17b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #17 0x558a06e81529 in _start (/home/suz/software/z3san/build-04232020225820-7597396/z3+0x1f7529)\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../src/ast/ast.h:504 in ast::get_kind() const\n==116314==ABORTING\n[540] % \n[540] % cat small.smt2\n(assert (ite distinct true true))\n(check-sat)\n(check-sat-using qe2)\n```\n\nOS: Ubuntu 18.04\nCommit: 7597396\n",
    "priority": 1
  },
  "378": {
    "body": "Hi,\nFor this case, Z3  gives an invalid model:\n```\n[520] % z3-4.8.7 model_validate=true small.smt2\nsat\n[521] % z3 model_validate=true small.smt2\nsat\n(error \"line 6 column 10: an invalid model was generated\")\n[522] % \n[522] % cat small.smt2\n(declare-const a String)\n(declare-const b String)\n(assert (distinct b (str.substr a 0 1)))\n(assert (str.contains \"bcd\" a))\n(assert (>= (str.len a) 3))\n(check-sat)\n[523] %\n```\n\nOS: Ubuntu 18.04\nCommit: 8fe3caa\n",
    "priority": 1
  },
  "379": {
    "body": "\n```\n[505] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/util/vector.h\nLine: 375\nidx < size()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[506] %\n[506] % z3release small.smt2\nSegmentation fault\n[507] %\n[507] % z3san small.smt2\nASAN:DEADLYSIGNAL\n=================================================================\n==19475==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x55eb6d3207e3 bp 0x7ffc2582c800 sp 0x7ffc2582bc30 T0)\n==19475==The signal is caused by a READ memory access.\n==19475==Hint: address points to the zero page.\n  #0 0x55eb6d3207e2 in ast::get_kind() const ../src/ast/ast.h:504\n  #1 0x55eb6d3207e2 in is_app_of(expr const*, int, int) ../src/ast/ast.h:1373\n  #2 0x55eb6d3207e2 in seq_util::str::is_unit(expr const*) const ../src/ast/seq_decl_plugin.h:323\n  #3 0x55eb6d3207e2 in seq_rewriter::mk_seq_index(expr*, expr*, expr*, obj_ref<expr, ast_manager>&) ../src/ast/rewriter/seq_rewriter.cpp:1265\n  #4 0x55eb6d346036 in seq_rewriter::mk_app_core(func_decl*, unsigned int, expr* const*, obj_ref<expr, ast_manager>&) ../src/ast/rewriter/seq_rewriter.cpp:528\n  #5 0x55eb6d1cb403 in reduce_app_core ../src/ast/rewriter/th_rewriter.cpp:221\n  #6 0x55eb6d1cb403 in reduce_app ../src/ast/rewriter/th_rewriter.cpp:616\n  #7 0x55eb6d1d4dca in process_app<false> ../src/ast/rewriter/rewriter_def.h:299\n  #8 0x55eb6d1d4dca in resume_core<false> ../src/ast/rewriter/rewriter_def.h:770\n  #9 0x55eb6d1e3bba in main_loop<false> ../src/ast/rewriter/rewriter_def.h:729\n  #10 0x55eb6d1e3bba in operator() ../src/ast/rewriter/rewriter_def.h:801\n  #11 0x55eb6d1e3bba in th_rewriter::operator()(expr*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/rewriter/th_rewriter.cpp:855\n  #12 0x55eb6bb79bab in asserted_formulas::assert_expr(expr*, app*) ../src/smt/asserted_formulas.cpp:156\n  #13 0x55eb6b66572c in smt::context::assert_expr_core(expr*, app*) ../src/smt/smt_context.cpp:2898\n  #14 0x55eb6b66572c in smt::context::assert_expr(expr*, app*) ../src/smt/smt_context.cpp:2910\n  #15 0x55eb6b66572c in smt::context::assert_expr(expr*) ../src/smt/smt_context.cpp:2905\n  #16 0x55eb6cd9d91c in solver::assert_expr(expr*) ../src/solver/solver.cpp:210\n  #17 0x55eb6cd9d91c in solver::assert_expr(expr*) ../src/solver/solver.cpp:210\n  #18 0x55eb6ccd4298 in cmd_context::assert_expr(expr*) ../src/cmd_context/cmd_context.cpp:1321\n  #19 0x55eb6cc36208 in smt2::parser::parse_assert() ../src/parsers/smt2/smt2parser.cpp:2571\n  #20 0x55eb6cc3c9a7 in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:2926\n  #21 0x55eb6cc3c9a7 in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #22 0x55eb6cbf3e35 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\n  #23 0x55eb6a280e66 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #24 0x55eb6a25975e in main ../src/shell/main.cpp:352\n  #25 0x7f812c3b4b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #26 0x55eb6a26d4d9 in _start (/home/suz/software/z3san/build-04222020135510-f94abf6/z3+0x1f74d9)\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../src/ast/ast.h:504 in ast::get_kind() const\n==19475==ABORTING\n[508] %\n[508] % cat small.smt2\n(declare-fun a () String)\n(declare-fun b () String)\n(assert (distinct (str.at (str.replace a b \"\") (str.indexof \"B\" (str.replace a b \"\") 2)))\n[509] %\n```\n\nOS: Ubuntu 18.04\nCommit: 886f4cb\n",
    "priority": 1
  },
  "380": {
    "body": "Hi,\nFor this case, Z3  gives an invalid model:\n```\n[509] % z3-4.8.6 small.smt2\nsat\n(error \"line 18 column 22: an invalid model was generated\")\n[510] % z3-4.8.7 small.smt2\nsat\n(error \"line 18 column 22: an invalid model was generated\")\n[511] % z3 small.smt2\nsat\n(error \"line 18 column 22: an invalid model was generated\")\n[512] % cat small.smt2\n(set-logic AUFNIRA)\n(set-option :sat.cardinality.solver true)\n(set-option :model_validate true)\n(set-option :sat.prob_search true)\n(declare-fun a () Int)\n(declare-fun b () Int)\n(declare-fun c () Int)\n(declare-fun d () Int)\n(declare-fun e () Int)\n(declare-fun f () Int)\n(declare-fun g () Int)\n(declare-fun h () Int)\n(declare-fun i () Int)\n(assert (and (>= a 0) (<= a 1) (>= b 0) (<= b 1) (>= c 0) (<= c 1)\n     (>= g 0) (<= g 1) (>= d 0) (<= d 1) (>= h 0) (<= h 1)\n     (>= e 0) (<= e 1) (>= f 0) (<= f 1) (>= i 0) (<= i 1)))\n(assert (= (+ a b c g d h e f i) 1))\n(check-sat-using qfnia)\n[513] %\n```\n\nOS: Ubuntu 18.04\nCommit: dd064a5\n",
    "priority": 1
  },
  "381": {
    "body": "\n```\n[586] % z3-4.8.7 small.smt2\nsat\n[587] % z3 small.smt2\nsat\n(error \"line 6 column 46: an invalid model was generated\")\n[588] % \n[588] % cat small.smt2\n(set-option :fp.engine spacer)\n(set-option :model_validate true)\n(declare-fun a () Int)\n(declare-fun b () Int)\n(assert (= a b))\n(check-sat-using (then reduce-invertible horn))\n[589] %\n```\nOS: Ubuntu 18.04\nCommit: dd064a5\n",
    "priority": 1
  },
  "382": {
    "body": "Hi,\nFor this case, Z3  gives an invalid model:\n```\n[555] % z3-4.8.5 model_validate=true small.smt2\nsat\n(error \"line 3 column 10: an invalid model was generated\")\n[556] % z3-4.8.6 model_validate=true small.smt2\nsat\n(error \"line 3 column 10: an invalid model was generated\")\n[557] % z3-4.8.7 model_validate=true small.smt2\nsat\n(error \"line 3 column 10: an invalid model was generated\")\n[558] % z3 model_validate=true small.smt2\nsat\n(error \"line 3 column 10: an invalid model was generated\")\n[559] % z3 smt.string_solver=z3str3 model_validate=true small.smt2\nsat\n(error \"line 3 column 10: an invalid model was generated\")\n[560] % \n[560] % cat small.smt2\n(declare-fun s () String)\n(assert (distinct (str.suffixof \"B\" (str.++ s \"B\")) (= s \"\")))\n(check-sat)\n[561] %\n```\n\nOS: Ubuntu 18.04\nCommit: dd064a5\n",
    "priority": 1
  },
  "383": {
    "body": "Hi,\nFor this case, Z3  gives an invalid model:\n```\n[569] % cvc4 -q small.smt2\nsat\n[570] % z3-4.8.7 model_validate=true small.smt2\nsat\n[571] % z3release model_validate=true small.smt2\nsat\n(error \"line 6 column 10: an invalid model was generated\")\n[572] % \n[572] % cat small.smt2\n(declare-fun a () String)\n(declare-fun b () String)\n(assert\n (or (= (str.substr (str.++ a \"abc\" b) 0 (- (str.len a) 1)) \"a\")\n (distinct (str.substr (str.++ \"abc\" b) 1 3) (str.++ \"bc\" b))))\n(check-sat)\n```\n\nOS: Ubuntu 18.04\nCommit: e3e6959\n",
    "priority": 1
  },
  "384": {
    "body": "Hi,\nFor this formula:\n```\n(set-logic HORN)\n(set-option :smt.phase_selection 5)\n(set-option :smt.threads 4)\n(set-option :smt.random_seed 2)\n(set-option :rewriter.eq2ineq true)\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(declare-fun d () Real)\n(declare-fun e () Real)\n(declare-fun f () Real)\n(declare-fun aa () Bool)\n(declare-fun g () Bool)\n(declare-fun h () Bool)\n(declare-fun i () Bool)\n(declare-fun j () Bool)\n(declare-fun k () Bool)\n(declare-fun l () Real)\n(declare-fun n () Bool)\n(declare-fun m () Bool)\n(declare-fun ab () Bool)\n(declare-fun q () Bool)\n(declare-fun ac () Bool)\n(declare-fun ad () Real)\n(declare-fun o () Bool)\n(declare-fun ae () Bool)\n(declare-fun af () Bool)\n(declare-fun r () Bool)\n(declare-fun p () Bool)\n(declare-fun s () Bool)\n(declare-fun ag () Bool)\n(declare-fun ah () Bool)\n(declare-fun ai () Bool)\n(declare-fun aj () Bool)\n(declare-fun ak () Bool)\n(declare-fun al () Bool)\n(declare-fun am () Bool)\n(declare-fun an () Bool)\n(declare-fun ao () Real)\n(declare-fun ap () Bool)\n(declare-fun aq () Bool)\n(declare-fun y () Bool)\n(declare-fun ar () Bool)\n(declare-fun t () Bool)\n(declare-fun u () Bool)\n(declare-fun v () Bool)\n(declare-fun z () Bool)\n(declare-fun x () Bool)\n(declare-fun w () Bool)\n(declare-fun bb () Bool)\n(declare-fun bc () Bool)\n(assert (or (= a 2.0) (= a 3.0a 4.0)))\n(assert (or (= b 1.0) (= b 2.0) (= b 3.0) (= b 4.0)))\n(assert (or (= c 1.0) (= c 2.0c 3.0) (= c 4.0)))\n(assert (or (= d 1.0) (= d 2.0) (= 3.0 d 4.0)))\n(assert (or (= 1.0 e 2.0) (= e 3.0) (= e 4.0)))\n(assert (or (= f 1.0) (= f 2.0) (= f 3.0) (= f 4.0)))\n(assert (= (= (+ (ite ac 1 0) (ite q 1 0) (ite m 1 0) (ite n 1 0)) 0) (= l 0.0)))\n(assert (= ad 0.0))\n(assert (<= (ite h 1 0) (ite aa 1 0)))\n(assert (<= (+ (ite i 1 0) (ite k 1 0)) 1))\n(assert (<= (+ (ite i 1 0) (ite j 1 0)) 10))\n(assert (<= (+ (ite ab 1 0) (ite ac 1 0)) 1))\n(assert (<= (+ (ite ab 1 0) (ite q 1 0)) 1))\n(assert (<= (+ (ite ab 1 0) (ite n 1 0)) 1))\n(assert (<= (+ (ite o 1 0) (ite ae 1 0)) (+ (ite r 1 0) (ite p 1 0)) 1))\n(assert (<= (+ (ite aj 1 0) (ite ak 1 0)) 1))\n(assert (<= (+ (ite aq 1 0) (ite aq 1 0) (ite y 1 0)) 1))\n(assert (<= (+ (ite aq 1 0) (ite ap 1 0)) 1))\n(assert (<= (+ (ite t 1 0) (ite v 1 0)) 1))\n(assert (<= (+ (ite t 1 0) (ite u 1 0)) 0))\n(assert (<= (+ (ite x 1 0) (ite z 1 0)) (+ (ite bb 1 0) (ite bc 1 0)) (ite w 1 0)))\n(assert (<= (+ (ite g 1 0) (ite aa 1 0)) 1))\n(assert (<= (+ (ite m 1 0) (ite n 1 0)) 1(+ (ite af 1 0) 1) (ite p 1 0)))\n(assert (<= (+ (ite ag 1 0) (ite s 1 0)) 1))\n(assert (<= (+ (ite ai 1 0) (ite ah 1 0) (ite al 1 0)) (ite am 1 0) (ite an 1 0)))\n(assert (<= (+ (ite ar 1 0) (ite v 1 0)) 1))\n(minimize ao)\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/lp/lar_solver.cpp\nLine: 835\nm_mpq_lar_core_solver.m_r_solver.reduced_costs_are_correct_tableau()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: e3e6959\n",
    "priority": 1
  },
  "385": {
    "body": "Hi,\nFor this case, Z3  gives an invalid model:\n```\n[670] % z3release model_validate=true small.smt2\nsat\n[671] % z3release smt.arith.solver=2 model_validate=true small.smt2\nsat\n(error \"line 5 column 10: an invalid model was generated\")\n[672] % \n[672] % cat small.smt2\n(declare-fun a () Int)\n(declare-fun b () String)\n(declare-fun c () String)\n(assert (str.<= \"ABCD\" (str.++ b (int.to.str a) c)))\n(check-sat)\n[673] %\n```\n\nOS: Ubuntu 18.04\nCommit: e1fa04b\n",
    "priority": 1
  },
  "386": {
    "body": "Hi,\r\nFor this case, Z3 release throws out a segmentation fault:\r\n```\r\n[540] % z3 small.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/util/parray.h\r\nLine: 336\r\ni < size(r)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[541] % z3release small.smt2\r\nSegmentation fault\r\n[542] % z3san small.smt2\r\nASAN:DEADLYSIGNAL\r\n=================================================================\r\n==4123==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000004 (pc 0x55f8ba419f5f bp 0x7ffc18c5ca10 sp 0x7ffc18c5c7d0 T0)\r\n==4123==The signal is caused by a READ memory access.\r\n==4123==Hint: address points to the zero page.\r\n  #0 0x55f8ba419f5e in ast::get_kind() const ../src/ast/ast.h:504\r\n  #1 0x55f8ba419f5e in is_app(ast const*) ../src/ast/ast.h:914\r\n  #2 0x55f8ba419f5e in has_quantifiers(expr const*) ../src/ast/ast.h:1388\r\n  #3 0x55f8ba419f5e in nnf::imp::visit(expr*, bool, bool) ../src/ast/normal_forms/nnf.cpp:412\r\n  #4 0x55f8ba421f84 in nnf::imp::process(expr*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/normal_forms/nnf.cpp:856\r\n  #5 0x55f8ba413c0d in nnf::imp::operator()(expr*, ref_vector<expr, ast_manager>&, ref_vector<app, ast_manager>&, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/normal_forms/nnf.cpp:898\r\n  #6 0x55f8ba413c0d in nnf::operator()(expr*, ref_vector<expr, ast_manager>&, ref_vector<app, ast_manager>&, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/normal_forms/nnf.cpp:928\r\n  #7 0x55f8b9ce6c6e in nnf_tactic::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/core/nnf_tactic.cpp:75\r\n  #8 0x55f8ba30ac91 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:111\r\n  #9 0x55f8ba26d67a in exec(tactic&, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactic.cpp:148\r\n  #10 0x55f8ba26f97d in check_sat(tactic&, ref<goal>&, ref<model>&, labels_vec&, obj_ref<app, ast_manager>&, obj_ref<dependency_manager<ast_manager::expr_dependency_config>::dependency, ast_manager>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) ../src/tactic/tactic.cpp:168\r\n  #11 0x55f8ba01fa40 in check_sat_using_tactict_cmd::execute(cmd_context&) ../src/cmd_context/tactic_cmds.cpp:223\r\n  #12 0x55f8b9faf148 in smt2::parser::parse_ext_cmd(int, int) ../src/parsers/smt2/smt2parser.cpp:2895\r\n  #13 0x55f8b9fb5dbc in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:3001\r\n  #14 0x55f8b9fb5dbc in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\r\n  #15 0x55f8b9f6d455 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\r\n  #16 0x55f8b760bf66 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\r\n  #17 0x55f8b75e499e in main ../src/shell/main.cpp:352\r\n  #18 0x7f075729db96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\r\n  #19 0x55f8b75f85d9 in _start (/home/suz/software/z3san/build-04182020194526-bcbe802/z3+0x1f75d9)\r\nAddressSanitizer can not provide additional info.\r\nSUMMARY: AddressSanitizer: SEGV ../src/ast/ast.h:504 in ast::get_kind() const\r\n==4123==ABORTING\r\n[543] % \r\n[543] % cat small.smt2\r\n(assert (exists ((a Bool)) false))\r\n(assert (not false))\r\n(check-sat-using purify-arith)\r\n[544] %\r\n```\r\nIt might be related to https://github.com/Z3Prover/z3/issues/4013, but the stacks are different\r\n\r\nOS: Ubuntu 18.04\r\nCommit: bcbe802\r\n",
    "priority": 1
  },
  "387": {
    "body": "Hi,\nFor this case, Z3  throws out a segmentation fault:\n```\n[876] % z3 small.smt2\nSegmentation fault\n[877] % z3release small.smt2\nunknown\n[878] % z3san small.smt2\nASAN:DEADLYSIGNAL\n=================================================================\n==18695==ERROR: AddressSanitizer: SEGV on unknown address 0x00000000002c (pc 0x5654e01f66f7 bp 0x7ffc3e56b200 sp 0x7ffc3e56af40 T0)\n==18695==The signal is caused by a READ memory access.\n==18695==Hint: address points to the zero page.\n  #0 0x5654e01f66f6 in smt::enode::merge_tf() const ../src/smt/smt_enode.h:130\n  #1 0x5654e01f66f6 in smt::context::propagate_bool_var_enode(int) ../src/smt/smt_context.cpp:1394\n  #2 0x5654e01f76d4 in smt::context::propagate_atoms() ../src/smt/smt_context.cpp:1310\n  #3 0x5654e0203045 in smt::context::propagate() ../src/smt/smt_context.cpp:1675\n  #4 0x5654e020f4c1 in smt::context::bounded_search() ../src/smt/smt_context.cpp:3716\n  #5 0x5654e020ff67 in smt::context::search() ../src/smt/smt_context.cpp:3600\n  #6 0x5654e0211fc9 in smt::context::check(unsigned int, expr* const*, bool) ../src/smt/smt_context.cpp:3483\n  #7 0x5654e0212ca1 in smt::context::setup_and_check(bool) ../src/smt/smt_context.cpp:3419\n  #8 0x5654e009425f in smt_tactic::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/smt/tactic/smt_tactic.cpp:201\n  #9 0x5654e1b19c87 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #10 0x5654e1b0c5e1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #11 0x5654e1b0c5e1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #12 0x5654e1b0c5e1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #13 0x5654e1b0c5e1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #14 0x5654e1b0c5e1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #15 0x5654e1b0c5e1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #16 0x5654e1b0c5e1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #17 0x5654e1b0c5e1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #18 0x5654e1b0c5e1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #19 0x5654e1b0c5e1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #20 0x5654e1b0c5e1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #21 0x5654e1b0c5e1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #22 0x5654e1b19c87 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #23 0x5654e1a7b67a in exec(tactic&, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactic.cpp:148\n  #24 0x5654e1a7d97d in check_sat(tactic&, ref<goal>&, ref<model>&, labels_vec&, obj_ref<app, ast_manager>&, obj_ref<dependency_manager<ast_manager::expr_dependency_config>::dependency, ast_manager>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) ../src/tactic/tactic.cpp:168\n  #25 0x5654e197c2d8 in check_sat_core2 ../src/solver/tactic2solver.cpp:185\n  #26 0x5654e1983697 in solver_na2as::check_sat_core(unsigned int, expr* const*) ../src/solver/solver_na2as.cpp:67\n  #27 0x5654e19410a4 in combined_solver::check_sat_core(unsigned int, expr* const*) ../src/solver/combined_solver.cpp:246\n  #28 0x5654e1922191 in solver::check_sat(unsigned int, expr* const*) ../src/solver/solver.cpp:330\n  #29 0x5654e187d250 in cmd_context::check_sat(unsigned int, expr* const*) ../src/cmd_context/cmd_context.cpp:1551\n  #30 0x5654e17c3f33 in smt2::parser::parse_check_sat() ../src/parsers/smt2/smt2parser.cpp:2596\n  #31 0x5654e17c3f33 in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:2938\n  #32 0x5654e17c3f33 in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #33 0x5654e177b455 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\n  #34 0x5654dee19f66 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #35 0x5654dedf299e in main ../src/shell/main.cpp:352\n  #36 0x7fc5a555eb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #37 0x5654dee065d9 in _start (/home/suz/software/z3san/build-04182020194526-bcbe802/z3+0x1f75d9)\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../src/smt/smt_enode.h:130 in smt::enode::merge_tf() const\n==18695==ABORTING\n[879] % \n[879] % cat small.smt2\n(set-option :proof true)\n(set-option :rewriter.eq2ineq true)\n(set-option :smt.arith.eager_eq_axioms false)\n(set-option :smt.arith.solver 2)\n(declare-fun a () Int)\n(declare-fun b () String)\n(declare-fun c () String)\n(assert (distinct a 0))\n(assert (= a (str.len b)))\n(assert (= 7 (str.len c)))\n(check-sat)\n[880] %\n```\n\nOS: Ubuntu 18.04\nCommit: bcbe802\n",
    "priority": 1
  },
  "388": {
    "body": "Hi,\nFor this case, Z3  throws out a segmentation fault:\n```\n[507] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/util/parray.h\nLine: 336\ni < size(r)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[508] % z3release small.smt2\nSegmentation fault\n[509] % z3san small.smt2\nASAN:DEADLYSIGNAL\n=================================================================\n==10264==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x55d19a642a49 bp 0x7ffde5085670 sp 0x7ffde5085430 T0)\n==10264==The signal is caused by a READ memory access.\n==10264==Hint: address points to the zero page.\n  #0 0x55d19a642a48 in nnf::imp::visit(expr*, bool, bool) ../src/ast/normal_forms/nnf.cpp:418\n  #1 0x55d19a64af84 in nnf::imp::process(expr*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/normal_forms/nnf.cpp:856\n  #2 0x55d19a63cc0d in nnf::imp::operator()(expr*, ref_vector<expr, ast_manager>&, ref_vector<app, ast_manager>&, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/normal_forms/nnf.cpp:898\n  #3 0x55d19a63cc0d in nnf::operator()(expr*, ref_vector<expr, ast_manager>&, ref_vector<app, ast_manager>&, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/normal_forms/nnf.cpp:928\n  #4 0x55d199f0fc6e in nnf_tactic::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/core/nnf_tactic.cpp:75\n  #5 0x55d19a49667a in exec(tactic&, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactic.cpp:148\n  #6 0x55d19a49897d in check_sat(tactic&, ref<goal>&, ref<model>&, labels_vec&, obj_ref<app, ast_manager>&, obj_ref<dependency_manager<ast_manager::expr_dependency_config>::dependency, ast_manager>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) ../src/tactic/tactic.cpp:168\n  #7 0x55d19a248a40 in check_sat_using_tactict_cmd::execute(cmd_context&) ../src/cmd_context/tactic_cmds.cpp:223\n  #8 0x55d19a1d8148 in smt2::parser::parse_ext_cmd(int, int) ../src/parsers/smt2/smt2parser.cpp:2895\n  #9 0x55d19a1dedbc in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:3001\n  #10 0x55d19a1dedbc in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #11 0x55d19a196455 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179  \n  #12 0x55d197834f66 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #13 0x55d19780d99e in main ../src/shell/main.cpp:352\n  #14 0x7f79213edb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #15 0x55d1978215d9 in _start (/home/suz/software/z3san/build-04182020194526-bcbe802/z3+0x1f75d9)\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../src/ast/normal_forms/nnf.cpp:418 in nnf::imp::visit(expr*, bool, bool)\n==10264==ABORTING\n[510] %\n[510] % cat small.smt2\n(assert (exists ((a Int)) false))\n(assert (forall ((b Int)) false))\n(check-sat-using nnf)\n[511] %\n```\n\nOS: Ubuntu 18.04\nCommit: bcbe802\n",
    "priority": 1
  },
  "389": {
    "body": "\n```\n[589] % z3 small.smt2\nSegmentation fault\n[590] % z3release small.smt2\nunknown\n[591] % z3san small.smt2\nFailed to verify: m.is_eq(atom, lhs, rhs)\nASAN:DEADLYSIGNAL\n=================================================================\n==6339==ERROR: AddressSanitizer: SEGV on unknown address 0x0001bfff804b (pc 0x55a2eaa3f016 bp 0x7fff88833940 sp 0x7fff88833920 T0)\n==6339==The signal is caused by a READ memory access.\n  #0 0x55a2eaa3f015 in smt::context::get_enode(expr const*) const ../src/smt/smt_context.h:278\n  #1 0x55a2eaa3f015 in smt::theory_lra::imp::get_enode(expr*) const ../src/smt/theory_lra.cpp:370\n  #2 0x55a2eaa3f015 in smt::theory_lra::imp::internalize_eq_eh(app*, int) ../src/smt/theory_lra.cpp:1106\n  #3 0x55a2eaa3f015 in smt::theory_lra::internalize_eq_eh(app*, int) ../src/smt/theory_lra.cpp:3938\n  #4 0x55a2eac71abc in smt::context::internalize_eq(app*, bool) ../src/smt/smt_internalizer.cpp:434\n  #5 0x55a2eac71abc in smt::context::internalize_formula(expr*, bool) ../src/smt/smt_internalizer.cpp:408\n  #6 0x55a2eac6c4e9 in smt::context::internalize_rec(expr*, bool) ../src/smt/smt_internalizer.cpp:350\n  #7 0x55a2eac73dba in smt::context::internalize(expr*, bool) ../src/smt/smt_internalizer.cpp:339\n  #8 0x55a2ea8c4fd4 in smt::theory::mk_eq(expr*, expr*, bool) ../src/smt/smt_theory.cpp:128\n  #9 0x55a2eb0f3bdc in smt::theory_seq::add_length_axiom(expr*) ../src/smt/theory_seq.cpp:4705\n  #10 0x55a2eb0f439a in smt::theory_seq::deque_axiom(expr*) ../src/smt/theory_seq.cpp:4623\n  #11 0x55a2eb0f4b1d in smt::theory_seq::propagate() ../src/smt/theory_seq.cpp:4595\n  #12 0x55a2ea5b1fb7 in smt::context::propagate_theories() ../src/smt/smt_context.cpp:1600\n  #13 0x55a2ea5b1fb7 in smt::context::propagate() ../src/smt/smt_context.cpp:1683\n  #14 0x55a2ea5bd9f1 in smt::context::bounded_search() ../src/smt/smt_context.cpp:3716\n  #15 0x55a2ea5be497 in smt::context::search() ../src/smt/smt_context.cpp:3600\n  #16 0x55a2ea5c04f9 in smt::context::check(unsigned int, expr* const*, bool) ../src/smt/smt_context.cpp:3483\n  #17 0x55a2ea5c11d1 in smt::context::setup_and_check(bool) ../src/smt/smt_context.cpp:3419\n  #18 0x55a2ea44278f in smt_tactic::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/smt/tactic/smt_tactic.cpp:201\n  #19 0x55a2ebec8257 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #20 0x55a2ebebabb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #21 0x55a2ebebabb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #22 0x55a2ebebabb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #23 0x55a2ebebabb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #24 0x55a2ebebabb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #25 0x55a2ebebabb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #26 0x55a2ebebabb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #27 0x55a2ebebabb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #28 0x55a2ebebabb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #29 0x55a2ebebabb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #30 0x55a2ebebabb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #31 0x55a2ebebabb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #32 0x55a2ebec8257 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #33 0x55a2ebe29c4a in exec(tactic&, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactic.cpp:148\n  #34 0x55a2ebe2bf4d in check_sat(tactic&, ref<goal>&, ref<model>&, labels_vec&, obj_ref<app, ast_manager>&, obj_ref<dependency_manager<ast_manager::expr_dependency_config>::dependency, ast_manager>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) ../src/tactic/tactic.cpp:168\n  #35 0x55a2ebd2a8a8 in check_sat_core2 ../src/solver/tactic2solver.cpp:185\n  #36 0x55a2ebd31c67 in solver_na2as::check_sat_core(unsigned int, expr* const*) ../src/solver/solver_na2as.cpp:67\n  #37 0x55a2ebcef674 in combined_solver::check_sat_core(unsigned int, expr* const*) ../src/solver/combined_solver.cpp:246\n  #38 0x55a2ebcd0761 in solver::check_sat(unsigned int, expr* const*) ../src/solver/solver.cpp:330\n  #39 0x55a2ebc2b820 in cmd_context::check_sat(unsigned int, expr* const*) ../src/cmd_context/cmd_context.cpp:1551\n  #40 0x55a2ebb72503 in smt2::parser::parse_check_sat() ../src/parsers/smt2/smt2parser.cpp:2596\n  #41 0x55a2ebb72503 in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:2938\n  #42 0x55a2ebb72503 in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #43 0x55a2ebb29a25 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\n  #44 0x55a2e91c8466 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #45 0x55a2e91a0e3e in main ../src/shell/main.cpp:352\n  #46 0x7f6624eecb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #47 0x55a2e91b4ad9 in _start (/home/suz/software/z3san/build-04172020182140-3e9479d/z3+0x1f7ad9)\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../src/smt/smt_context.h:278 in smt::context::get_enode(expr const*) const\n==6339==ABORTING\n[592] % \n[592] % cat small.smt2\n(set-option :proof true)\n(set-option :rewriter.eq2ineq true)\n(declare-fun a () Int)\n(declare-fun b () Int)\n(declare-fun c () Int)\n(declare-fun d () Int)\n(declare-fun e () String)\n(declare-fun f () String)\n(declare-fun g () String)\n(assert (= g (str.++ e f)))\n(assert (= c d 20))\n(assert (distinct a d (str.len g)))\n(assert (= c (str.len e)))\n(check-sat)\n[593] %\n```\n\nOS: Ubuntu 18.04\nCommit: 3e9479d\n",
    "priority": 1
  },
  "390": {
    "body": "\n```\n[664] % z3 small.smt2\nSegmentation fault\n[665] % z3release small.smt2\nSegmentation fault\n[666] % z3san small.smt2\n=================================================================\n==28375==ERROR: AddressSanitizer: unknown-crash on address 0x000000006250 at pc 0x55a420128b38 bp 0x7ffd200ca8c0 sp 0x7ffd200ca8b0\nREAD of size 8 at 0x000000006250 thread T0\n  #0 0x55a420128b37 in get_sort(expr const*) ../src/ast/ast.cpp:425\n  #1 0x55a420128b37 in ast_manager::get_sort(expr const*) const ../src/ast/ast.h:1738\n  #2 0x55a420128b37 in ast_manager::coercion_needed(func_decl*, unsigned int, expr* const*) ../src/ast/ast.cpp:2207\n  #3 0x55a42014135c in ast_manager::mk_app_core(func_decl*, unsigned int, expr* const*) ../src/ast/ast.cpp:2235\n  #4 0x55a42013fcb8 in ast_manager::mk_app(func_decl*, unsigned int, expr* const*) ../src/ast/ast.cpp:2349\n  #5 0x55a420148e90 in ast_manager::mk_app(int, int, expr*, expr*) ../src/ast/ast.cpp:2040\n  #6 0x55a41e48156f in arith_util::mk_le(expr*, expr*) const ../src/ast/arith_decl_plugin.h:423\n  #7 0x55a41e48156f in smt::seq_axioms::add_length_limit(expr*, unsigned int) ../src/smt/seq_axioms.cpp:748\n  #8 0x55a41e2a432d in smt::theory_seq::add_length_limit(expr*, unsigned int, bool) ../src/smt/theory_seq.cpp:3652\n  #9 0x55a41e2da03e in smt::theory_seq::relevant_eh(app*) ../src/smt/theory_seq.cpp:5432\n  #10 0x55a41d771995 in smt::context::relevant_eh(expr*) ../src/smt/smt_context.cpp:1559\n  #11 0x55a41d7ce389 in smt::relevancy_propagator_imp::set_relevant(expr*) ../src/smt/smt_relevancy.cpp:308\n  #12 0x55a41d7ce389 in smt::relevancy_propagator_imp::mark_as_relevant(expr*) ../src/smt/smt_relevancy.cpp:336\n  #13 0x55a41e2dab0c in smt::context::mark_as_relevant(expr*) ../src/smt/smt_context.h:1232\n  #14 0x55a41e2dab0c in smt::context::mark_as_relevant(smt::enode*) ../src/smt/smt_context.h:1234\n  #15 0x55a41e2dab0c in smt::theory_seq::mk_var(smt::enode*) ../src/smt/theory_seq.cpp:4400\n  #16 0x55a41e2e39ba in smt::theory_seq::internalize_term(app*) ../src/smt/theory_seq.cpp:3631\n  #17 0x55a41de4e05b in smt::context::internalize_theory_term(app*) ../src/smt/smt_internalizer.cpp:838\n  #18 0x55a41de4e05b in smt::context::internalize_term(app*) ../src/smt/smt_internalizer.cpp:777\n  #19 0x55a41de4e486 in smt::context::internalize_rec(expr*, bool) ../src/smt/smt_internalizer.cpp:358\n  #20 0x55a41de4e94e in smt::context::internalize_formula_core(app*, bool) ../src/smt/smt_internalizer.cpp:591\n  #21 0x55a41de5387e in smt::context::internalize_eq(app*, bool) ../src/smt/smt_internalizer.cpp:425\n  #22 0x55a41de5387e in smt::context::internalize_formula(expr*, bool) ../src/smt/smt_internalizer.cpp:408\n  #23 0x55a41de4e4e9 in smt::context::internalize_rec(expr*, bool) ../src/smt/smt_internalizer.cpp:350\n  #24 0x55a41de55dba in smt::context::internalize(expr*, bool) ../src/smt/smt_internalizer.cpp:339\n  #25 0x55a41daa6fd4 in smt::theory::mk_eq(expr*, expr*, bool) ../src/smt/smt_theory.cpp:128\n  #26 0x55a41e28499f in smt::theory_seq::branch_nq(smt::theory_seq::ne const&) ../src/smt/theory_seq.cpp:3177\n  #27 0x55a41e29190a in smt::theory_seq::branch_nqs() ../src/smt/theory_seq.cpp:3157\n  #28 0x55a41e2e1bce in smt::theory_seq::final_check_eh() ../src/smt/theory_seq.cpp:427\n  #29 0x55a41d78f614 in smt::context::final_check() ../src/smt/smt_context.cpp:3857\n  #30 0x55a41d79fb96 in smt::context::bounded_search() ../src/smt/smt_context.cpp:3773\n  #31 0x55a41d7a0497 in smt::context::search() ../src/smt/smt_context.cpp:3600\n  #32 0x55a41d7a24f9 in smt::context::check(unsigned int, expr* const*, bool) ../src/smt/smt_context.cpp:3483\n  #33 0x55a41d7a31d1 in smt::context::setup_and_check(bool) ../src/smt/smt_context.cpp:3419\n  #34 0x55a41d62478f in smt_tactic::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/smt/tactic/smt_tactic.cpp:201\n  #35 0x55a41f0aa257 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #36 0x55a41f09cbb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #37 0x55a41f09cbb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #38 0x55a41f09cbb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #39 0x55a41f09cbb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #40 0x55a41f09cbb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #41 0x55a41f09cbb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #42 0x55a41f09cbb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #43 0x55a41f09cbb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #44 0x55a41f09cbb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #45 0x55a41f09cbb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #46 0x55a41f09cbb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #47 0x55a41f09cbb1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #48 0x55a41f0aa257 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #49 0x55a41f00bc4a in exec(tactic&, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactic.cpp:148\n  #50 0x55a41f00df4d in check_sat(tactic&, ref<goal>&, ref<model>&, labels_vec&, obj_ref<app, ast_manager>&, obj_ref<dependency_manager<ast_manager::expr_dependency_config>::dependency, ast_manager>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) ../src/tactic/tactic.cpp:168\n  #51 0x55a41ef0c8a8 in check_sat_core2 ../src/solver/tactic2solver.cpp:185\n  #52 0x55a41ef13c67 in solver_na2as::check_sat_core(unsigned int, expr* const*) ../src/solver/solver_na2as.cpp:67\n  #53 0x55a41eed1674 in combined_solver::check_sat_core(unsigned int, expr* const*) ../src/solver/combined_solver.cpp:246\n  #54 0x55a41eeb2761 in solver::check_sat(unsigned int, expr* const*) ../src/solver/solver.cpp:330\n  #55 0x55a41ee0d820 in cmd_context::check_sat(unsigned int, expr* const*) ../src/cmd_context/cmd_context.cpp:1551\n  #56 0x55a41ed54503 in smt2::parser::parse_check_sat() ../src/parsers/smt2/smt2parser.cpp:2596\n  #57 0x55a41ed54503 in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:2938\n  #58 0x55a41ed54503 in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #59 0x55a41ed0ba25 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\n  #60 0x55a41c3aa466 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #61 0x55a41c382e3e in main ../src/shell/main.cpp:352\n  #62 0x7f9ecd88ab96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #63 0x55a41c396ad9 in _start (/home/suz/software/z3san/build-04172020182140-3e9479d/z3+0x1f7ad9)\nAddress 0x000000006250 is a wild pointer.\nSUMMARY: AddressSanitizer: unknown-crash ../src/ast/ast.cpp:425 in get_sort(expr const*)\n...\n==28375==ABORTING\n[667] % \n[667] % cat small.smt2\n(set-option :proof true)\n(declare-fun a () String)\n(declare-fun b () String)\n(declare-fun c () String)\n(assert (distinct a b))\n(assert (distinct c (str.++ b \"aaaaaaaaaaaaa\")))\n(check-sat)\n[668] %\n```\n\nOS: Ubuntu 18.04\nCommit: 3e9479d\n",
    "priority": 1
  },
  "391": {
    "body": "\n```\n[611] % z3 small.smt2 \nSegmentation fault\n[612] % z3release small.smt2 \nSegmentation fault\n[613] % z3san small.smt2 \n=================================================================\n==22776==ERROR: AddressSanitizer: heap-use-after-free on address 0x611000052018 at pc 0x5593711cf067 bp 0x7ffe30372f80 sp 0x7ffe30372f70\nREAD of size 8 at 0x611000052018 thread T0\n  #0 0x5593711cf066 in smt::theory_seq::fixed_length(bool) ../src/smt/theory_seq.cpp:1980\n  #1 0x5593712028df in smt::theory_seq::final_check_eh() ../src/smt/theory_seq.cpp:386\n  #2 0x5593706a8684 in smt::context::final_check() ../src/smt/smt_context.cpp:3857\n  #3 0x5593706b8c06 in smt::context::bounded_search() ../src/smt/smt_context.cpp:3773\n  #4 0x5593706b9507 in smt::context::search() ../src/smt/smt_context.cpp:3600\n  #5 0x5593706bb569 in smt::context::check(unsigned int, expr* const*, bool) ../src/smt/smt_context.cpp:3483\n  #6 0x5593706bc241 in smt::context::setup_and_check(bool) ../src/smt/smt_context.cpp:3419\n  #7 0x55937053d7ff in smt_tactic::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/smt/tactic/smt_tactic.cpp:201\n  #8 0x559371fc4107 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #9 0x559371fb6a61 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #10 0x559371fb6a61 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #11 0x559371fb6a61 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #12 0x559371fb6a61 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #13 0x559371fb6a61 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #14 0x559371fb6a61 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #15 0x559371fb6a61 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #16 0x559371fb6a61 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #17 0x559371fb6a61 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #18 0x559371fb6a61 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #19 0x559371fb6a61 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #20 0x559371fb6a61 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\n  #21 0x559371fc4107 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #22 0x559371f25afa in exec(tactic&, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactic.cpp:148\n  #23 0x559371f27dfd in check_sat(tactic&, ref<goal>&, ref<model>&, labels_vec&, obj_ref<app, ast_manager>&, obj_ref<dependency_manager<ast_manager::expr_dependency_config>::dependency, ast_manager>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) ../src/tactic/tactic.cpp:168\n  #24 0x559371e26758 in check_sat_core2 ../src/solver/tactic2solver.cpp:185\n  #25 0x559371e2db17 in solver_na2as::check_sat_core(unsigned int, expr* const*) ../src/solver/solver_na2as.cpp:67\n  #26 0x559371deb524 in combined_solver::check_sat_core(unsigned int, expr* const*) ../src/solver/combined_solver.cpp:246\n  #27 0x559371dcc611 in solver::check_sat(unsigned int, expr* const*) ../src/solver/solver.cpp:330\n  #28 0x559371d276d0 in cmd_context::check_sat(unsigned int, expr* const*) ../src/cmd_context/cmd_context.cpp:1551\n  #29 0x559371c6e3b3 in smt2::parser::parse_check_sat() ../src/parsers/smt2/smt2parser.cpp:2596\n  #30 0x559371c6e3b3 in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:2938\n  #31 0x559371c6e3b3 in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #32 0x559371c258d5 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\n  #33 0x55936f2c34d6 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #34 0x55936f29beae in main ../src/shell/main.cpp:352\n  #35 0x7ffb4da36b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #36 0x55936f2afb49 in _start (/home/suz/software/z3san/build-04172020073446-b8bf608/z3+0x1f7b49)\n...\n==22776==ABORTING\n[614] % \n[614] % cat small.smt2 \n(declare-fun a () String)\n(declare-fun b () Int)\n(assert (= (str.replace \"A\" (int.to.str b) a) \"A\"))\n(check-sat)\n[615] %\n```\n\nOS: Ubuntu 18.04\nCommit: b8bf608\n",
    "priority": 1
  },
  "392": {
    "body": "\n```\n[604] % z3 model_validate=true small.smt2 \nsat\n(error \"line 4 column 10: an invalid model was generated\")\n[605] % \n[605] % cat small.smt2 \n(declare-fun a () String)\n(declare-fun b () Int)\n(assert (= (str.replace \"A\" (int.to.str b) a) (str.++ \"A\" (str.replace \"\" (int.to.str b) a))))\n(check-sat)\n[606] %\n```\nOS: Ubuntu 18.04\nCommit: b8bf608\n",
    "priority": 0
  },
  "393": {
    "body": "\n```\n[748] % z3release small.smt2\n(error \"line 23 column 122: invalid quantified expression, syntax error: (forall|exists ((<symbol> <sort>)*) <expr>) expected\")\n(smt.diff_logic: non-diff logic expression (<= (+ (Values$cardinality (Values$union a!17 b!16))\n    (* (- 1) (Values$cardinality b!16))\n    (* (- 1) (Values$cardinality a!17)))\n  0))\nSegmentation fault\n[749] % \n[749] % z3san small.smt2\n(error \"line 23 column 122: invalid quantified expression, syntax error: (forall|exists ((<symbol> <sort>)*) <expr>) expected\")\n(smt.diff_logic: non-diff logic expression (<= (+ (Values$cardinality (Values$union a!17 b!16))\n    (* (- 1) (Values$cardinality b!16))\n    (* (- 1) (Values$cardinality a!17)))\n  0))\nASAN:DEADLYSIGNAL\n=================================================================\n==17286==ERROR: AddressSanitizer: SEGV on unknown address 0x0000ffff8004 (pc 0x55d90b8a86b2 bp 0x7fffad803fd0 sp 0x7fffad803dc0 T0)\n==17286==The signal is caused by a READ memory access.\n  #0 0x55d90b8a86b1 in smt::enode::get_num_args() const ../src/smt/smt_enode.h:213\n  #1 0x55d90b8a86b1 in smt::cg_table::cg_eq::operator()(smt::enode*, smt::enode*) const ../src/smt/smt_cg_table.cpp:56\n  #2 0x55d90b8a86b1 in chashtable<smt::enode*, smt::cg_table::cg_hash, smt::cg_table::cg_eq>::equals(smt::enode* const&, smt::enode* const&) const ../src/util/chashtable.h:79\n  #3 0x55d90b8a86b1 in chashtable<smt::enode*, smt::cg_table::cg_hash, smt::cg_table::cg_eq>::insert_if_not_there(smt::enode* const&) ../src/util/chashtable.h:364\n  #4 0x55d90b8a86b1 in smt::cg_table::insert(smt::enode*) ../src/smt/smt_cg_table.cpp:228\n  #5 0x55d90b1729bc in smt::context::undo_add_eq(smt::enode*, smt::enode*, unsigned int) ../src/smt/smt_context.cpp:947\n  #6 0x55d90b1c359f in void undo_trail_stack<smt::context>(smt::context&, old_ptr_vector<trail<smt::context> >&, unsigned int) ../src/util/trail.h:332\n  #7 0x55d90b1a6dd7 in smt::context::undo_trail_stack(unsigned int) ../src/smt/smt_context.cpp:1917\n  #8 0x55d90b1a6dd7 in smt::context::pop_scope_core(unsigned int) ../src/smt/smt_context.cpp:2376\n  #9 0x55d90b1aa851 in smt::context::pop_scope(unsigned int) ../src/smt/smt_context.cpp:2420\n  #10 0x55d90b1aa851 in smt::context::pop_to_base_lvl() ../src/smt/smt_context.cpp:2428\n  #11 0x55d90b1aa851 in smt::context::pop(unsigned int) ../src/smt/smt_context.cpp:2860\n  #12 0x55d90b029b35 in ctx_solver_simplify_tactic::simplify_bool(expr*, obj_ref<expr, ast_manager>&) ../src/smt/tactic/ctx_solver_simplify_tactic.cpp:268\n  #13 0x55d90b029b35 in ctx_solver_simplify_tactic::reduce(obj_ref<expr, ast_manager>&) ../src/smt/tactic/ctx_solver_simplify_tactic.cpp:187\n  #14 0x55d90b02f175 in ctx_solver_simplify_tactic::reduce(goal&) ../src/smt/tactic/ctx_solver_simplify_tactic.cpp:97\n  #15 0x55d90b02f175 in ctx_solver_simplify_tactic::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/smt/tactic/ctx_solver_simplify_tactic.cpp:72\n  #16 0x55d90ca97418 in cleanup_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:918\n  #17 0x55d90caa6227 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #18 0x55d90caa6227 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\n  #19 0x55d90ca07c1a in exec(tactic&, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactic.cpp:148\n  #20 0x55d90ca09f1d in check_sat(tactic&, ref<goal>&, ref<model>&, labels_vec&, obj_ref<app, ast_manager>&, obj_ref<dependency_manager<ast_manager::expr_dependency_config>::dependency, ast_manager>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) ../src/tactic/tactic.cpp:168\n  #21 0x55d90c7b9d00 in check_sat_using_tactict_cmd::execute(cmd_context&) ../src/cmd_context/tactic_cmds.cpp:223\n  #22 0x55d90c749408 in smt2::parser::parse_ext_cmd(int, int) ../src/parsers/smt2/smt2parser.cpp:2895\n  #23 0x55d90c75007c in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:3001\n  #24 0x55d90c75007c in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #25 0x55d90c707715 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\n  #26 0x55d909dc5c86 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #27 0x55d909d9e75e in main ../src/shell/main.cpp:352\n  #28 0x7fa719d1cb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #29 0x55d909db22f9 in _start (/home/suz/software/z3san/build-04152020103633-068f65c/z3+0x1f72f9)\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../src/smt/smt_enode.h:213 in smt::enode::get_num_args() const\n==17286==ABORTING\n[750] % \n[750] % cat small.smt2\n(set-option :rewriter.eq2ineq true)\n(set-option :rewriter.flat false)\n(set-option :smt.arith.solver 3)\n(set-option :smt.phase_selection 5)\n(declare-datatypes ((BOOL 0)) (((Truth) (Falsity))))\n(declare-sort node)\n(declare-sort value)\n(declare-sort Values$t)\n(declare-fun Values$empty () Values$t)\n(declare-fun Values$mem (value Values$t) BOOL)\n(declare-fun Values$remove (value Values$t) Values$t)\n(declare-fun Values$cardinality (Values$t) Int)\n(declare-fun Values$union (Values$t Values$t) Values$t)\n(declare-fun Values$disjoint (Values$t Values$t) BOOL)\n(assert (forall ((a Values$t) (b Values$t)) (= (Values$disjoint a b) (Values$disjoint b a))))\n(assert (forall ((e value)) (not (= (Values$mem e Values$empty) Truth))))\n(assert (forall ((x value) (y value) (s Values$t)) (= (Values$mem x (Values$remove y s)) (ite (and (not (= x y))) Truth Falsity))))\n(assert (forall ((x value) (a Values$t)) (=> (= (Values$mem x a) Truth)\n(forall ((b Values$t)) (= (Values$mem x (Values$union a b)) Truth)))))\n(assert (forall ((x value) (a Values$t) (b Values$t)) (=(= (Values$mem x (Values$union a b)) Truth) (or (= (Values$mem x b) Truth)))))\n(assert (forall ((s Values$t)) (or (distinct (Values$cardinality s) 0) (= s Values$empty))))\n(assert (forall ((s Values$t)) (>= (Values$cardinality s) 0)))\n(assert (forall ((x value) (s Values$t)) (Values$cardinality (Values$remove x s)) (ite (= (Values$mem x s) Truth) (- 0) 0)))\n(assert (forall ((a Values$t) (b Values$t)) (=(= (Values$disjoint a b) Truth) (distinct (Values$cardinality (Values$union a b)) (+ (Values$cardinality a) (Values$cardinality b))))))\n(define-fun null_message () Values$t Values$empty)\n(declare-fun mk_array_6 () (Array node Values$t))\n(assert (exists ((mk_array_6_index node)) (= (select mk_array_6 mk_array_6_index) null_message)))\n(define-fun null_state () Values$t Values$empty)\n(declare-fun mk_array_7 () (Array node Values$t))\n(assert (forall ((mk_array_7_index node)) (= (select mk_array_7 mk_array_7_index) null_state)))\n(declare-fun choose (Values$t) value)\n(assert (forall ((vals Values$t)) (or (= vals Values$empty) (= (Values$mem (choose vals) vals) Truth))))\n(check-sat-using (then solve-eqs nnf ctx-solver-simplify))\n[751] %\n\n```\n\nOS: Ubuntu 18.04\nCommit: dde0c51\n",
    "priority": 1
  },
  "394": {
    "body": "\n```\n[638] % z3 small.smt2\nsat\nsat\nASSERTION VIOLATION\nFile: ../src/util/vector.h\nLine: 73\ncapacity() > 0\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[639] % \n[639] % z3release small.smt2\nsat\nsat\nSegmentation fault\n[640] % \n[640] % z3san small.smt2\nsat\nsat\n=================================================================\n==19402==ERROR: AddressSanitizer: heap-use-after-free on address 0x616000000590 at pc 0x55b1d691eb52 bp 0x7ffc8043a400 sp 0x7ffc8043a3f0\nREAD of size 8 at 0x616000000590 thread T0\n  #0 0x55b1d691eb51 in old_vector<sexpr*, false, unsigned int>::push_back(sexpr* const&) ../src/util/old_vector.h:418\n  #1 0x55b1d691eb51 in sexpr_manager::del(sexpr*) ../src/util/sexpr.cpp:218\n  #2 0x55b1d4e3ce37 in sexpr_manager::dec_ref(sexpr*) ../src/util/sexpr.h:78\n  #3 0x55b1d4e3ce37 in ref_manager_wrapper<sexpr, sexpr_manager>::dec_ref(sexpr*) ../src/util/ref_vector.h:199\n  #4 0x55b1d4e3ce37 in ref_vector_core<sexpr, ref_manager_wrapper<sexpr, sexpr_manager> >::dec_ref(sexpr*) ../src/util/ref_vector.h:37\n  #5 0x55b1d4e3ce37 in ref_vector_core<sexpr, ref_manager_wrapper<sexpr, sexpr_manager> >::dec_range_ref(sexpr* const*, sexpr* const*) ../src/util/ref_vector.h:41\n  #6 0x55b1d4e3ce37 in ref_vector_core<sexpr, ref_manager_wrapper<sexpr, sexpr_manager> >::shrink(unsigned int) ../src/util/ref_vector.h:92\n  #7 0x55b1d4e3ce37 in void smt2::parser::shrink<ref_vector<sexpr, sexpr_manager> >(scoped_ptr<ref_vector<sexpr, sexpr_manager> >&, unsigned int) ../src/parsers/smt2/smt2parser.cpp:257\n  #8 0x55b1d4e3ce37 in smt2::parser::parse_ext_cmd(int, int) ../src/parsers/smt2/smt2parser.cpp:2900\n  #9 0x55b1d4e4407c in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:3001\n  #10 0x55b1d4e4407c in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #11 0x55b1d4dfb715 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\n  #12 0x55b1d24b9c86 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #13 0x55b1d249275e in main ../src/shell/main.cpp:352\n  #14 0x7fd7d17afb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #15 0x55b1d24a62f9 in _start (/home/suz/software/z3san/build-04152020103633-068f65c/z3+0x1f72f9)\n...\n==19402==ABORTING\n[641] % \n[641] % \n[641] % cat small.smt2\n(set-option :trace true)\n(check-sat-using default)\n(reset-assertions)\n(declare-fun a () Int)\n(check-sat-using default)\n[642] %\n```\n\nOS: Ubuntu 18.04\nCommit: dde0c51\n",
    "priority": 1
  },
  "395": {
    "body": "Hi,\r\nFor this formula, Z3 built with ASAN throws out a heap-use-after-free:\r\n```\r\n[609] % z3san small.smt2\r\n=================================================================\r\n==15079==ERROR: AddressSanitizer: heap-use-after-free on address 0x6270000d6b30 at pc 0x55d07ee282fe bp 0x7ffcac018070 sp 0x7ffcac018060\r\nREAD of size 8 at 0x6270000d6b30 thread T0\r\n  #0 0x55d07ee282fd in old_vector<unsigned int, false, unsigned int>::operator[](unsigned int) ../src/util/old_vector.h:371\r\n  #1 0x55d07ee282fd in nla::emonics::remove_cg_mon(nla::monic const&) ../src/math/lp/emonics.cpp:205\r\n  #2 0x55d07ee35e90 in nla::emonics::remove_cg(unsigned int) ../src/math/lp/emonics.cpp:187\r\n  #3 0x55d07ee35e90 in nla::emonics::rehash_cg(unsigned int) ../src/math/lp/emonics.h:110\r\n  #4 0x55d07ee35e90 in nla::emonics::after_merge_eh(nla::signed_var, nla::signed_var, nla::signed_var, nla::signed_var) ../src/math/lp/emonics.cpp:442\r\n  #5 0x55d07ecdb6ff in nla::var_eqs<nla::emonics>::after_merge_eh(unsigned int, unsigned int, unsigned int, unsigned int) ../src/math/lp/var_eqs.h:347\r\n  #6 0x55d07ecdb6ff in union_find<nla::var_eqs<nla::emonics> >::merge(unsigned int, unsigned int) ../src/util/union_find.h:134\r\n  #7 0x55d07ecdc0e6 in nla::var_eqs<nla::emonics>::merge(nla::signed_var, nla::signed_var, nla::eq_justification const&) ../src/math/lp/var_eqs.h:121\r\n  #8 0x55d07ecc213c in nla::var_eqs<nla::emonics>::merge_minus(unsigned int, unsigned int, nla::eq_justification const&) ../src/math/lp/var_eqs.h:129\r\n  #9 0x55d07ecc213c in nla::core::add_equivalence_maybe(lp::lar_term const*, unsigned int, unsigned int) ../src/math/lp/nla_core.cpp:880\r\n  #10 0x55d07ecc2d2e in nla::core::collect_equivs() ../src/math/lp/nla_core.cpp:840\r\n  #11 0x55d07ecc3717 in nla::core::check(old_vector<nla::lemma, true, unsigned int>&) ../src/math/lp/nla_core.cpp:1497\r\n  #12 0x55d07cf0bb32 in smt::theory_lra::imp::check_nra() ../src/smt/theory_lra.cpp:2237\r\n  #13 0x55d07cf0bb32 in smt::theory_lra::imp::final_check_eh() ../src/smt/theory_lra.cpp:1741\r\n  #14 0x55d07cf0bb32 in smt::theory_lra::final_check_eh() ../src/smt/theory_lra.cpp:3977\r\n  #15 0x55d07ca6f8f4 in smt::context::final_check() ../src/smt/smt_context.cpp:3851\r\n  #16 0x55d07ca7fd16 in smt::context::bounded_search() ../src/smt/smt_context.cpp:3767\r\n  #17 0x55d07ca80617 in smt::context::search() ../src/smt/smt_context.cpp:3594\r\n  #18 0x55d07ca8330d in smt::context::setup_and_check(bool) ../src/smt/smt_context.cpp:3417\r\n  #19 0x55d07c90491f in smt_tactic::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/smt/tactic/smt_tactic.cpp:201\r\n  #20 0x55d07e36a057 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\r\n  #21 0x55d07e35c9b1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\r\n  #22 0x55d07e35c9b1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\r\n  #23 0x55d07e35c9b1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\r\n  #24 0x55d07e35c9b1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\r\n  #25 0x55d07e35c9b1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\r\n  #26 0x55d07e35c9b1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\r\n  #27 0x55d07e35c9b1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\r\n  #28 0x55d07e35c9b1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\r\n  #29 0x55d07e35c9b1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\r\n  #30 0x55d07e35c9b1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\r\n  #31 0x55d07e35c9b1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\r\n  #32 0x55d07e35c9b1 in cond_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1034\r\n  #33 0x55d07e36a057 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\r\n  #34 0x55d07e2cba4a in exec(tactic&, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactic.cpp:148\r\n  #35 0x55d07e2cdd4d in check_sat(tactic&, ref<goal>&, ref<model>&, labels_vec&, obj_ref<app, ast_manager>&, obj_ref<dependency_manager<ast_manager::expr_dependency_config>::dependency, ast_manager>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) ../src/tactic/tactic.cpp:168\r\n  #36 0x55d07e1cc6a8 in check_sat_core2 ../src/solver/tactic2solver.cpp:185\r\n  #37 0x55d07e1d3a67 in solver_na2as::check_sat_core(unsigned int, expr* const*) ../src/solver/solver_na2as.cpp:67\r\n  #38 0x55d07e191474 in combined_solver::check_sat_core(unsigned int, expr* const*) ../src/solver/combined_solver.cpp:246\r\n  #39 0x55d07e172561 in solver::check_sat(unsigned int, expr* const*) ../src/solver/solver.cpp:330\r\n  #40 0x55d07e0cd3b0 in cmd_context::check_sat(unsigned int, expr* const*) ../src/cmd_context/cmd_context.cpp:1551\r\n  #41 0x55d07e014023 in smt2::parser::parse_check_sat() ../src/parsers/smt2/smt2parser.cpp:2596\r\n  #42 0x55d07e014023 in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:2938\r\n  #43 0x55d07e014023 in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\r\n  #44 0x55d07dfcb545 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\r\n  #45 0x55d07b68a946 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\r\n  #46 0x55d07b66341e in main ../src/shell/main.cpp:352\r\n  #47 0x7f757421eb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\r\n  #48 0x55d07b676fb9 in _start (/home/suz/software/z3san/build-04142020192323-164a73f/z3+0x1f6fb9)\r\n...\r\nSUMMARY: AddressSanitizer: heap-use-after-free ../src/util/old_vector.h:371 in old_vector<unsigned int, false, unsigned int>::operator[](unsigned int)\r\n...\r\n==15079==ABORTING\r\n[610] % \r\n[610] % \r\n[610] % cat small.smt2\r\n(set-option :rewriter.flat false)\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun aa () Real)\r\n(declare-fun e () Real)\r\n(declare-fun f () Real)\r\n(declare-fun ab () Real)\r\n(declare-fun ac () Real)\r\n(declare-fun ad () Real)\r\n(declare-fun g () Real)\r\n(declare-fun h () Real)\r\n(declare-fun i () Real)\r\n(declare-fun j () Real)\r\n(declare-fun k () Real)\r\n(declare-fun l () Real)\r\n(declare-fun m () Real)\r\n(declare-fun n () Real)\r\n(declare-fun o () Real)\r\n(declare-fun v () Real)\r\n(declare-fun ep () Real)\r\n(declare-fun p () Real)\r\n(declare-fun ae () Real)\r\n(declare-fun q () Real)\r\n(declare-fun r () Real)\r\n(assert (forall ((af Real)) (=> (and (or (or (or (and (and (or (and\r\n (and (and (and (and (= o 0.0 (- aa)) (= (+ aa q) 2.0) ) (= (- e) 2.0)\r\n ) (>= 0 ac)) (= (/ 14 f ae) 2.0)) (<= o 0)) (< 0.0 (/ 14 b q))) (>\r\n 0.0 a)) (< (* n) v(/ 5 d j))) (<= (* c (- 5 d)) v)) (<= 0.0 h)) (<\r\n 0.0 v)) (>= 0.0 ep)) (or (= 0 ad) (<= 0.0 g) (<= af g) (or (or (or\r\n (<= 0.0 (/ 8 ab p)) (< p v)) (< 0.0 (/ (* h af) j))) (> (+ (+ h af)\r\n j) v)) (<= (- af) ep)) (= m 2.0))))\r\n(assert (distinct c (* i ae)))\r\n(assert (= aa (/ 78 k q)))\r\n(assert (= e (* l q)))\r\n(assert (= ab (/ v r)))\r\n(check-sat)\r\n[611] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 164a73f",
    "priority": 1
  },
  "396": {
    "body": "Hi,\nFor this case, Z3 release  throws out a segmentation fault:\n```\n[569] % z3 small.smt2 \nASSERTION VIOLATION\nFile: ../src/smt/smt_context.cpp\nLine: 1847\nUNREACHABLE CODE WAS REACHED.\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[570] % \n[570] % z3release small.smt2 \nSegmentation fault\n[571] % \n[571] % z3san small.smt2 \n=================================================================\n==16242==ERROR: AddressSanitizer: unknown-crash on address 0x61800000f2a8 at pc 0x563e9e555dba bp 0x7ffe270afa30 sp 0x7ffe270afa20\nREAD of size 4 at 0x61800000f2a8 thread T0\n  #0 0x563e9e555db9 in smt::context::decide() ../src/smt/smt_context.cpp:1794\n  #1 0x563e9e57bc92 in smt::context::bounded_search() ../src/smt/smt_context.cpp:3764\n  #2 0x563e9e57c617 in smt::context::search() ../src/smt/smt_context.cpp:3594\n  #3 0x563e9e57e669 in smt::context::check(unsigned int, expr* const*, bool) ../src/smt/smt_context.cpp:3477\n  #4 0x563e9e183d7f in qe::quant_elim_plugin::check(unsigned int, app* const*, expr*, obj_ref<expr, ast_manager>&, bool, ref_vector<app, ast_manager>&, qe::guarded_defs*) ../src/qe/qe.cpp:1449\n  #5 0x563e9e185c3f in qe::quant_elim_new::eliminate_block(unsigned int, app* const*, obj_ref<expr, ast_manager>&, ref_vector<app, ast_manager>&, bool, qe::guarded_defs*) ../src/qe/qe.cpp:2157\n  #6 0x563e9e186db9 in qe::quant_elim_new::eliminate_exists(unsigned int, app* const*, obj_ref<expr, ast_manager>&, ref_vector<app, ast_manager>&, bool, qe::guarded_defs*) ../src/qe/qe.cpp:2108\n  #7 0x563e9e158e57 in qe::quant_elim_new::eliminate_exists_bind(unsigned int, app* const*, obj_ref<expr, ast_manager>&) ../src/qe/qe.cpp:2201\n  #8 0x563e9e14ee80 in qe::quant_elim_new::eliminate_forall_bind(unsigned int, app* const*, obj_ref<expr, ast_manager>&) ../src/qe/qe.cpp:2209\n  #9 0x563e9e14ee80 in qe::quant_elim_new::eliminate(bool, unsigned int, app* const*, obj_ref<expr, ast_manager>&) ../src/qe/qe.cpp:2069\n  #10 0x563e9e14ee80 in qe::expr_quant_elim::elim(obj_ref<expr, ast_manager>&) ../src/qe/qe.cpp:2349\n  #11 0x563e9e14f8b7 in qe::expr_quant_elim::operator()(expr*, expr*, obj_ref<expr, ast_manager>&) ../src/qe/qe.cpp:2240\n  #12 0x563e9e2125fe in qe_tactic::imp::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/qe/qe_tactic.cpp:65\n  #13 0x563e9e2125fe in qe_tactic::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/qe/qe_tactic.cpp:116\n  #14 0x563e9fe57248 in cleanup_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:918\n  #15 0x563e9fdc7a4a in exec(tactic&, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactic.cpp:148\n  #16 0x563e9fdc9d4d in check_sat(tactic&, ref<goal>&, ref<model>&, labels_vec&, obj_ref<app, ast_manager>&, obj_ref<dependency_manager<ast_manager::expr_dependency_config>::dependency, ast_manager>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) ../src/tactic/tactic.cpp:168\n  #17 0x563e9fb79b30 in check_sat_using_tactict_cmd::execute(cmd_context&) ../src/cmd_context/tactic_cmds.cpp:223\n  #18 0x563e9fb09238 in smt2::parser::parse_ext_cmd(int, int) ../src/parsers/smt2/smt2parser.cpp:2895\n  #19 0x563e9fb0feac in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:3001\n  #20 0x563e9fb0feac in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #21 0x563e9fac7545 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\n  #22 0x563e9d186946 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #23 0x563e9d15f41e in main ../src/shell/main.cpp:352\n  #24 0x7f237a30bb96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #25 0x563e9d172fb9 in _start (/home/suz/software/z3san/build-04142020192323-164a73f/z3+0x1f6fb9)\n...\n==16242==ABORTING\n[572] % \n[572] % cat small.smt2 \n(set-option :smt.phase_selection 52)\n(declare-datatypes ((a 0)) ((b c)))\n(declare-sort d)\n(declare-fun g (d) a)\n(assert (forall ((e d) (f a)) (= f (g e))))\n(check-sat-using qe)\n[573] %\n```\n\nOS: Ubuntu 18.04\nCommit: 164a73f\n",
    "priority": 1
  },
  "397": {
    "body": "Hi,\nFor this case, Z3 release throws out a segmentation fault:\n```\n[556] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/ast/rewriter/rewriter_def.h\nLine: 209\nUNREACHABLE CODE WAS REACHED.\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[557] % \n[557] % z3release small.smt2\nSegmentation fault\n[558] % \n[558] % z3san small.smt2\nASAN:DEADLYSIGNAL\n=================================================================\n==9105==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000001 (pc 0x55897bfe6bc7 bp 0x7ffe2dfefab0 sp 0x7ffe2dfefab0 T0)\n==9105==The signal is caused by a READ memory access.\n==9105==Hint: address points to the zero page.\n  #0 0x55897bfe6bc6 in ast_table::push_erase(ast*) ../src/ast/ast.cpp:625\n  #1 0x55897bffb40a in ast_manager::delete_node(ast*) ../src/ast/ast.cpp:1930\n  #2 0x5589782ad4c8 in ast_manager::dec_ref(ast*) ../src/ast/ast.h:1693\n  #3 0x5589782ad4c8 in ref_manager_wrapper<expr, ast_manager>::dec_ref(expr*) ../src/util/ref_vector.h:199\n  #4 0x5589782ad4c8 in ref_vector_core<expr, ref_manager_wrapper<expr, ast_manager> >::dec_ref(expr*) ../src/util/ref_vector.h:37\n  #5 0x5589782ad4c8 in ref_vector_core<expr, ref_manager_wrapper<expr, ast_manager> >::dec_range_ref(expr* const*, expr* const*) ../src/util/ref_vector.h:41\n  #6 0x5589782ad4c8 in ref_vector_core<expr, ref_manager_wrapper<expr, ast_manager> >::~ref_vector_core() ../src/util/ref_vector.h:54\n  #7 0x5589792734ab in ref_vector<expr, ast_manager>::~ref_vector() ../src/util/ref_vector.h:210\n  #8 0x5589792734ab in qe::quant_elim_plugin::~quant_elim_plugin() ../src/qe/qe.cpp:1384\n  #9 0x55897925a9f0 in void dealloc<qe::quant_elim_plugin>(qe::quant_elim_plugin*) ../src/util/memory_manager.h:96\n  #10 0x558979290532 in void dealloc<qe::quant_elim_plugin>(qe::quant_elim_plugin*) ../src/util/memory_manager.h:95\n  #11 0x558979290532 in scoped_ptr<qe::quant_elim_plugin>::~scoped_ptr() ../src/util/util.h:236\n  #12 0x558979290532 in qe::quant_elim_new::eliminate_block(unsigned int, app* const*, obj_ref<expr, ast_manager>&, ref_vector<app, ast_manager>&, bool, qe::guarded_defs*) ../src/qe/qe.cpp:2154\n  #13 0x558979290db9 in qe::quant_elim_new::eliminate_exists(unsigned int, app* const*, obj_ref<expr, ast_manager>&, ref_vector<app, ast_manager>&, bool, qe::guarded_defs*) ../src/qe/qe.cpp:2108\n  #14 0x558979262e57 in qe::quant_elim_new::eliminate_exists_bind(unsigned int, app* const*, obj_ref<expr, ast_manager>&) ../src/qe/qe.cpp:2201\n  #15 0x558979258717 in qe::quant_elim_new::eliminate(bool, unsigned int, app* const*, obj_ref<expr, ast_manager>&) ../src/qe/qe.cpp:2072\n  #16 0x558979258717 in qe::expr_quant_elim::elim(obj_ref<expr, ast_manager>&) ../src/qe/qe.cpp:2349\n  #17 0x55897925854c in qe::expr_quant_elim::elim(obj_ref<expr, ast_manager>&) ../src/qe/qe.cpp:2346\n  #18 0x5589792598b7 in qe::expr_quant_elim::operator()(expr*, expr*, obj_ref<expr, ast_manager>&) ../src/qe/qe.cpp:2240\n  #19 0x55897931c5fe in qe_tactic::imp::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/qe/qe_tactic.cpp:65\n  #20 0x55897931c5fe in qe_tactic::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/qe/qe_tactic.cpp:116\n  #21 0x55897af61248 in cleanup_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:918\n  #22 0x55897aed1a4a in exec(tactic&, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactic.cpp:148\n  #23 0x55897aed3d4d in check_sat(tactic&, ref<goal>&, ref<model>&, labels_vec&, obj_ref<app, ast_manager>&, obj_ref<dependency_manager<ast_manager::expr_dependency_config>::dependency, ast_manager>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) ../src/tactic/tactic.cpp:168\n  #24 0x55897ac83b30 in check_sat_using_tactict_cmd::execute(cmd_context&) ../src/cmd_context/tactic_cmds.cpp:223\n  #25 0x55897ac13238 in smt2::parser::parse_ext_cmd(int, int) ../src/parsers/smt2/smt2parser.cpp:2895\n  #26 0x55897ac19eac in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:3001\n  #27 0x55897ac19eac in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #28 0x55897abd1545 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\n  #29 0x558978290946 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #30 0x55897826941e in main ../src/shell/main.cpp:352\n  #31 0x7fca518b3b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #32 0x55897827cfb9 in _start (/home/suz/software/z3san/build-04142020192323-164a73f/z3+0x1f6fb9)\nAddressSanitizer can not provide additional info.\nSUMMARY: AddressSanitizer: SEGV ../src/ast/ast.cpp:625 in ast_table::push_erase(ast*)\n==9105==ABORTING\n[559] % \n[559] % cat small.smt2\n(set-option :smt.phase_selection 5)\n(declare-datatypes ((a 0)) ((b (c (d a)))))\n(declare-sort e)\n(declare-fun f (e) a)\n(declare-fun i (a a) Bool)\n(assert (forall ((g e) (h a)) (i h (f g))))\n(assert (forall ((g e)) (exists ((h a)) (= (c h) (f g)))))\n(check-sat-using qe)\n[560] %\n```\n\nOS: Ubuntu 18.04\nCommit: 164a73f\n",
    "priority": 1
  },
  "398": {
    "body": "Hi,\nFor this case, Z3  throws out a segmentation fault:\n```\n[669] % z3 small.smt2\nFailed to verify: BR_FAILED != try_ite_value(to_app(e), val, result)\nASSERTION VIOLATION\nFile: ../src/ast/rewriter/bool_rewriter.cpp\nLine: 655\nUNREACHABLE CODE WAS REACHED.\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[670] % \n[670] % z3release small.smt2\nFailed to verify: BR_FAILED != try_ite_value(to_app(e), val, result)\nFailed to verify: BR_FAILED != try_ite_value(to_app(t), val, result)\nSegmentation fault\n[671] % \n[671] % cat small.smt2\n(set-logic AUFNIRA)\n(set-option :smt.ematching false)\n(set-option :rewriter.ite_extra_rules true)\n(declare-datatypes ((Nat 0)) (((succ (pred Nat)) (zero))))\n(declare-datatypes ((Lst 0)) (((Nil))))\n(declare-fun minus (Nat Nat) Nat)\n(declare-fun nat-to-int (Nat) Int)\n(declare-fun drop (Nat Lst) Lst)\n(declare-fun take (Nat Lst) Lst)\n(assert (forall ((x Nat) (y Nat)) (=> (= 0 (nat-to-int y)) (= x y))))\n(assert (forall ((x Nat) (y Nat)) (= (nat-to-int (minus x y)) (ite (< 0 0) 0 (- 0 (nat-to-int y))))))\n(assert (not (forall ((n Nat) (m Nat) (xs Lst)) (= (drop n (take m xs)) (take (minus m n) (drop n xs))))))\n(check-sat)\n[672] %\n```\n\nOS: Ubuntu 18.04\nCommit: 0f69783\n",
    "priority": 1
  },
  "399": {
    "body": "\n```\n[670] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/smt/smt_internalizer.cpp\nLine: 1045\nb_internalized(n)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[671] % \n[671] % z3release small.smt2\nunsat\n[672] % z3san small.smt2\n=================================================================\n==21960==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60300001fd32 at pc 0x564e6388e966 bp 0x7fff18702260 sp 0x7fff18702250\nREAD of size 1 at 0x60300001fd32 thread T0\n  #0 0x564e6388e965 in smt::context::get_lit_assignment(unsigned int) const ../src/smt/smt_context.h:362\n  #1 0x564e6388e965 in smt::context::get_assignment(smt::literal) const ../src/smt/smt_context.h:366\n  #2 0x564e6388e965 in smt::context::assign(smt::literal, smt::b_justification const&, bool) ../src/smt/smt_context.h:946\n  #3 0x564e638b0ffc in smt::context::init_assumptions(ref_vector<expr, ast_manager> const&) ../src/smt/smt_context.cpp:3217\n  #4 0x564e638bcc81 in smt::context::check(unsigned int, expr* const*, bool) ../src/smt/smt_context.cpp:3482\n  #5 0x564e6500d2b7 in solver_na2as::check_sat_core(unsigned int, expr* const*) ../src/solver/solver_na2as.cpp:67\n  #6 0x564e64fca8d3 in combined_solver::check_sat_core(unsigned int, expr* const*) ../src/solver/combined_solver.cpp:213\n  #7 0x564e64fabdb1 in solver::check_sat(unsigned int, expr* const*) ../src/solver/solver.cpp:330\n  #8 0x564e64f06e10 in cmd_context::check_sat(unsigned int, expr* const*) ../src/cmd_context/cmd_context.cpp:1551\n  #9 0x564e64e4a5f3 in smt2::parser::parse_check_sat_assuming() ../src/parsers/smt2/smt2parser.cpp:2609\n  #10 0x564e64e4df27 in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:2982\n  #11 0x564e64e4df27 in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\n  #12 0x564e64e04fa5 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\n  #13 0x564e624c5426 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\n  #14 0x564e6249df2e in main ../src/shell/main.cpp:352\n  #15 0x7f4bfd711b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\n  #16 0x564e624b1a99 in _start (z3san/build-04132020190805-0f69783/z3+0x1f6a99)\n...\n==21960==ABORTING\n[673] % \n[673] % cat small.smt2\n(check-sat-assuming (or true))\n[674] %\n```\n\nOS: Ubuntu 18.04\nCommit: 0f69783\n",
    "priority": 1
  },
  "400": {
    "body": "\n```\n[647] % z3 small.smt2\n(error \"line 1 column 27: invalid datatype declaration, '(' expected got a\")\n(error \"line 2 column 33: invalid expression, unexpected ')'\")\n(error \"line 3 column 27: invalid expression, unexpected ')'\")\nunknown\nASSERTION VIOLATION\nFile: ../src/ast/datatype_decl_plugin.cpp\nLine: 1143\ncd.first\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[648] % \n[648] % z3release small.smt2\n(error \"line 1 column 27: invalid datatype declaration, '(' expected got a\")\n(error \"line 2 column 33: invalid expression, unexpected ')'\")\n(error \"line 3 column 27: invalid expression, unexpected ')'\")\nunknown\nSegmentation fault\n[649] % \n[649] % cat small.smt2\n(declare-datatypes ((a 0)))\n(define-fun-rec f ((b a) (c a)) a)\n(define-fun-rec d ((e a)) a)\n(push)\n(assert (not (forall ((g a) (h a)) (= (d (f g h)) h))))\n(check-sat)\n(check-sat)\n[650] %\n```\n\nOS: Ubuntu 18.04\nCommit: 0f69783\n",
    "priority": 1
  },
  "401": {
    "body": "\nz3 debug & release segfault (asan points to a stack overflow\n```\n[546] % z3 small.smt2\nSegmentation fault\n[547] % z3release small.smt2\nSegmentation fault\n[548] % z3san small.smt2\nASAN:DEADLYSIGNAL\n=================================================================\n==3865==ERROR: AddressSanitizer: stack-overflow on address 0x7fff63db7f78 (pc 0x7fafca104b67 bp 0x7fff63db87e0 sp 0x7fff63db7f50 T0)\n  #0 0x7fafca104b66 in __interceptor_memmove (/usr/lib/x86_64-linux-gnu/libasan.so.4+0x7ab66)\n  #1 0x55b75635ccfa in expr** std::__copy_move_backward<true, true, std::random_access_iterator_tag>::__copy_move_b<expr*>(expr* const*, expr* const*, expr**) /usr/include/c++/7/bits/stl_algobase.h:570\n  #2 0x55b75635ccfa in expr** std::__copy_move_backward_a<true, expr**, expr**>(expr**, expr**, expr**) /usr/include/c++/7/bits/stl_algobase.h:590\n  #3 0x55b75635ccfa in expr** std::__copy_move_backward_a2<true, expr**, expr**>(expr**, expr**, expr**) /usr/include/c++/7/bits/stl_algobase.h:599\n  #4 0x55b75635ccfa in expr** std::move_backward<expr**, expr**>(expr**, expr**, expr**) /usr/include/c++/7/bits/stl_algobase.h:670\n  #5 0x55b75635ccfa in void std::__insertion_sort<expr**, __gnu_cxx::__ops::_Iter_comp_iter<poly_rewriter<arith_rewriter_core>::mon_lt> >(expr**, expr**, __gnu_cxx::__ops::_Iter_comp_iter<poly_rewriter<arith_rewriter_core>::mon_lt>) /usr/include/c++/7/bits/stl_algo.h:1851\n  #6 0x55b75635ccfa in void std::__final_insertion_sort<expr**, __gnu_cxx::__ops::_Iter_comp_iter<poly_rewriter<arith_rewriter_core>::mon_lt> >(expr**, expr**, __gnu_cxx::__ops::_Iter_comp_iter<poly_rewriter<arith_rewriter_core>::mon_lt>) /usr/include/c++/7/bits/stl_algo.h:1890\n  #7 0x55b75635ccfa in void std::__sort<expr**, __gnu_cxx::__ops::_Iter_comp_iter<poly_rewriter<arith_rewriter_core>::mon_lt> >(expr**, expr**, __gnu_cxx::__ops::_Iter_comp_iter<poly_rewriter<arith_rewriter_core>::mon_lt>) /usr/include/c++/7/bits/stl_algo.h:1971\n  #8 0x55b756363799 in void std::sort<expr**, poly_rewriter<arith_rewriter_core>::mon_lt>(expr**, expr**, poly_rewriter<arith_rewriter_core>::mon_lt) /usr/include/c++/7/bits/stl_algo.h:4868\n  #9 0x55b756363799 in poly_rewriter<arith_rewriter_core>::mk_nflat_add_core(unsigned int, expr* const*, obj_ref<expr, ast_manager>&) ../src/ast/rewriter/poly_rewriter_def.h:615\n  #10 0x55b7563668f4 in poly_rewriter<arith_rewriter_core>::mk_flat_add_core(unsigned int, expr* const*, obj_ref<expr, ast_manager>&) ../src/ast/rewriter/poly_rewriter_def.h:426\n  #11 0x55b756344bd4 in poly_rewriter<arith_rewriter_core>::mk_add_core(unsigned int, expr* const*, obj_ref<expr, ast_manager>&) ../src/ast/rewriter/poly_rewriter.h:147\n  #12 0x55b756344bd4 in arith_rewriter::mk_add_core(unsigned int, expr* const*, obj_ref<expr, ast_manager>&) ../src/ast/rewriter/arith_rewriter.cpp:657\n  #13 0x55b756078e1b in reduce_app_core ../src/ast/rewriter/th_rewriter.cpp:207\n  #14 0x55b756078e1b in reduce_app ../src/ast/rewriter/th_rewriter.cpp:616\n  #15 0x55b7560837fa in process_app<false> ../src/ast/rewriter/rewriter_def.h:299\n  #16 0x55b7560837fa in resume_core<false> ../src/ast/rewriter/rewriter_def.h:770\n  #17 0x55b7560925da in main_loop<false> ../src/ast/rewriter/rewriter_def.h:729\n  #18 0x55b7560925da in operator() ../src/ast/rewriter/rewriter_def.h:801\n  #19 0x55b7560925da in th_rewriter::operator()(expr*, obj_ref<expr, ast_manager>&, obj_ref<app, ast_manager>&) ../src/ast/rewriter/th_rewriter.cpp:855\n  #20 0x55b7559f2f20 in simplify_tactic::imp::operator()(goal&) ../src/tactic/core/simplify_tactic.cpp:57\n  #21 0x55b7559f2f20 in simplify_tactic::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/core/simplify_tactic.cpp:94\n  #22 0x55b755e36168 in cleanup_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:915\n  #23 0x55b755e41c50 in repeat_tactical::operator()(unsigned int, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:811\n  #24 0x55b755e42ec1 in repeat_tactical::operator()(unsigned int, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:825\n  #25 0x55b755e42ec1 in repeat_tactical::operator()(unsigned int, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:825\n  #26 0x55b755e42ec1 in repeat_tactical::operator()(unsigned int, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:825\n...\nSUMMARY: AddressSanitizer: stack-overflow (/usr/lib/x86_64-linux-gnu/libasan.so.4+0x7ab66) in __interceptor_memmove\n==3865==ABORTING\n[549] % \n[549] % cat small.smt2\n(set-option :rewriter.arith_lhs true)\n(set-option :rewriter.sort_sums true)\n(assert (forall ((a Int) (b Int)) (= b (ite (= a 1) 10 0))))\n(apply (repeat simplify))\n[550] %\n```\n\nOS: Ubuntu 18.04\nCommit: 0f69783\n",
    "priority": 1
  },
  "402": {
    "body": "\n```\n[648] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/smt/smt_enode.h\nLine: 284\n!m_mark2\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[649] % \n[649] % cat small.smt2\n(set-logic BV)\n(set-option :proof true)\n(set-option :trace true)\n(set-option :smt.clause_proof true)\n(set-option :smt.phase_selection 5)\n(set-option :smt.random_seed 1)\n(set-option :rewriter.ite_extra_rules true)\n(declare-datatypes ((Nat!2078 0)) (((succ2079 (!2080 Nat!2078)) zero2081)))\n(declare-fun nmin!249 (Nat!2078 Nat!2078) Nat!2078)\n(declare-fun less!231 (Nat!2078 Nat!2078) Bool)\n(assert (forall ((n!247 Nat!2078) (m!248 Nat!2078)) (distinct (nmin!249 n!247 m!248) (ite (less!231 n!247 m!248) n!247 m!248))))\n(assert (not (forall ((a!393 Nat!2078) (b!394 Nat!2078) (c!395 Nat!2078)) (= (nmin!249 (nmin!249 a!393 (nmin!249 b!394 c!395)) c!395) (nmin!249 a!393 b!394)))))\n(check-sat)\n[650] %\n```\n\nOS: Ubuntu 18.04\nCommit: 0f69783\n",
    "priority": 1
  },
  "403": {
    "body": "Hi,\r\nFor this case, Z3  throws out a segmentation fault:\r\n```\r\n[708] % z3 small.smt2\r\n(smt.diff_logic: non-diff logic expression (+ 1 (str.len s)))\r\nunsat\r\nsat\r\n[709] % \r\n[709] % cat small.smt2\r\n(set-option :smt.arith.solver 1)\r\n(declare-fun s () String)\r\n(assert (str.in.re (str.++ \"a\" s) (re.* (str.to.re \"b\"))))\r\n(check-sat)\r\n(check-sat-using unit-subsume-simplify)\r\n[710] %\r\n\r\n1 reply\r\nToday at 3:07 PMView thread\r\n\r\nZhendong  3:03 PM\r\nnot the most sure about this one, but the behavior doesn't seem expected\r\n3:04\r\ncould be related to https://github.com/Z3Prover/z3/issues/3935 (edited) \r\n\r\nZhendong  4:48 PM\r\n[608] % z3 small.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_enode.h\r\nLine: 284\r\n!m_mark2\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[609] % \r\n[609] % z3release small.smt2\r\nSegmentation fault\r\n[610] % \r\n[610] % z3san small.smt2\r\nASAN:DEADLYSIGNAL\r\n=================================================================\r\n==11519==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000008 (pc 0x55dce4831de2 bp 0x7ffd05a0ec60 sp 0x7ffd05a0eaa0 T0)\r\n==11519==The signal is caused by a READ memory access.\r\n==11519==Hint: address points to the zero page.\r\n  #0 0x55dce4831de1 in smt::theory_datatype::occurs_check_explain(smt::enode*, smt::enode*) ../src/smt/theory_datatype.cpp:548\r\n  #1 0x55dce483388f in smt::theory_datatype::occurs_check_enter(smt::enode*) ../src/smt/theory_datatype.cpp:602\r\n  #2 0x55dce48348c7 in smt::theory_datatype::occurs_check(smt::enode*) ../src/smt/theory_datatype.cpp:653\r\n  #3 0x55dce48360f7 in smt::theory_datatype::final_check_eh() ../src/smt/theory_datatype.cpp:478\r\n  #4 0x55dce3c86984 in smt::context::final_check() ../src/smt/smt_context.cpp:3858\r\n  #5 0x55dce3c96df6 in smt::context::bounded_search() ../src/smt/smt_context.cpp:3774\r\n  #6 0x55dce3c976f7 in smt::context::search() ../src/smt/smt_context.cpp:3601\r\n  #7 0x55dce3c9a3fd in smt::context::setup_and_check(bool) ../src/smt/smt_context.cpp:3424\r\n  #8 0x55dce3b1b7cf in smt_tactic::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/smt/tactic/smt_tactic.cpp:201\r\n  #9 0x55dce55717ab in annotate_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1002\r\n  #10 0x55dce556cc67 in try_for_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:939\r\n  #11 0x55dce5573257 in or_else_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:296\r\n  #12 0x55dce55793a1 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:111\r\n  #13 0x55dce557a457 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\r\n  #14 0x55dce55717ab in annotate_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:1002\r\n  #15 0x55dce5573257 in or_else_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:296\r\n  #16 0x55dce557a457 in and_then_tactical::operator()(ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactical.cpp:120\r\n  #17 0x55dce54dbc7a in exec(tactic&, ref<goal> const&, sref_buffer<goal, 16u>&) ../src/tactic/tactic.cpp:148\r\n  #18 0x55dce54ddf7d in check_sat(tactic&, ref<goal>&, ref<model>&, labels_vec&, obj_ref<app, ast_manager>&, obj_ref<dependency_manager<ast_manager::expr_dependency_config>::dependency, ast_manager>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) ../src/tactic/tactic.cpp:168\r\n  #19 0x55dce528df70 in check_sat_using_tactict_cmd::execute(cmd_context&) ../src/cmd_context/tactic_cmds.cpp:223\r\n  #20 0x55dce521d228 in smt2::parser::parse_ext_cmd(int, int) ../src/parsers/smt2/smt2parser.cpp:2895\r\n  #21 0x55dce5223e9c in smt2::parser::parse_cmd() ../src/parsers/smt2/smt2parser.cpp:3001\r\n  #22 0x55dce5223e9c in smt2::parser::operator()() ../src/parsers/smt2/smt2parser.cpp:3130\r\n  #23 0x55dce51db535 in parse_smt2_commands(cmd_context&, std::istream&, bool, params_ref const&, char const*) ../src/parsers/smt2/smt2parser.cpp:3179\r\n  #24 0x55dce28a1f76 in read_smtlib2_commands(char const*) ../src/shell/smtlib_frontend.cpp:89\r\n  #25 0x55dce287aa7e in main ../src/shell/main.cpp:352\r\n  #26 0x7eff63722b96 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\r\n  #27 0x55dce288e5e9 in _start (/home/suz/software/z3san/build-04122020180154-01c12c9/z3+0x1f65e9)\r\nAddressSanitizer can not provide additional info.\r\nSUMMARY: AddressSanitizer: SEGV ../src/smt/theory_datatype.cpp:548 in smt::theory_datatype::occurs_check_explain(smt::enode*, smt::enode*)\r\n==11519==ABORTING\r\n[611] % \r\n[611] % cat small.smt2\r\n(set-option :smt.phase_selection 5)\r\n(set-option :trace true)\r\n(declare-datatypes ((a 0) (ba8 0)) (((ca4 (da5 ba8) (f a)) (ja7)) (k)))\r\n(declare-fun e () a)\r\n(declare-fun f (a a) a)\r\n(declare-fun l (Int) a)\r\n(declare-fun g (Int) a)\r\n(assert\r\n (forall ((h Int))\r\n (and (distinct (f (l h) (g h))\r\n    (ite ((_ is ja7) (l h)) (g h)\r\n     (ite ((_ is k) (l h)) (ca4 (da5 (l h)) (f (l h) (g h))) e)))\r\n  ((_ is ja7) (l h))\r\n  (ite ((_ is ca4) (l h))\r\n  (exists ((i Int)) (= (l i) (l h))) true))))\r\n(check-sat-using qflia)\r\n[612] %\r\n```\r\nAddressSanitizer may show the root cause.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 01c12c9\r\n",
    "priority": 1
  },
  "404": {
    "body": "\n```\n[767] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/sat/sat_model_converter.cpp\nLine: 149\nsat || undef\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[768] % \n[768] % cat small.smt2\n(set-option :sat.xor.solver true)\n(declare-fun a () (_ BitVec 8))\n(declare-fun b () (_ BitVec 8))\n(declare-fun c () (_ BitVec 8))\n(declare-fun d () (_ BitVec 8))\n(declare-fun e () (_ BitVec 8))\n(declare-fun f () (_ BitVec 8))\n(declare-fun j () (_ BitVec 8))\n(declare-fun g () (_ BitVec 8))\n(declare-fun h () (_ BitVec 8))\n(assert (bvuge (bvlshr ((_ zero_extend 24) h) ((_ zero_extend 24) (_ bv2 8))) (_ bv8 32)))\n(assert (distinct ((_ zero_extend 24) g) (_ bv0 32)))\n(assert (let ((?d ((_ zero_extend 24) b))\n       (?j ((_ zero_extend 24) c))\n       (?i ((_ zero_extend 24) j))\n       (?l ((_ zero_extend 24) g))\n       (?aa ((_ zero_extend 24) h)))\n     (bvult\n     (bvadd (_ bv616 32) (bvmul (_ bv4294967295 32) (bvadd ?aa ?l ?i ?j ?d (_ bv9 32))))\n     (_ bv256 32))))\n(assert (let ((?am ((_ zero_extend 24) a))\n       (?j ((_ zero_extend 24) c))\n       (?an ((_ zero_extend 24) d))\n       (?ao ((_ zero_extend 24) e))\n       (?ap ((_ zero_extend 24) f)))\n     (distinct (bvadd ?ap ?ao ?an ?j ?am) (_ bv0 32))))\n(check-sat)\n[769] %\n```\n\nOS: Ubuntu 18.04\nCommit: db9d6d1\n",
    "priority": 0
  },
  "405": {
    "body": "\n```\n[925] % z3 smt.arith.solver=3 small.smt2\nsat\n(model \n (define-fun a () Real\n  3.0)\n (define-fun b ((x!0 Real)) Bool\n  true)\n)\n[926] % cat small.smt2\n(declare-fun a () Real)\n(declare-fun b (Real) Bool)\n(assert (= (<= a 2.0) (= (b (- a 1.0)) (b 2.0))))\n(check-sat)\n(get-model)\n[927] %\n```\nOS: Ubuntu 18.04\nCommit: db9d6d1\n",
    "priority": 1
  },
  "406": {
    "body": "\n```\n[803] % for f in $(seq 1 10) ; do\n> z3release model_validate=true smt.threads=3 smt.arith.solver=2 small.smt2\n> done\nFailed to verify: aut\n*** stack smashing detected ***: <unknown> terminated\nAborted\nsat\nFailed to verify: aut\n*** stack smashing detected ***: <unknown> terminated\nAborted\nsat\nsat\nFailed to verify: aut\n*** stack smashing detected ***: <unknown> terminated\nAborted\nsat\nsat\nsat\nsat\n[804] % cat small.smt2\n(declare-fun a () String)\n(assert (str.in.re a (re.++ (re.* (str.to.re \"a\")) (re.* (str.to.re \"b\")) (re.range \"a\" \"u\"))))\n(assert (str.in.re a (re.++ (re.* (str.to.re \"a\")) (str.to.re \"b\"))))\n(check-sat)\n[805] %\n```\n\nOS: Ubuntu 18.04\nCommit: db9d6d1\n",
    "priority": 1
  },
  "407": {
    "body": "\n\n```\n% z3-0ee7918 bug.smt2\nVerification of 69 74 -70 failed\nASSERTION VIOLATION\nFile: ../src/sat/sat_drat.cpp\nLine: 471\nfalse\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n% cat bug.smt2\n(set-option :sat.xor.solver true) \n(set-option :sat.drat.check_unsat true) \n(declare-fun a () Int) \n(declare-fun b () Int)  \n(assert (and (not (and (= (+ (* (* b a))) 0))) (>= a 0))) \n(check-sat)\n```\n\nOS: Ubuntu 18.04\nCommit: db9d6d1\n",
    "priority": 1
  },
  "408": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :proof true)\n(assert (forall ((a (_ FloatingPoint 11 53))) (fp.isNaN a)))\n(check-sat-using qffp)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/tactic/goal.cpp\nLine: 291\nf == m().get_fact(pr)\n```\n\nOS: Ubuntu 18.04\nCommit: 337c07a\n",
    "priority": 1
  },
  "409": {
    "body": "Hi,\r\nFor this case, Z3 both debug and release builds give an invalid model:\r\n```\r\n[593] % z3 model_validate=true small.smt2\r\nsat\r\n(error \"line 10 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun c () Int\r\n  0)\r\n (define-fun foo () Int\r\n  1)\r\n (define-fun b () Int\r\n  1)\r\n (define-fun a () Int\r\n  1)\r\n)\r\n[594] % z3release model_validate=true small.smt2\r\nsat\r\n(error \"line 10 column 10: an invalid model was generated\")\r\n(model \r\n (define-fun c () Int\r\n  0)\r\n (define-fun foo () Int\r\n  1)\r\n (define-fun b () Int\r\n  1)\r\n (define-fun a () Int\r\n  1)\r\n)\r\n[595] % \r\n[595] % cat small.smt2\r\n(declare-fun a () Int)\r\n(declare-fun b () Int)\r\n(declare-fun c () Int)\r\n(declare-fun foo () Int)\r\n(assert (= a 1 b))\r\n(assert (> foo 0))\r\n(assert (= (> (+ a b foo) 1) (= c 1)))\r\n(assert (<= 0 c))\r\n(minimize 0)\r\n(check-sat)\r\n(get-model)\r\n[596] %\r\n```\r\nIt looks similar to the closed https://github.com/Z3Prover/z3/issues/3846.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: ae5a713\r\n",
    "priority": 1
  },
  "410": {
    "body": "\n```\n[1005] % z3-4.8.7 small.smt2\nunsat\n[1006] % z3release small.smt2\nWARNING: found non utvpi logic expression:\n(>= (+ c d (* (- 1) (div b a))) 0)\nSegmentation fault\n[1007] % \n[1007] % cat small.smt2\n(set-option :smt.arith.solver 4)\n(set-option :smt.phase_selection 5)\n(set-option :rewriter.eq2ineq true)\n(declare-fun a () Int)\n(declare-fun b () Int)\n(declare-fun c () Int)\n(declare-fun d () Int)\n(assert (= 0 c 1))\n(assert (or (= d 0) (= d 1)))\n(assert (= (div b a) (+ d c) 1))\n(check-sat)\n[1008] %\n```\n\nOS: Ubuntu 18.04\nCommit: fdabaa6\n",
    "priority": 1
  },
  "411": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :rewriter.flat false)\n(set-option :smt.arith.solver 2)\n(set-option :smt.arith.random_initial_value true)\n(declare-fun a () Int)\n(declare-fun b () Int)\n(declare-fun c () Int)\n(declare-fun d () Int)\n(assert (= (* (/ 1 a) b (* 2 c) (* 3 d)) 0))\n(check-sat-using ctx-solver-simplify)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/smt/theory_arith_nl.h\nLine: 1356\nidx == d\n```\n\nOS: Ubuntu 18.04\nCommit: ee9c797\n",
    "priority": 1
  },
  "412": {
    "body": "Hi, \r\nFor this case, z3 debug throws out an assertion violation and z3 release throws flaky segmentation fault:\r\n```\r\n[1393] % z3 small.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/util/old_vector.h\r\nLine: 375\r\nidx < size()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[1394] % \r\n[1394] % z3release small.smt2\r\nunknown\r\n[1395] % z3release small.smt2\r\nunknown\r\n[1396] % z3release small.smt2\r\nSegmentation fault\r\n[1397] % \r\n[1397] % cat small.smt2\r\n(set-option :parallel.enable true)\r\n(declare-fun a (Int Int) Int)\r\n(declare-fun b ((Array Int (Array Int Int))) (Array Int (Array Int Int)))\r\n(declare-fun c (Int Int Int) (Array Int (Array Int Int)))\r\n(assert (forall ((d Int) (e Int))\r\n     (= (<= d e) (= (select (select (c 0 (a e e) e) d) e) e))))\r\n(assert (forall ((f Int) (g Int) (h (Array Int (Array Int Int))) (i Int))\r\n     (let ((j (b h)))\r\n     (= (or (<= f i) (<= g i)) (= 0 (select (j g) f))))))\r\n(check-sat-using qfbv)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit:  ee9c797",
    "priority": 1
  },
  "413": {
    "body": "\n```\n[762] % z3 parallel.enable=true model_validate=true small.smt2\nsat\n[763] % z3release model_validate=true small.smt2\nsat\n[764] % z3release parallel.enable=true model_validate=true small.smt2\nsat\n(error \"line 7 column 10: an invalid model was generated\")\n[765] % \n[765] % cat small.smt2\n(declare-fun a () Float16)\n(declare-fun b () Float16)\n(declare-fun c () Float16)\n(declare-fun d () Float16)\n(assert (= c (fp.rem a b)))\n(assert (not (= c d)))\n(check-sat)\n[766] %\n```\n\nOS: Ubuntu 18.04\nCommit: ee9c797\n",
    "priority": 1
  },
  "414": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(set-logic HORN)\r\n(assert\r\n (exists ((a Int))\r\n (forall ((n Int))\r\n  (exists ((b Int))\r\n  (xor (and true) (distinct a b) (<= (- 1) n)\r\n   (exists ((bb Int))\r\n   (or (distinct (* (- 11) bb) b) (> 0 n))))))))\r\n(check-sat)\r\n```\r\nZ3  throws out a Failed to verify:\r\n```\r\n[642] % z3 small.smt2\r\nsat\r\n[643] % z3 smt.ematching=false small.smt2\r\nFailed to verify: lemma->get_pob()->pt().check_inductive(lemma->level(), cube, uses_level, lemma->weakness())\r\n[644] % \r\n[644] % cat small.smt2\r\n(set-logic HORN)\r\n(assert\r\n (exists ((a Int))\r\n (forall ((n Int))\r\n  (exists ((b Int))\r\n  (xor (and true) (distinct a b) (<= (- 1) n)\r\n   (exists ((bb Int))\r\n   (or (distinct (* (- 11) bb) b) (> 0 n))))))))\r\n(check-sat)\r\n[645] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 2673807\r\n",
    "priority": 0
  },
  "415": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(set-logic HORN)\r\n(set-option :fp.spacer.gpdr true)\r\n(set-option :fp.spacer.mbqi false)\r\n(assert (exists ((a Int)) (= a 0)))\r\n(check-sat)\r\n```\r\nZ3  throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/muz/spacer/spacer_context.cpp\r\nLine: 3502\r\nm_weak_abs\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nWhen replacing  (= a 0) with (= a a), the assertion violation disappears. \r\n\r\nOS: Ubuntu 18.04\r\nCommit: 2673807\r\n",
    "priority": 1
  },
  "416": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () String)\n(declare-fun b () Int)\n(declare-fun c () Int)\n(declare-fun d () Int)\n(declare-fun e (Int) Bool)\n(declare-fun f () Int)\n(assert (xor (> c 0) (< (/ 1 b c) (str.len a))))\n(assert (e f))\n(assert (distinct \"efg\" (str.substr a b c)))\n(assert (= \"bef\" (str.substr a f d)))\n(assert (> (str.len a) 10))\n(check-sat)\n```\nZ3  gives an invalid model:\n```\n[580] % z3 model_validate=true small.smt2\nsat\n(error \"line 12 column 10: an invalid model was generated\")\n[581] % \n[581] % cat small.smt2\n(declare-fun a () String)\n(declare-fun b () Int)\n(declare-fun c () Int)\n(declare-fun d () Int)\n(declare-fun e (Int) Bool)\n(declare-fun f () Int)\n(assert (xor (> c 0) (< (/ 1 b c) (str.len a))))\n(assert (e f))\n(assert (distinct \"efg\" (str.substr a b c)))\n(assert (= \"bef\" (str.substr a f d)))\n(assert (> (str.len a) 10))\n(check-sat)\n[582] %\n```\n\nOS: Ubuntu 18.04\nCommit: 2673807\n",
    "priority": 1
  },
  "417": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Int)\n(declare-fun b (Int) Bool)\n(assert (not (b 0)))\n(assert (b (mod a (- 1))))\n(check-sat)\n```\nZ3  gives an invalid model:\n```\n[551] % z3 smt.arith.solver=2 model_validate=true small.smt2\nsat\n(error \"line 5 column 10: an invalid model was generated\")\n[552] % z3 smt.arith.solver=6 model_validate=true small.smt2\nsat\n(error \"line 5 column 10: an invalid model was generated\")\n[553] % \n[553] % cat small.smt2\n(declare-fun a () Int)\n(declare-fun b (Int) Bool)\n(assert (not (b 0)))\n(assert (b (mod a (- 1))))\n(check-sat)\n[554] %\n```\n\nOS: Ubuntu 18.04\nCommit: 2673807\n",
    "priority": 1
  },
  "418": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :proof true)\n(declare-datatypes () ((a (b (c Int) (d a)) f)))\n(assert (forall ((e a)) (= (c e) 0)))\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ast/rewriter/rewriter_def.h\nLine: 348\nrewrites_to(m_r, pr1)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 2673807\n",
    "priority": 1
  },
  "419": {
    "body": "\n```\n[569] % for f in $(seq 1 5) ; do z3release small.smt2; done\nSegmentation fault\nunknown\nSegmentation fault\nunknown\nunknown\n[570] % \n[570] % cat small.smt2\n(set-option :smt.threads 10)\n(set-option :trace true)\n(declare-fun c () Real)\n(declare-fun d () Real)\n(declare-fun a () Real)\n(declare-fun i () Real)\n(declare-fun e () Real)\n(declare-fun j () Real)\n(declare-fun f () Real)\n(declare-fun b () Real)\n(declare-fun g () Real)\n(assert (exists ((h Real)) (and (= f 0.0 (mod (mod j 0) g)) (<= a 0 0.0 e g (- c i) d) (= b 2.0))))\n(check-sat-using qe_rec)\n[571] %\n```\n\nOS: Ubuntu 18.04\nCommit: 6e8d900\n",
    "priority": 1
  },
  "420": {
    "body": "\n```\n[609] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/ast/ast.cpp\nLine: 2964\np->get_id() != 202\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[610] % \n[610] % cat small.smt2\n(set-logic HORN)\n(set-option :proof true)\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(declare-fun d () Real)\n(declare-fun e () Real)\n(declare-fun f () Real)\n(declare-fun g () Real)\n(declare-fun l () Real)\n(declare-fun m () Real)\n(declare-fun n () Real)\n(assert\n (not\n (exists ((h Real))\n  (let ((i 0))\n  (let ((j 1) (k (+ (* i b) f)))\n   (=> (and (and (and (or (and (and true) (> g 0) (>= d 7)) (>= c 0)) (> l 9)) (> n 0)) (>= a 3))\n   (or (>= 0 m) (<= k e))))))))\n(check-sat)\n[611] %\n```\n\nOS: Ubuntu 18.04\nCommit: 6e8d900\n",
    "priority": 1
  },
  "421": {
    "body": "\nMight be related to #3829 but looks like a different issue to me\n```\n[521] % z3 model_validate=true small.smt2\nArray Instantiation called with parameters : enforce=0 nb_quantifier=1 slice_technique=no-slicing\nInput rules = \n; rule count: 0\n; predicate count: 0\n; output: query!1\nOutput rules = \n; rule count: 0\n; predicate count: 0\nsat\n(error \"line 7 column 10: an invalid model was generated\")\n[522] % \n[522] % cat small.smt2\n(set-logic HORN)\n(set-option :fp.xform.instantiate_arrays true)\n(declare-fun a (Bool) Bool)\n(declare-fun b () Bool)\n(assert (forall ((c Bool)) (a c)))\n(assert b)\n(check-sat)\n[523] %\n```\nOS: Ubuntu 18.04\nCommit: 6e8d900\n",
    "priority": 0
  },
  "422": {
    "body": "\n```\n[1077] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/tactic/goal.cpp\nLine: 291\nf == m().get_fact(pr)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[1078] % \n[1078] % cat small.smt2\n(set-option :proof true)\n(declare-datatypes () ((P (P0))))\n(assert (forall ((x P) (y Bool)) (= (= x P0) y)))\n(check-sat-using dt2bv)\n[1079] %\n```\n\nOS: Ubuntu 18.04\nCommit: 7595371\n",
    "priority": 1
  },
  "423": {
    "body": "\n```\n[509] % z3 model_validate=true small.smt2\nArray Instantiation called with parameters : enforce=0 nb_quantifier=1 slice_technique=no-slicing\nInput rules = \n; rule count: 0\n; predicate count: 0\n; output: query!1\nOutput rules = \n; rule count: 0\n; predicate count: 0\nsat\n(error \"line 5 column 21: an invalid model was generated\")\n(model \n (define-fun a () Bool\n  false)\n)\n[510] % \n[510] % cat small.smt2\n(set-option :fp.engine spacer)\n(set-option :fp.xform.instantiate_arrays true)\n(declare-fun a () Bool)\n(assert a)\n(check-sat-using horn)\n(get-model)\n[511] %\n```\nOS: Ubuntu 18.04\nCommit: 7595371\n",
    "priority": 1
  },
  "424": {
    "body": "\n```\n[781] % z3-4.8.7 small.smt2\nsat\nunknown\n[782] % \n[782] % z3 small.smt2\nsat\nSegmentation fault\n[783] % \n[783] % z3release small.smt2\nsat\nSegmentation fault\n[784] % \n[784] % cat small.smt2\n(declare-fun x () Int)\n(assert (= x (div 1)))\n(check-sat)\n(check-sat-using horn)\n[785] %\n```\n\nOS: Ubuntu 18.04\nCommit: 7595371\n",
    "priority": 1
  },
  "425": {
    "body": "\n```\n[735] % z3 small.smt2\nsat\n[736] % z3 rewriter.flat=false small.smt2\nFailed to verify: lemma->get_pob()->pt().check_inductive(lemma->level(), cube, uses_level, lemma->weakness())\n[737] % \n[737] % cat small.smt2\n(set-logic HORN)\n(assert (exists ((a Int) (b Int) (c Int)) (and (= (* 2 a) b) (or (= (* 1) c) (= 0 b)))))\n(check-sat)\n[738] %\n```\nOS: Ubuntu 18.04\nCommit: 5c9fd90\n",
    "priority": 0
  },
  "426": {
    "body": "The following traces shows a false positive in Z3's model validator. The returned model should be correct. Removing the `(push)` makes the bug disappear.\r\n```\r\n[639] % z3 model_validate=true small.smt2\r\nsat\r\n[640] % z3 rewriter.flat=false model_validate=true small.smt2\r\nsat\r\n(error \"line 9 column 10: an invalid model was generated\")\r\n[641] % \r\n[641] % cat small.smt2\r\n(declare-fun a () Int)\r\n(declare-fun b (Int) Bool)\r\n(declare-fun c (Int) Bool)\r\n(push)\r\n(assert (or (or (not (b a)) (not (c a))) (c a)))\r\n(assert (c (- a 1)))\r\n(assert (= (c 0) (b 0)))\r\n(assert (b (mod a (- 1))))\r\n(check-sat)\r\n[642] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 5c9fd90\r\n",
    "priority": 0
  },
  "427": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :fp.xform.quantify_arrays true)\n(declare-fun b ((Array Int Int)) Bool)\n(assert (forall ((a (Array Int Int))) (b a)))\n(assert (forall ((a (Array Int Int))) (=> (b a) (b a))))\n(assert (forall ((a (Array Int Int))) (not (b a))))\n(check-sat-using horn)\n```\nZ3  throws out an assertion violation:\n```\nFailed to verify: close()\nASSERTION VIOLATION\nFile: ../src/muz/base/dl_rule_set.cpp\nLine: 369\nUNREACHABLE CODE WAS REACHED.\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 5c9fd90\n",
    "priority": 1
  },
  "428": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :rewriter.expand_nested_stores true)\n(declare-fun a (Int Int Int Int Int Int (Array Int (Array Int Int))\nInt Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int\nInt Int Int Int Int Int Int Int Int Int Int (Array Int Int) (Array Int\nInt) Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int\nInt Int Int Int Int (Array Int Int) (Array Int Int) (Array Int (Array\nInt Int)) Int Int Int Int Int Int Int Int (Array Int (Array Int Int))\nInt Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int\nInt Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int\nInt Int Int Int Int (Array Int Int) Int Int Int Int Int Int Int Int\nInt Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int\nInt Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int\nInt Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int\nInt Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int\nInt Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int\nInt Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int\nInt Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int\nInt Int Int Int (Array Int Int) Int Int Int Int Int Int Int Int Int\nInt Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int\nInt Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int\nInt Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int\nInt Int Int Int Bool) Bool)\n(assert (forall ((c Int) (d Int) (aa Int) (e Int) (f Int) (ab Int) (ac\n(Array Int (Array Int Int))) (g Int) (h Int) (i Int) (j Int) (k Int)\n(l Int) (m Int) (n Int) (o Int) (p Int) (q Int) (r Int) (s Int) (t\nInt) (u Int) (v Int) (w Int) (x Int) (y Int) (z Int) (ad Int) (ae Int)\n(af (Array Int Int)) (ag (Array Int Int)) (ah Int) (ai Int) (aj Int)\n(ak Int) (al Int) (am Int) (an Int) (ao Int) (ap Int) (aq Int) (ar\nInt) (as Int) (ay Int) (at Int) (au Int) (av Int) (aw Int) (ax (Array\nInt Int)) (bi (Array Int Int)) (az (Array Int (Array Int Int))) (ba\nInt) (bb Int) (bc Int) (bd Int) (be Int) (bf Int) (bg (Array Int\n(Array Int Int))) (bh Int) (bn Int) (bj Int) (bk Int) (bl Int) (bm\nInt) (bs Int) (bo Int) (bp Int) (bq Int) (br Int) (bx Int) (bt Int)\n(bu Int) (bv Int) (bw Int) (cg Int) (by Int) (bz Int) (ca Int) (cb\nInt) (cc Int) (cd Int) (ce Int) (cf Int) (cq (Array Int Int)) (ch Int)\n(ci Int) (cj Int) (ck Int) (cl Int) (cm Int) (do Int) (cn Int) (co\nInt) (cp Int) (db Int) (cr Int) (cs Int) (ct Int) (cu Int) (cv Int)\n(cw Int) (cx Int) (cy Int) (cz Int) (da Int) (dr Int) (dc Int) (dd\nInt) (de Int) (dw Int) (df Int) (dg Int) (dh Int) (di Int) (dj Int)\n(dk Int) (dl Int) (dm Int) (dn Int) (dp Int) (dq Int) (en Int) (ds\nInt) (dt Int) (du Int) (dv Int) (es Int) (dx Int) (dy Int) (dz Int)\n(ea Int) (eb Int) (ec Int) (ed Int) (ee Int) (ef Int) (eg Int) (eh\nInt) (ei Int) (ej Int) (ek Int) (el Int) (em Int) (gr Int) (eo Int)\n(ep Int) (eq Int) (er Int) (ft Int) (et Int) (eu Int) (ev Int) (ew\nInt) (ex Int) (ey Int) (ez Int) (fa Int) (fb Int) (fc Int) (fd Int)\n(fe Int) (ff Int) (fg Int) (fh Int) (fi Int) (fj Int) (fk Int) (fl\nInt) (fm Int) (fn Int) (fo Int) (gq Int) (fp Int) (fq Int) (fr Int)\n(fs Int) (gv Int) (fu Int) (gx Int) (fv Int) (fw Int) (fx Int) (if\n(Array Int Int)) (fy Int) (fz Int) (ga Int) (gb Int) (gc Int) (gd Int)\n(ge Int) (gf Int) (gg Int) (gh Int) (gi Int) (gj Int) (gk Int) (gl\nInt) (gm Int) (gn Int) (go Int) (gp Int) (ht Int) (hu Int) (gs Int)\n(gt Int) (gu Int) (hy Int) (gw Int) (ia Int) (gy Int) (gz Int) (ha\nInt) (hb Int) (hc Int) (hd Int) (he Int) (hf Int) (hg Int) (hh Int)\n(hi Int) (hj Int) (hk Int) (hl Int) (hm Int) (hn Int) (ho Int) (hp\nInt) (hq Int) (hr Int) (hs Int) (ip Int) (iq Int) (hv Int) (hw Int)\n(hx Int) (ir Int) (hz Int) (is Int) (ib Int) (ic Int) (id Int) (ie\nInt) (ig Int) (ih Int) (ii Int) (ij Int) (ik Int) (il Bool) (im (Array\nInt Int))) (and (or (let ((in 0)) (= cq (let ((io (bg gq))) (store\n(store (store (store (store (store (store (store (store (store (store\n(store (store (store (store (store (store (store (store (store (store\n(store (store (store (store (store (store (store (store (store (store\n(store (store (store (store (store (store (store (store (store (store\nim 0 0) 1 0) 2 0) 3 0) 4 0) 5 0) 6 0) 7 0) 8 0) 9 0) 0 0) 1 0) 2 0) 3\n0) 4 0) 5 0) 6 0) 7 0) 8 0) 9 0) 0 0) 1 0) 2 0) 3 0) 4 0) 5 0) 6 0) 7\n0) 8 0) 9 0) 0 0) 1 0) 2 0) 3 0) 4 0) 5 0) 6 0) 7 0) 8 0) 9 0) 0 (io\nin)))))) (a c d aa e f ab ac g h i j k l m n o d p q r e s f t d u v w\nx y z e f ad ae af ag ah ai aj ak al am an ao ap aq ar as ay at au av\nc d e f aw ax bi az ba e f bb bc bd be bf bg bh bn bj bk bl bm bs bo\nbp c d e f bq br bx bt bu c bv bw c d e f cg by c bz ca cb c cc cd ce\nc d e cf cq ch ci cj c ck d cl cm do cn co cp db c d d e cr f cs ct cu\nc d e f cv cw d cx cy e cz da dr dc dd d de dw e df dg dh di dj c d c\nd e f e f dk dl dm f dn dp e dq en ds dt du dv f es dx e dy dz ea eb\nec ed ee c d e f ef eg eh ei ej f ek el em gr eo ep eq er ft f et eu\nev ew ex ey ez fa fb fc fd fe ff fg fh fi fj fk fl fm fn fo gq fp fq\nfr fs gv fu gx fv fw fx if fy fz ga gb gc gd ge gf gg gh gi gj gk gl\ngm gn go gp ht hu gs gt gu hy gw ia gy gz ha hb hc hd he hf hg hh hi\nhj hk hl hm hn ho hp hq hr hs ip iq hv hw hx ir hz is ib ic id ie ig\nih ii ij ik il)))\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ast/rewriter/rewriter_def.h\nLine: 49\nv->get_sort() == m().get_sort(r)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 5c9fd90\n",
    "priority": 1
  },
  "429": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(assert (exists ((a Real)) (>= (* (to_real (to_int a)) (/ 0 a)) 0)))\r\n(check-sat)\r\n(check-sat-using horn)\r\n```\r\nZ3  throws out a Failed to verify:\r\n```\r\n[902] % z3 small.smt2\r\nsat\r\nFailed to verify: lemma->get_pob()->pt().check_inductive(lemma->level(), cube, uses_level, lemma->weakness())\r\n[903] % \r\n[903] % cat small.smt2\r\n(assert (exists ((a Real)) (>= (* (to_real (to_int a)) (/ 0 a)) 0)))\r\n(check-sat)\r\n(check-sat-using horn)\r\n[904] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 5c9fd90\r\n",
    "priority": 0
  },
  "430": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(declare-fun d () Real)\n(declare-fun e () Real)\n(declare-fun f () Real)\n(declare-fun g () Real)\n(declare-fun h () Real)\n(declare-fun i () Real)\n(declare-fun j () Real)\n(declare-fun k () Real)\n(declare-fun l () Real)\n(declare-fun m () Real)\n(declare-fun n () Real)\n(declare-fun o () Real)\n(assert (not (=> (and (>= (/ b i) 0) (>= j g 0 e 0)) (>= 0 h))))\n(assert (= a (* m o) (mod (to_int a) (to_int m)) o (/ b i)))\n(assert (= i (/ b f)))\n(assert (= c 0))\n(assert (= n (/ c k)))\n(assert (= k (/ c n)))\n(assert (= d (- g l)))\n(assert (= g (/ d l)))\n(assert (= l (/ d g)))\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/lp/nla_intervals.cpp\nLine: 348\nfalse\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 5c9fd90\n",
    "priority": 1
  },
  "431": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :rewriter.push_ite_arith true)\n(set-option :rewriter.eq2ineq true)\n(set-option :fp.xform.elim_term_ite true)\n(set-option :rewriter.arith_ineq_lhs true)\n(assert\n (forall ((a Bool) (b Bool) (c Int) (d Int))\n (= d (ite (= a b) 0 (ite (= c 0) (+ c 1) c)))))\n(check-sat-using horn)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/muz/transforms/dl_mk_elim_term_ite.cpp\nLine: 168\n!has_term_ite(fml2)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: cb13641\n",
    "priority": 1
  },
  "432": {
    "body": "\n```\n[536] % z3 small.smt2\nsat\n(model \n (define-fun a () Int\n  0)\n (define-fun b () Int\n  0)\n)\n[537] % cat small.smt2\n(declare-fun a () Int)\n(declare-fun b () Int)\n(assert (= (= a 0) (= b 1)))\n(assert (>= b 0))\n(minimize 0)\n(check-sat)\n(get-model)\n[538] %\n```\nOS: Ubuntu 18.04\nCommit: cb13641\n",
    "priority": 1
  },
  "433": {
    "body": "\n```\n[602] % z3 small.smt2\nFailed to verify: a.is_numeral(val, r)\nASSERTION VIOLATION\nFile: ../src/muz/spacer/spacer_qe_project.cpp\nLine: 495\nUNREACHABLE CODE WAS REACHED.\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[603] % \n[603] % cat small.smt2\n(set-logic HORN)\n(set-option :fp.xform.inline_eager false)\n(set-option :fp.spacer.native_mbp false)\n(set-option :fp.spacer.reach_dnf false)\n(declare-fun a (Int Bool Int Bool) Bool)\n(declare-fun c (Int Int Bool Bool Int Int Int Int Bool Bool Bool Int Int Bool Bool Int Int Int Int Bool Bool Bool) Bool)\n(declare-fun d (Bool Bool Bool Int Bool Int Int Bool Bool Int Int Int Int Bool Bool Bool Int Int Bool Bool Int Int Int Int Bool Bool Bool) Bool)\n(declare-fun e (Int Int Bool Bool Int Int Int Int Bool Bool Bool Bool) Bool)\n(assert (forall ((ef Int) (eaa Int) (eabacad Bool) (eabacg Bool)) (=> eabacad (a eaa eabacg ef eabacad))))\n(assert\n (forall ((no Int)\n     (naf Int)\n     (nphl Bool)\n     (nphiacg Bool)\n     (nphq Bool)\n     (nphiacad Bool)\n     (nrsag Int)\n     (nrsah Int)\n     (nrst Int)\n     (nrsai Int)\n     (nrsuacg Bool)\n     (nrsv Int)\n     (nrsw Int)\n     (nrsx Int)\n     (nrsaj Int)\n     (nrsuacad Bool)\n     (nyacad Bool)\n     (nzeaa Int)\n     (nzeabacg Bool)\n     (nzef Int)\n     (nzeabacad Bool)\n     (nyacg Bool))\n (=> (a nzeaa nzeabacg nzef nzeabacad)\n  (c naf nzeaa nzeabacg nyacg nrsag nrsah nrst nrsai nrsuacg nphl nphiacg no nzef\n  nzeabacad nyacad nrsv nrsw nrsx nrsaj nrsuacad nphq nphiacad))))\n(assert\n (forall ((nak Bool)\n     (nal Bool)\n     (nam Bool)\n     (nphl Bool)\n     (nphiacg Bool)\n     (ninit_invalid_s Int)\n     (nao Bool)\n     (nphae Bool)\n     (nphiacj Bool)\n     (nrsag Int)\n     (nrsah Int)\n     (nrst Int)\n     (nrsai Int)\n     (nrsuacg Bool)\n     (nap Int)\n     (nrsaq Int)\n     (nrsar Int)\n     (nrsas Int)\n     (nrs__synapse_5_x Int)\n     (nrsuacj Bool)\n     (nyacg Bool)\n     (nyacj Bool)\n     (naf Int)\n     (nat Int)\n     (nzeaa Int)\n     (nzeabacg Bool)\n     (nau Int)\n     (nzeav Int)\n     (nzeabacj Bool)\n     (naw Bool))\n (let ((ax (=> nao (< nap 0 nau))))\n  (let ((ay (= naw ax)))\n  (=> ay (d nak nal nam ninit_invalid_s naw naf nzeaa nzeabacg nyacg nrsag nrsah nrst nrsai\n      nrsuacg nphl nphiacg nat nzeav nzeabacj nyacj nrsaq nrsar nrsas nrs__synapse_5_x nrsuacj nphae nphiacj))))))\n(assert\n (forall ((naf Int)\n     (nzeaa Int)\n     (nzeabacg Bool)\n     (nyacg Bool)\n     (nrsag Int)\n     (nrsah Int)\n     (nrst Int)\n     (nrsai Int)\n     (nrsuacg Bool)\n     (nphl Bool)\n     (nphiacg Bool)\n     (no Int)\n     (nzef Int)\n     (nzeabacad Bool)\n     (nyacad Bool)\n     (nrsv Int)\n     (nrsw Int)\n     (nrsx Int)\n     (nrsaj Int)\n     (nrsuacad Bool)\n     (nphq Bool)\n     (nphiacad Bool)\n     (nak Bool)\n     (nal Bool)\n     (nam Bool)\n     (ninit_invalid_s Int)\n     (naw Bool)\n     (nat Int)\n     (nzeav Int)\n     (nzeabacj Bool)\n     (nyacj Bool)\n     (nrsaq Int)\n     (nrsar Int)\n     (nrsas Int)\n     (nrs__synapse_5_x Int)\n     (nrsuacj Bool)\n     (nphae Bool)\n     (nphiacj Bool))\n (=> (c naf nzeaa nzeabacg nyacg nrsag nrsah nrst nrsai nrsuacg nphl nphiacg no nzef nzeabacad\n    nyacad nrsv nrsw nrsx nrsaj nrsuacad nphq nphiacad)\n  (d nak nal nam ninit_invalid_s naw no nzef nzeabacad nyacad nrsv nrsw nrsx nrsaj nrsuacad nphq\n  nphiacad nat nzeav nzeabacj nyacj nrsaq nrsar nrsas nrs__synapse_5_x nrsuacj nphae nphiacj)\n  (e nat nzeav nzeabacj nyacj nrsaq nrsar nrsas nrs__synapse_5_x nrsuacj nphae nphiacj naw))))\n(assert\n (forall ((naw Bool)\n     (nat Int)\n     (nzeav Int)\n     (nzeabacj Bool)\n     (nyacj Bool)\n     (nrsaq Int)\n     (nrsar Int)\n     (nrsas Int)\n     (nrs__synapse_5_x Int)\n     (nrsuacj Bool)\n     (nphae Bool)\n     (nphiacj Bool))\n (not (e nat nzeav nzeabacj nyacj nrsaq nrsar nrsas nrs__synapse_5_x nrsuacj nphae nphiacj naw))))\n(check-sat)\n[604] %\n```\n\nOS: Ubuntu 18.04\nCommit: cb13641\n",
    "priority": 0
  },
  "434": {
    "body": "\n```\n[528] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/ast/ast.cpp\nLine: 2908\nto_app(get_fact(p1))->get_arg(1) == to_app(get_fact(p2))->get_arg(0)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[529] % cat small.smt2\n(assert (exists ((a Real)) (forall ((b Real)) (<= (div (to_int a) (to_int b)) 0.0))))\n(check-sat-using horn)\n[530] %\n```\n\nOS: Ubuntu 18.04\nCommit: cb13641\n",
    "priority": 1
  },
  "435": {
    "body": "Hi,\nFor this formula:\n```\n(assert\n (forall ((a Int))\n (forall ((b Int))\n  (exists ((c Int))\n  (xor and (= (div 82 a) c) (<= 129 b)\n   (exists ((bb Int)) (xor (= (* 32 bb) c) (< 107 b))))))))\n(check-sat-using horn)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ast/proofs/proof_checker.cpp\nLine: 539\nUNREACHABLE CODE WAS REACHED.\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: cb13641\n",
    "priority": 0
  },
  "436": {
    "body": "\n```\n[644] % z3 small.smt2 \nsat\n[645] % \n[645] % cat small.smt2 \n(set-option :rewriter.arith_ineq_lhs true)\n(set-option :rewriter.hoist_cmul true)\n(set-option :model_evaluator.array_equalities false)\n(assert (forall ((x Real)) (forall ((y Int)) (xor (< y x) (<= y (* 236 x (- 114)))))))\n(check-sat)\n[646] %\n```\n\nOS: Ubuntu 18.04\nCommit: cb13641\n",
    "priority": 1
  },
  "437": {
    "body": "\n```\n[537] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/tactic/goal.cpp\nLine: 308\n!m().proofs_enabled()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[538] % \n[538] % cat small.smt2\n(set-logic HORN)\n(set-option :fp.xform.scale true)\n(set-option :rewriter.arith_lhs true)\n(set-option :fp.xform.magic true)\n(set-option :fp.spacer.gpdr true)\n(set-option :fp.spacer.iuc.old_hyp_reducer true)\n(declare-fun P (Real Real Real Real Real Real Real Real Real Real Real\n        Real Real Real Real Real Real Real Real Real Real Real\n        Real Real Real Real Real Real Real Real Real Real Bool\n        Bool Bool Bool Bool Bool Bool Bool Real Real Real Real\n        Real Real Real) Bool)\n(assert (forall ((a Real)\n         (aa Real)\n         (b Real)\n         (c Real)\n         (d Real)\n         (ab Real)\n         (e Real)\n         (f Real)\n         (ac Real)\n         (ad Real)\n         (ae Real)\n         (g Real)\n         (af Real)\n         (h Real)\n         (i Real)\n         (ag Real)\n         (ah Real)\n         (j Real)\n         (k Real)\n         (l Real)\n         (ai Real)\n         (m Real)\n         (aj Real)\n         (n Real)\n         (o Real)\n         (ak Real)\n         (p Real)\n         (q Real)\n         (r Real)\n         (al Real)\n         (s Real)\n         (am Real)\n         (an Real)\n         (ao Real)\n         (ap Real)\n         (aq Bool)\n         (t Bool)\n         (ar Bool)\n         (u Bool)\n         (v Bool)\n         (w Bool)\n         (x Bool)\n         (as Bool)\n         (y Real)\n         (z Real)\n         (cv Real)\n         (at Real))\n     (let ((au (and (= a 0) (not (= ap 0)) aq)))\n     (=> au (P aa b c d ab e f ac ad ae g af h i ag ah j k l ai m aj n o ak p q r al s am an aq t ar u v w x as y z cv at a ao ap)))))\n(assert\n (forall ((aa Real)\n     (b Real)\n     (c Real)\n     (d Real)\n     (ab Real)\n     (e Real)\n     (f Real)\n     (ac Real)\n     (ad Real)\n     (ae Real)\n     (g Real)\n     (af Real)\n     (h Real)\n     (i Real)\n     (ag Real)\n     (ah Real)\n     (j Real)\n     (k Real)\n     (l Real)\n     (ai Real)\n     (m Real)\n     (aj Real)\n     (n Real)\n     (o Real)\n     (ak Real)\n     (p Real)\n     (q Real)\n     (r Real)\n     (al Real)\n     (s Real)\n     (am Real)\n     (an Real)\n     (aq Bool)\n     (t Bool)\n     (ar Bool)\n     (u Bool)\n     (v Bool)\n     (w Bool)\n     (x Bool)\n     (as Bool)\n     (y Real)\n     (z Real)\n     (cv Real)\n     (at Real)\n     (a Real)\n     (ao Real)\n     (ap Real)\n     (av Real)\n     (aw Real)\n     (ax Real)\n     (ay Real)\n     (az Real)\n     (ba Real)\n     (bb Real)\n     (bc Real)\n     (bd Real)\n     (be Real)\n     (bf Real)\n     (bg Real)\n     (bh Real)\n     (bi Real)\n     (bj Real)\n     (bk Real)\n     (bl Real)\n     (bm Real)\n     (bn Real)\n     (bo Real)\n     (bp Real)\n     (bq Real)\n     (br Real)\n     (bs Real)\n     (bt Real)\n     (bu Real)\n     (bv Real)\n     (bw Real)\n     (bx Real)\n     (by Real)\n     (bz Real)\n     (ca Real)\n     (cb Real)\n     (cc Real)\n     (cd Real)\n     (ce Bool)\n     (cf Bool)\n     (cg Bool)\n     (ch Bool)\n     (ci Bool)\n     (cj Bool)\n     (ck Bool)\n     (cl Bool)\n     (cm Real)\n     (cn Real)\n     (co Real)\n     (cp Real))\n (let ((cq (= bj bm ap))\n      (cr (= bm 0))\n      (cs (= bm ah)))\n  (let ((ct (or (and cq cr) (and (= a 2) cs))))\n  (=> (P aa b c d ab e f ac ad ae g af h i ag ah j k l ai m aj n o ak p q r al s am an aq t ar u v w x as y z cv at a ao ap)\n   (= aw ap)\n   ct\n   (P ax ay az ba bb bc bd be bf bg bh bi bj bk bl bm bo bp bq br bs bt bu bv bw bx by bz ca cb cc cd ce cf cg ch ci cj ck cl cm cn co cp bn av aw))))))\n(assert\n (forall ((aa Real)\n     (b Real)\n     (c Real)\n     (d Real)\n     (e Real)\n     (f Real)\n     (ac Real)\n     (ad Real)\n     (g Real)\n     (h Real)\n     (i Real)\n     (ag Real)\n     (ah Real)\n     (j Real)\n     (k Real)\n     (l Real)\n     (ai Real)\n     (m Real)\n     (aj Real)\n     (n Real)\n     (o Real)\n     (ak Real)\n     (p Real)\n     (q Real)\n     (r Real)\n     (al Real)\n     (s Real)\n     (am Real)\n     (an Real)\n     (aq Bool)\n     (t Bool)\n     (ar Bool)\n     (u Bool)\n     (v Bool)\n     (w Bool)\n     (x Bool)\n     (as Bool)\n     (y Real)\n     (z Real)\n     (cv Real)\n     (at Real)\n     (a Real)\n     (ao Real)\n     (ap Real))\n (let ((cu (not (< a 3))))\n  (=> (P aa b c d b e f ac ad e g f h i ag ah j k l ai m aj n o ak p q r al s am an aq t ar u v w x as y z cv at a ao ap) cu false))))\n(check-\n```\n\nOS: Ubuntu 18.04\nCommit: cb13641\n",
    "priority": 1
  },
  "438": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :fp.xform.fix_unbound_vars true)\n(declare-fun a (Bool Bool Bool Int Int Int Int Int Int Int Int Int Bool Int Int Int Int Bool) Bool)\n(declare-fun b (Bool Bool Bool Int Bool Int Int Int Int Bool Bool Bool Int Int Int Int Bool Bool Bool) Bool)\n(assert\n (forall\n ((c Int)\n  (d Int)\n  (dfabac Bool)\n  (dad Bool)\n  (dfabg Bool)\n  (dh Bool)\n  (di Int)\n  (dj Bool)\n  (dk Bool)\n  (dl Int)\n  (dm Int)\n  (dn Int)\n  (do Int)\n  (dae Int)\n  (dp Int)\n  (dq Int)\n  (dr Int)\n  (ds Int)\n  (daf Int))\n (let ((e (and (= dfabac dad) (or (not (= dad true)) (= d dp)))))\n  (=> e (a dh dj dk dp dn di do d dae d c dm dfabac daf ds dr dq dfabg)))))\n(assert\n (forall\n ((agh Bool)\n  (agj Bool)\n  (agk Bool)\n  (agahuv Bool)\n  (agahuwabac Bool)\n  (agp Int)\n  (agahux Bool)\n  (agahuwabg Bool)\n  (agaidy Int)\n  (agaidae Int)\n  (agaidz Int)\n  (agaide Int)\n  (agaidaj Int)\n  (agaidaa Int)\n  (agaidak Int)\n  (agaidm Int)\n  (agaidfabal Bool)\n  (agaidfabac Bool)\n  (agn Int)\n  (agi Int)\n  (ago Int)\n  (agl Int)\n  (agaidaf Int)\n  (agaids Int)\n  (agaidr Int)\n  (agaidq Int)\n  (agaidfabg Bool)\n  (agam Bool))\n (let ((an (a agh agj agk agp agn agi ago agl agaidy agaidz agaidaj agaidak agaidfabal agaidaf agaids agaidr agaidq agaidfabg)))\n  (=> an (b agh agj agk agp agam agaidae agaide agaidaa agaidm agaidfabac agahuv agahuwabac agaidaf agaids agaidr agaidq agaidfabg agahux agahuwabg)))))\n(assert\n (forall\n ((agaidy Int)\n  (agaidz Int)\n  (agaidaj Int)\n  (agaidak Int)\n  (agaidfabal Bool)\n  (agahuao Bool)\n  (agahuwabal Bool)\n  (agh Bool)\n  (agj Bool)\n  (agk Bool)\n  (agp Int)\n  (agam Bool)\n  (agaidaf Int)\n  (agaids Int)\n  (agaidr Int)\n  (agaidq Int)\n  (agaidfabg Bool)\n  (agahux Bool)\n  (agahuwabg Bool))\n (not (b agh agj agk agp agam agaidy agaidz agaidaj agaidak agaidfabal agahuao agahuwabal agaidaf agaids agaidr agaidq agaidfabg agahux agahuwabg))))\n(check-sat-using horn)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/muz/transforms/dl_mk_rule_inliner.cpp\nLine: 428\n!has_quantifier(*r.get())\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: cb13641\n",
    "priority": 1
  },
  "439": {
    "body": "Hi,\nFor this formula:\n```\n(set-logic HORN)\n(set-option :fp.xform.instantiate_arrays true)\n(declare-fun P (Int) Bool)\n(assert (P 0))\n(check-sat)\n```\nZ3  gives an invalid model:\n```\n[514] % z3 model_validate=true small.smt2\nArray Instantiation called with parameters : enforce=0 nb_quantifier=1 slice_technique=no-slicing\nInput rules = \n; rule count: 0\n; predicate count: 0\n; output: query!1\nOutput rules = \n; rule count: 0\n; predicate count: 0\nsat\n(error \"line 5 column 10: an invalid model was generated\")\n[515] % \n[515] % cat small.smt2\n(set-logic HORN)\n(set-option :fp.xform.instantiate_arrays true)\n(declare-fun P (Int) Bool)\n(assert (P 0))\n(check-sat)\n[516] %\n```\n\nOS: Ubuntu 18.04\nCommit: cb13641\n",
    "priority": 1
  },
  "440": {
    "body": "Hi,\nFor this formula:\n```\n(set-logic HORN)\n(declare-fun a (Real) Bool)\n(assert (a 0))\n(check-sat)\n```\nZ3 fp.xform.magic=true gives an invalid model:\n```\n[518] % z3 model_validate=true small.smt2\nsat\n[519] % z3 model_validate=true fp.xform.magic=true small.smt2\nsat\n(error \"line 4 column 10: an invalid model was generated\")\n[520] % \n[520] % cat small.smt2\n(set-logic HORN)\n(declare-fun a (Real) Bool)\n(assert (a 0))\n(check-sat)\n[521] %\n```\n\nOS: Ubuntu 18.04\nCommit: cb13641\n",
    "priority": 1
  },
  "441": {
    "body": "\n```\n[626] % z3 small.smt2\nsat\n(model \n (define-fun a () Bool\n  false)\n)\n[627] % \n[627] % cat small.smt2\n(set-logic HORN)\n(declare-fun a () Bool)\n(assert a)\n(check-sat)\n(get-model)\n[628] %\n```\nOS: Ubuntu 18.04\nCommit: cb13641\n",
    "priority": 1
  },
  "442": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :sat.prob_search true)\n(declare-const a Bool)\n(declare-const b Bool)\n(assert b)\n(assert (or a b))\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/util/old_vector.h\nLine: 375\nidx < size()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 3313590\n",
    "priority": 1
  },
  "443": {
    "body": "\n```\n[571] % z3 small.smt2\nsat\n[572] % z3 rewriter.flat=false small.smt2\nFailed to verify: lemma->get_pob()->pt().check_inductive(lemma->level(), cube, uses_level, lemma->weakness())\n[573] % \n[573] % cat small.smt2\n(assert\n (exists ((a Real))\n (forall ((b Real))\n  (exists ((c Real))\n  (let ((d (* (- 68) c)))\n   (or (not (= (+ (* c)) 0)) (< (+ d) 1) (< (* c) (- 1)) (> (- (mod 0 c)) 3)))))))\n(check-sat-using horn)\n[574] %\n```\n\nOS: Ubuntu 18.04\nCommit: 3313590\n",
    "priority": 0
  },
  "444": {
    "body": "\n```\n[596] % z3 model_validate=true small.smt2\nsat\n[597] % z3 model_validate=true smt.threads=2 smt.arith.solver=6 small.smt2\nsat\n(error \"line 37 column 10: an invalid model was generated\")\n[598] % \n[598] % cat small.smt2\n(declare-fun f ((Array Int (Array Int Real)) Int) Bool)\n(declare-fun n () Int)\n(declare-fun a0 () (Array Int (Array Int Real)))\n(declare-fun e0 () Real)\n(declare-fun a1 () (Array Int (Array Int Real)))\n(declare-fun a2 () (Array Int (Array Int Real)))\n(declare-fun e2 () Real)\n(declare-fun a3 () (Array Int (Array Int Real)))\n(declare-fun e3 () Real)\n(declare-fun a4 () (Array Int (Array Int Real)))\n(declare-fun e4 () Real)\n(declare-fun a5 () (Array Int (Array Int Real)))\n(declare-fun e5 () Real)\n(declare-fun a6 () (Array Int (Array Int Real)))\n(declare-fun e6 () Real)\n(declare-fun a7 () (Array Int (Array Int Real)))\n(assert\n (forall ((a (Array Int (Array Int Real))) (n Int))\n (=\n  (f a n)\n  (forall ((i Int) (j Int)) (=> (and (<= 1 i n) (<= 1 j n)) (= 0 (select (a j) i)))))))\n(assert (f a0 n))\n(assert (=\n     a1\n     (store a0 0 (store (select a0 0) 0 e0))\n     a2\n     (store a1 1 (store (select a2 2) 2 e2))\n     a4\n     (store a3 3 (store (select a3 3) 10 e3))\n     (store a4 4 (store (select a4 4) 4 e4))))\n(assert (=\n     a6\n     (store a5 5 (store (select a5 5) 5 e5))\n     a7\n     (store a6 175 (store (select a6 6) 6 e6))))\n(assert (not (f a7 n)))\n(check-sat)\n[599] %\n```\nOS: Ubuntu 18.04\nCommit: 3313590\n",
    "priority": 0
  },
  "445": {
    "body": "Hi,\nFor this formula:\n```\n(define-sort FPN () (_ FloatingPoint 50 53))\n(declare-fun a () FPN)\n(declare-fun b () FPN)\n(declare-fun c () FPN)\n(assert (= (fp.add roundTowardPositive b a) c))\n(check-sat)\n```\nZ3  gives an invalid model:\n```\n[634] % z3 model_validate=true small.smt2\nsat\n(error \"line 6 column 10: an invalid model was generated\")\n[635] % \n[635] % cat small.smt2\n(define-sort FPN () (_ FloatingPoint 50 53))\n(declare-fun a () FPN)\n(declare-fun b () FPN)\n(declare-fun c () FPN)\n(assert (= (fp.add roundTowardPositive b a) c))\n(check-sat)\n[636] %\n```\n\nOS: Ubuntu 18.04\nCommit: 9e7af79\n",
    "priority": 0
  },
  "446": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :smt.core.minimize true)\n(set-option :fp.xform.inline_eager false)\n(assert (< 0 (sin 0.2) 6.5))\n(check-sat-using horn) \n```\nZ3  throws out a segmentation fault:\n```\n[543] % z3 small.smt2\nSegmentation fault\n[544] % \n[544] % cat small.smt2\n(set-option :smt.core.minimize true)\n(set-option :fp.xform.inline_eager false)\n(assert (< 0 (sin 0.2) 6.5))\n(check-sat-using horn)\n[545] %\n```\n\nOS: Ubuntu 18.04\nCommit: 9e7af79\n",
    "priority": 1
  },
  "447": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :proof true)\n(declare-fun a () Bool)\n(declare-fun b () Bool)\n(assert (or (and (not (not b)) (not a))))\n(check-sat-using horn)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/muz/base/dl_util.cpp\nLine: 354\nr2.get_proof()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 9e7af79\n",
    "priority": 1
  },
  "448": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :fp.datalog.generate_explanations true)\n(set-option :fp.xform.karr true)\n(check-sat-using horn)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/muz/rel/dl_mk_explanations.cpp\nLine: 865\nunion_fun\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n```\n\nOS: Ubuntu 18.04\nCommit: 9e7af79\n",
    "priority": 1
  },
  "449": {
    "body": "\n```\n[644] % z3 small.smt2\nWARNING: found non utvpi logic expression:\n(<= (f y) 0)\nASSERTION VIOLATION\nFile: ../src/muz/rel/dl_mk_explanations.cpp\nLine: 793\nprod_rel[0].get_plugin().is_sieve_relation()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[645] % \n[645] % cat small.smt2\n(set-option :fp.datalog.explanations_on_relation_level true)\n(set-option :fp.datalog.generate_explanations true)\n(set-option :smt.arith.solver 4)\n(set-option :smt.clause_proof true)\n(declare-fun a () (Array Int Int))\n(declare-fun b () (Array Int Int))\n(declare-fun v () Int)\n(declare-fun w () Int)\n(declare-fun x () Int)\n(declare-fun y () Int)\n(declare-fun f (Int) Int)\n(assert (or (distinct (store a x v) (store a y w) b) (= 0 (f y))))\n(check-sat-using (then lra horn))\n[646] %\n```\n\nOS: Ubuntu 18.04\nCommit: bb1119a\n",
    "priority": 1
  },
  "450": {
    "body": "\nRelated: #3462, #3496\n```\n[846] % z3 model_validate=true small.smt2\nsat\n(error \"line 6 column 10: an invalid model was generated\")\n[847] % \n[847] % cat small.smt2\n(define-sort FPN () (_ FloatingPoint 50 100))\n(declare-fun x () FPN)\n(declare-fun b () FPN)\n(declare-fun c () FPN)\n(assert (= (fp.sub roundTowardNegative x b) c))\n(check-sat)\n[848] %\n```\nOS: Ubuntu 18.04\nCommit: 550852b\n",
    "priority": 1
  },
  "451": {
    "body": "\n```\n[987] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/muz/base/dl_rule.h\nLine: 88\nUNREACHABLE CODE WAS REACHED.\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[988] % \n[988] % cat small.smt2\n(assert (distinct (lambda ((a Int)) 0)))\n(check-sat-using horn)\n[989] %\n```\n\nOS: Ubuntu 18.04\nCommit: 550852b\n",
    "priority": 1
  },
  "452": {
    "body": "\n```\n[939] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/ast/ast.cpp\nLine: 2826\nto_app(get_fact(p2))->get_arg(0) == get_fact(p1)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[940] % \n[940] % cat small.smt2\n(set-option :proof true)\n(declare-fun a () Int)\n(declare-fun b (Int) Bool)\n(assert (exists ((c Int)) (b c)))\n(assert (xor (b a)))\n(check-sat-using horn)\n[941] %\n```\n\nOS: Ubuntu 18.04\nCommit: b889b11\n",
    "priority": 1
  },
  "453": {
    "body": "Another likely different segfault from #3771 according to -v:10. \r\n```\r\n[595] % z3 small.smt2 \r\nSegmentation fault\r\n[596] % \r\n[596] % cat small.smt2\r\n(set-option :smt.string_solver z3str3)\r\n(declare-fun a () String)\r\n(assert (distinct (str.++ a \"ab\") (str.++ \"ab\" a)))\r\n(check-sat-using unit-subsume-simplify)\r\n[597] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 2ed26e8\r\n",
    "priority": 0
  },
  "454": {
    "body": "\n```\n[785] % z3 small.smt2\nNOT IMPLEMENTED YET!\nASSERTION VIOLATION\nFile: ../src/smt/theory_str_mc.cpp\nLine: 1945\nUNREACHABLE CODE WAS REACHED.\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[786] % \n[786] % cat small.smt2\n(set-option :smt.phase_selection 5)\n(set-option :smt.str.fixed_length_models false)\n(set-option :smt.string_solver z3str3)\n(set-option :smt.str.use_binary_search true)\n(set-option :rewriter.arith_lhs true)\n(declare-fun a () String)\n(declare-fun b () String)\n(declare-fun aa () String)\n(assert (distinct (str.substr b (str.len a) (str.len aa)) \"\"))\n(check-sat-using (then bv smt))\n[787] %\n```\n\nOS: Ubuntu 18.04\nCommit: 2ed26e8\n",
    "priority": 1
  },
  "455": {
    "body": "\n```\n[565] % z3 small.smt2\nSegmentation fault\n[566] % \n[566] % cat small.smt2\n(set-option :smt.string_solver z3str3)\n(set-option :smt.str.fixed_length_models false)\n(set-option :smt.phase_selection 5)\n(declare-fun f () String)\n(declare-fun a () Int)\n(declare-fun b () Int)\n(declare-fun g () String)\n(declare-fun c () String)\n(declare-fun d () String)\n(declare-fun shifted_T4_3 () String)\n(declare-fun shifted_T5_3 () String)\n(declare-fun e () Bool)\n(assert\n (ite e\n (and (= b a (str.len shifted_T4_3) 0 (str.len (str.substr f 0 (str.len g)))) (= c d shifted_T5_3 \"?\"))\n (and (= b 0) (not (str.in.re c (str.to.re \"?\"))))))\n(check-sat)\n[567] %\n```\n\nOS: Ubuntu 18.04\nCommit: 2ed26e8\n",
    "priority": 1
  },
  "456": {
    "body": "\n```\n[650] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/smt/smt_context.cpp\nLine: 2938\n!m_all_th_case_split_literals.contains(l.index())\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[651] % \n[651] % cat small.smt2\n(set-option :smt.string_solver z3str3)\n(set-option :proof true)\n(declare-fun a () String)\n(declare-fun b () String)\n(declare-fun c () String)\n(assert (= (str.replace \"B\" (str.replace \"B\" c \"\") \"\") (str.at (str.replace (str.replace a b \"\") \"\" \"\") 0)))\n(check-sat)\n[652] %\n```\n\nOS: Ubuntu 18.04\nCommit: 2ed26e8\n",
    "priority": 0
  },
  "457": {
    "body": "\n```\n[766] % z3 small.smt2\nsat\n(error \"line 10 column 10: an invalid model was generated\")\n[767] % \n[767] % cat small.smt2\n(set-option :model_validate true)\n(set-option :smt.arith.solver 4)\n(declare-fun a () Int)\n(declare-fun b (Int) Bool)\n(declare-fun c (Int) Bool)\n(push)\n(assert (or (= a 0) (b 0)))\n(assert (c 0))\n(assert (not (c a)))\n(check-sat)\n[768] %\n```\nOS: Ubuntu 18.04\nCommit: 080dbb1\n",
    "priority": 1
  },
  "458": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :trace true)\n(declare-fun a () Float32)\n(assert (= a ((_ to_fp 8 24) roundTowardZero a)))\n(check-sat-using lra)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/util/old_vector.h\nLine: 375\nidx < size()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 5516e42\n",
    "priority": 1
  },
  "459": {
    "body": "\nLooks similar to #3749 but should be different according to `-v:10` output,\n```\n[781] % z3 rewriter.flat=false smt.arith.solver=6 small.smt2 \nSegmentation fault\n[782] % \n[782] % cat small.smt2\n(assert (forall ((?a Int) (?b Int) (?c Int)) (= (* (* ?a ?b) ?c) (* ?a (* ?b ?c)))))\n(assert (exists ((?a Int) (?b Int) (?c Int)) (= ?a (* (* ?a ?b) ?c))))\n(assert (forall ((?b Real)) (= 0 ?b)))\n(assert (forall ((?a Int) (?b Int) (?c Int)) (= (* ?a (* ?b ?c)) (* ?b (* ?a ?c)))))\n(check-sat)\n[783] %\n```\n\nOS: Ubuntu 18.04\nCommit: 121a6de\n",
    "priority": 1
  },
  "460": {
    "body": "\n```\n[603] % z3 small.smt2\nsat\n[604] % z3 rewriter.flat=false smt.arith.solver=6 small.smt2\nSegmentation fault\n[605] % \n[605] % cat small.smt2\n(declare-fun a () Int)\n(declare-fun b () Int)\n(declare-fun c () Int)\n(declare-fun d () Int)\n(assert (= 0 (div c b (- a d (- a d)))))\n(check-sat)\n[606] %\n```\n\nOS: Ubuntu 18.04\nCommit: 121a6de\n",
    "priority": 1
  },
  "461": {
    "body": "Repeated assertion violation (see #3720, #3699) \r\n```\r\n[700] % z3 small.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.cpp\r\nLine: 3101\r\nis_or(f1)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[701] % \r\n[701] % cat small.smt2\r\n(set-option :smt.ematching false)\r\n(set-option :rewriter.pull_cheap_ite true)\r\n(set-option :rewriter.elim_ite false)\r\n(set-option :proof true)\r\n(declare-sort a)\r\n(declare-sort b)\r\n(declare-fun c () a)\r\n(declare-fun d () b)\r\n(declare-fun g (b) a)\r\n(declare-fun e (b) a)\r\n(declare-fun h () b)\r\n(declare-fun f (b) b)\r\n(assert (= (g d) (e h)))\r\n(assert (= d (f h)))\r\n(assert (forall ((i b)) (=> (= (g i) c) (= (f i) i))))\r\n(assert (forall ((j b)) (= (g (f j)) c)))\r\n(check-sat)\r\n[702] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: c70e9af\r\n",
    "priority": 1
  },
  "462": {
    "body": "\nTriggers the same assertion violation as the fixed issue #3739.\n\n```\n[556] % z3 bug3739.smt2 \n(smt.diff_logic: non-diff logic expression (>= (+ b (a c!0)) 0))\nunknown\n[557] % \n[557] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/util/old_vector.h\nLine: 375\nidx < size()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[558] % \n[558] % cat small.smt2\n(set-option :smt.arith.solver 6)\n(set-option :rewriter.push_to_real false)\n(declare-fun a () Int)\n(declare-fun b () Int)\n(declare-fun c () Int)\n(assert (forall ((d Int)) (= (/ 1 (- 3 d (ite (= d a) b c))) 0)))\n(check-sat)\n[559] %\n```\n\nOS: Ubuntu 18.04\nCommit: 64d157d\n",
    "priority": 1
  },
  "463": {
    "body": "\n```\n[902] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/nlsat/nlsat_solver.cpp\nLine: 1845\nvalue(l) == l_false || m_rlimit.get_cancel_flag()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[903] % \n[903] % cat small.smt2\n(set-option :rewriter.flat false)\n(set-option :rewriter.eq2ineq true)\n(set-option :algebraic.factor false)\n(set-option :nlsat.shuffle_vars true)\n(declare-fun a () Real)\n(declare-fun l () Real)\n(declare-fun m () Real)\n(declare-fun c () Real)\n(declare-fun d () Real)\n(declare-fun n () Real)\n(declare-fun e () Real)\n(declare-fun f () Real)\n(declare-fun o () Real)\n(declare-fun V () Real)\n(declare-fun p () Real)\n(declare-fun ep () Real)\n(declare-fun g () Real)\n(declare-fun h () Real)\n(declare-fun i () Real)\n(declare-fun j () Real)\n(assert\n (and\n (xor (or (distinct l V i p) (distinct (* c j) m 2.0))\n  (> (/ 4 (/ (* 5 a j (- 240 a j)) 0)) 0) (= f e))\n (= 0.0 n)))\n(assert (distinct (/ h o) d (/ 1 ep g)))\n(check-sat)\n[904] %\n```\n\nOS: Ubuntu 18.04\nCommit: c26d3f5\n",
    "priority": 0
  },
  "464": {
    "body": "\n\n```\n[780] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/smt/theory_lra.cpp\nLine: 990\nlp::tv::is_term(vi) || a.is_to_real(term)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[781] % \n[781] % cat small.smt2\n(set-option :smt.arith.solver 6)\n(set-option :rewriter.push_to_real false)\n(set-option :rewriter.flat false)\n(declare-fun round2 (Real) Int)\n(assert (forall ((x Real) (i Int)) (xor (> x (to_real i)) (<= (round2 x) i))))\n(assert (forall ((x Real) (i Int)) (or (< (to_real i) x) (>= i (round2 x)))))\n(check-sat)\n[782] %\n```\n\nOS: Ubuntu 18.04\nCommit: f447292\n",
    "priority": 1
  },
  "465": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun s () (Set Int))\n(declare-fun t () (Set Int))\n(assert (= (card (union s t)) 2))\n(assert (= (card s) 1))\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\n[639] % z3 small.smt2\nsat\n[640] % z3 smt.threads=2 small.smt2\nASSERTION VIOLATION\nFile: ../src/smt/smt_context.h\nLine: 1224\nl != true_literal && l != false_literal\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\nASSERTION VIOLATION\nFile: ../src/smt/smt_context.h\nLine: 1224\nl != true_literal && l != false_literal\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\ns\nSegmentation fault\n[641] % \n[641] % cat small.smt2\n(declare-fun s () (Set Int))\n(declare-fun t () (Set Int))\n(assert (= (card (union s t)) 2))\n(assert (= (card s) 1))\n(check-sat)\n```\n\nOS: Ubuntu 18.04\nCommit: f447292\n",
    "priority": 1
  },
  "466": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :rewriter.arith_lhs true)\n(set-option :unsat_core true)\n(set-option :parallel.enable true)\n(set-option :smt.arith.solver 3)\n(declare-fun a (Int) Int)\n(declare-fun b () Int)\n(assert (exists ((c Int)) (< c (a c))))\n(assert (forall ((c Int)) (<= (- b) (a c))))\n(check-sat-using (then lia macro-finder))\n```\nZ3  throws out an assertion violation:\n```\n(smt.diff_logic: non-diff logic expression (>= (+ b (a c!0)) 0))\nASSERTION VIOLATION\nFile: ../src/util/old_vector.h\nLine: 375\nidx < size()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n```\n\nOS: Ubuntu 18.04\nCommit: f447292\n",
    "priority": 1
  },
  "467": {
    "body": "Hi,\nFor this formula:\n```\n(assert\n (forall ((a.k Bool)\n     (a.b Bool)\n     (a.c Bool)\n     (a.d (_ BitVec 8))\n     (a.e Bool)\n     (a.f Bool)\n     (a.aa Bool)\n     (a.g Bool))\n (exists ((a.h Bool)\n      (a.i (_ BitVec 8))\n      (a.j Bool)\n      (a.l Bool)\n      (a.m (_ BitVec 10))\n      (a.n Bool)\n      (a.o Bool)\n      (a.p (_ BitVec 8))\n      (a.q (_ BitVec 8))\n      (a.r Bool)\n      (a.s Bool)\n      (a.t Bool)\n      (a.ab (_ BitVec 10))\n      (a.ac Bool)\n      (a.ad Bool)\n      (a.ae Bool)\n      (a.af Bool)\n      (a.ag Bool)\n      (a.ah (_ BitVec 8))\n      (a.ai (_ BitVec 8))\n      (a.aj Bool)\n      (ak (_ BitVec 4))\n      (a.al Bool))\n  (=> (= a.aa (ite (= a.k false) a.c (ite (= a.k true) true (ite (= a.k false) (ite (not a.b) false a.c) a.c))))\n  (and (= a.p (ite a.l (ite (not (ite a.j true a.h)) a.q a.i) a.i))\n   (= a.ab (ite a.g (ite (bvugt ((_ zero_extend 22) a.m) (_ bv104 32)) (_ bv0 10) (bvadd (_ bv1 10))) a.m))\n   (= a.ah (ite a.t (ite (not (ite a.r true a.o)) a.ai a.p) a.p))\n   (= a.aj\n   (= a.al\n    (ite a.s (ite (or (not a.ag)) true (ite a.t (ite (not (ite a.r true a.o)) false true) a.ae))\n    (ite a.n\n     (ite (bvugt ((_ zero_extend 22) a.ab) (_ bv104 32))\n     (ite (= a.af true) false\n      (ite (= a.af true) (= ((_ extract 7 7) a.p) (_ bv1 1))\n      (ite (= a.af false) (= ((_ extract 6 6) a.p) (_ bv1 1))\n       (ite (= a.af true) (= ((_ extract 5 5) a.p) (_ bv1 1))\n       (ite (= a.af false) (= ((_ extract 4 4) a.p) (_ bv1 1))\n        (ite (= a.af true) (= ((_ extract 3 3) a.p) (_ bv1 1))\n        (ite (= a.af false) (= ((_ extract 2 2) a.p) (_ bv1 1))\n         (ite (= a.af true) (= ((_ extract 1 1) a.p) (_ bv1 1))\n         (ite (= a.af false) (= ((_ extract 0 0) a.p) (_ bv1 1))\n          (ite (= a.af false) true true)))))))))) true) true))\n    (= a.ac a.e a.ad) a.f (= a.d a.ah))))))))\n(check-sat-using bv)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/tactic/ufbv/ufbv_rewriter.cpp\nLine: 689\nrewrite(np)==np\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: f447292\n",
    "priority": 1
  },
  "468": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(set-logic QF_FD)\r\n(set-option :sat.xor.solver true)\r\n(set-option :parallel.enable true)\r\n(set-option :sat.prob_search true)\r\n(declare-fun a () Int)\r\n(assert (> a 0))\r\n(check-sat-using qffd)\r\n```\r\nZ3  throws out an assertion violation:\r\n```\r\n[557] % z3 small.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[558] % \r\n[558] % cat small.smt2\r\n(set-logic QF_FD)\r\n(set-option :sat.xor.solver true)\r\n(set-option :parallel.enable true)\r\n(set-option :sat.prob_search true)\r\n(declare-fun a () Int)\r\n(assert (> a 0))\r\n(check-sat-using qffd)\r\n[559] %\r\n```\r\n Changing (assert (> a 0)) to (assert (= a 0)) leads to different assertion violations:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/tactic/fd_solver/bounded_int2bv_solver.cpp\r\nLine: 252\r\nis_uninterp_const(e)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: f447292\r\n",
    "priority": 1
  },
  "469": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :model_validate true)\n(declare-fun a () Real)\n(assert (= a 1))\n(check-sat-using (then qffd smt))\n```\nZ3 parallel.enable=true gives an invalid model:\n```\n[568] % z3 small.smt2\nsat\n[569] % z3 parallel.enable=true small.smt2\nfailed to verify: (= a 1.0)\nevaluated to false\n(params override_incremental true keep_cardinality_constraints true pb.solver solver xor_solver false inprocess.max 2 restart.max 5000 lookahead_simplify true retain_blocked_clauses false max_conflicts 4294967295)\n(= a 1.0) |-> 0\nsat\n(error \"line 4 column 32: an invalid model was generated\")\n[570] % \n[570] % cat small.smt2\n(set-option :model_validate true)\n(declare-fun a () Real)\n(assert (= a 1))\n(check-sat-using (then qffd smt))\n[571] %\n```\n\nOS: Ubuntu 18.04\nCommit: f447292\n",
    "priority": 1
  },
  "470": {
    "body": "Related issue: #3722\r\n```\r\n[632] % z3 small.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/util/map.h\r\nLine: 157\r\ne\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[633] % \r\n[633] % cat small.smt2\r\n(set-option :smt.threads 2)\r\n(set-option :trace true)\r\n(declare-datatypes ((Nat 0)) ((zero)))\r\n(declare-datatypes ((Lst 0)) (((cons (head Nat) (tail Lst)) nil)))\r\n(declare-fun less (Nat Nat) Bool)\r\n(declare-fun insort (Nat Lst) Lst)\r\n(declare-fun sort (Lst) Lst)\r\n(assert (forall ((i Nat)) (= (insort i nil) (cons i nil))))\r\n(assert (forall ((i Nat) (x Nat) (y Lst)) (= (insort i (cons x y)) (ite (less i x) (cons i (cons x y)) (cons i y)))))\r\n(assert (forall ((x Nat) (y Lst)) (= (sort (cons x y)) (insort x (sort y)))))\r\n(check-sat)\r\n[634] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: a119953\r\n",
    "priority": 0
  },
  "471": {
    "body": "\n```\n[598] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/qe/qe_mbp.cpp\nLine: 215\nm.is_true(val) || m.is_false(val)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[599] % \n[599] % cat small.smt2\n(set-option :model_evaluator.array_equalities false)\n(declare-fun a () (Array Bool Bool))\n(declare-fun b () (Array Bool Bool))\n(assert (select a (= a b)))\n(check-sat-using qe2)\n[600] %\n```\n\nOS: Ubuntu 18.04\nCommit: c431a10\n",
    "priority": 1
  },
  "472": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :smt.threads 10) \n(declare-fun e () Real) \n(declare-fun c () Real) \n(declare-fun a () Real) \n(declare-fun b () Real)  \n(assert (> (+   b   (* (- 7) e)) 30)) \n(assert (>= (+ (* (- 3) a) (* e (- 20) e)) 0)) \n(assert (not (<= (+ (* 45 c) (mod 8 a)) 5)))    \n(assert (<= (+ (* 43 c) (* 6 b) (* 4 c)) a))  \n(assert (not (< (+ (* (- 34) e)) 5))) \n(assert (not (>= 0 (+  (* (- 5) c)) 1))) \n(check-sat)      \n```\nZ3  throws out an assertion violation:\n```\n[78] % ./z3/build/z3 small.smt2 \nunknown\n[79] % ./z3/build/z3 small.smt2\nunknown\n[79] % ./z3/build/z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/smt/theory_arith_inv.h\nLine: 198\n!above_upper(v)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n^[[A\nINVALID COMMAND\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\nINVALID COMMAND\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n[79] % ./z3/build/z3 small.smt2\nunknown\n[79] % ./z3/build/z3 small.smt2\nunknown\n[79] % ./z3/build/z3 small.smt2\nunknown\n[79] % ./z3/build/z3 small.smt2\nunknown\n[79] % ./z3/build/z3 small.smt2\nunknown\n[79] % ./z3/build/z3 small.smt2\nunknown\n[79] % ./z3/build/z3 small.smt2\nunknown\n[79] % ./z3/build/z3 small.smt2\nunknown\n[79] % ./z3/build/z3 small.smt2\nunknown\n[79] % ./z3/build/z3 small.smt2\nunknown\n[79] % ./z3/build/z3 small.smt2\nunknown\n[79] % ./z3/build/z3 small.smt2\nunknown\n[79] % ./z3/build/z3 small.smt2\nunknown\n[79] % ./z3/build/z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/smt/theory_arith_inv.h\nLine: 198\n!above_upper(v)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\nA\n[79] % cat small.smt2 \n(set-option :smt.threads 10) \n(declare-fun e () Real) \n(declare-fun c () Real) \n(declare-fun a () Real) \n(declare-fun b () Real)  \n(assert (> (+   b   (* (- 7) e)) 30)) \n(assert (>= (+ (* (- 3) a) (* e (- 20) e)) 0)) \n(assert (not (<= (+ (* 45 c) (mod 8 a)) 5)))    \n(assert (<= (+ (* 43 c) (* 6 b) (* 4 c)) a))  \n(assert (not (< (+ (* (- 34) e)) 5))) \n(assert (not (>= 0 (+  (* (- 5) c)) 1))) \n(check-sat)\n```\n\nOS: Ubuntu 18.04\nCommit: c431a10\n",
    "priority": 0
  },
  "473": {
    "body": "```\r\n[543] % z3 small.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/ast/rewriter/rewriter_def.h\r\nLine: 50\r\nv->get_sort() == m().get_sort(r)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[544] % \r\n[544] % cat small.smt2\r\n(set-option :smt.quasi_macros true)\r\n(declare-sort a)\r\n(declare-sort b)\r\n(declare-sort c)\r\n(declare-fun d (c a) b)\r\n(declare-fun k () c)\r\n(declare-fun i () c)\r\n(declare-fun e (b) a)\r\n(declare-fun f (b) a)\r\n(declare-fun j (b b) Bool)\r\n(assert (forall ((g a)) (let ((h (d i g))) (j (d i (f (d k (e h)))) h))))\r\n(check-sat)\r\n[545] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 57d430b\r\n",
    "priority": 1
  },
  "474": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :sat.prob_search true) \n(set-option :sat.xor.solver true) \n(set-option :parallel.enable true) \n(declare-fun x0 () Bool) \n(declare-fun x3 () Bool) \n(declare-fun x4 () Bool) \n(declare-fun x6 () Bool) \n(declare-fun x8 () Bool) \n(declare-fun x9 () Bool) \n(assert (not (and  (or x9 x8) (or x9 x3 x8)))) \n(assert (or (not x6) (not (or x0 x4))))  \n(check-sat)     \n```\nZ3  throws out a segmentation fault:\n```\n[75] % z3/build/z3 small.smt2 \n[1]    101024 segmentation fault  z3/build/z3 small.smt2\n[76] % cat small.smt2 \n(set-option :sat.prob_search true) \n(set-option :sat.xor.solver true) \n(set-option :parallel.enable true) \n(declare-fun x0 () Bool) \n(declare-fun x3 () Bool) \n(declare-fun x4 () Bool) \n(declare-fun x6 () Bool) \n(declare-fun x8 () Bool) \n(declare-fun x9 () Bool) \n(assert (not (and  (or x9 x8) (or x9 x3 x8)))) \n(assert (or (not x6) (not (or x0 x4))))  \n(check-sat)            \n[77] % \n```\n\nOS: Ubuntu 18.04\nCommit: 57d430b\n",
    "priority": 1
  },
  "475": {
    "body": "\n```\n[588] % z3 small.smt2\nsat\nASSERTION VIOLATION\nFile: ../src/ast/seq_decl_plugin.cpp\nLine: 284\noffset >= 0\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[589] % \n[589] % cat small.smt2\n(set-option :model_validate true)\n(set-option :smt.arith.random_initial_value true)\n(set-option :rewriter.eq2ineq true)\n(declare-fun a () Int)\n(assert (distinct (str.indexof \"\" \"\" a) 0))\n(check-sat)\n[590] %\n```\n\nOS: Ubuntu 18.04\nCommit: b686bb6\n",
    "priority": 1
  },
  "476": {
    "body": "```\r\n[601] % z3 small.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.cpp\r\nLine: 3101\r\nis_or(f1)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[602] % \r\n[602] % cat small.smt2\r\n(set-option :proof true)\r\n(set-option :smt.clause_proof true)\r\n(declare-fun P (Int) Bool)\r\n(assert (forall ((a Int)) (P a)))\r\n(assert (forall ((b Int)) (or (P b) (P (+ 2 b)))))\r\n(check-sat)\r\n[603] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: b686bb6\r\n",
    "priority": 1
  },
  "477": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :smt.arith.reflect false)\n(set-option :rewriter.flat false) \n(declare-fun a () Real) \n(declare-fun b () Real) \n(assert (< a (* (* a b) 7) (mod 0 0))) \n(check-sat)            \n\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/smt/theory_arith.h\nLine: 534\nget_context().e_internalized(v)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: b686bb6\n",
    "priority": 1
  },
  "478": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :proof true) \n(declare-fun a (Int Int Real) Real) \n(assert (= 0 0)) \n(assert (forall ((?b Real)) (= (a 0 0 ?b) 0.0))) \n(check-sat-using ufbv-rewriter)\n\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/tactic/goal.cpp\nLine: 258\nf == m().get_fact(pr)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: b686bb6\n",
    "priority": 1
  },
  "479": {
    "body": "\nRelated closed issue: #3637\n```\n[671] % z3 smt.arith.solver=6 small.smt2\nASSERTION VIOLATION\nFile: ../src/math/lp/nla_basics_lemmas.cpp\nLine: 262\n!c().check_monic(c().emons()[v])\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[672] % \n[672] % cat small.smt2\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(declare-fun Jsnkj_new () Real)\n(declare-fun d () Real)\n(declare-fun t () Real)\n(declare-fun e () Real)\n(declare-fun f () Real)\n(declare-fun h () Real)\n(declare-fun g () Real)\n(declare-fun i () Real)\n(declare-fun j () Real)\n(declare-fun l () Real)\n(declare-fun k () Real)\n(declare-fun m () Real)\n(declare-fun n () Real)\n(declare-fun o () Real)\n(declare-fun p () Real)\n(declare-fun q () Real)\n(declare-fun r () Real)\n(declare-fun t17uscore0dollarskuscore1_shifted () Real)\n(declare-fun s () Real)\n(declare-fun v () Real)\n(assert\n (not\n (=>\n  (and\n  (=> (<= 0.0 (- d k) t17uscore0dollarskuscore1_shifted) (and (<= 0.0 (* (- Jsnkj_new l) (- d k))) (<= m n 0 (- b i))))\n  (< (+ (+ g (/ 0 (* 2.0 (- Jsnkj_new l)))) (* (+ (- (- j) (- Jsnkj_new l)) 1.0) (+ (* (* (- c j) (/ 1 2)) (* (- b i)) (- t m))))) (- f o))\n  (<= 0.0 (- t m))\n  (<= 0 (/ 81 e n))\n  (< 0.0 (- Jsnkj_new l))\n  (>= 0.0 c)\n  (< 0.0 (- e n))\n  (< 0.0 (- b i)))\n  (< (- f o)\n  (* (/ 1 2) (+ (* t17uscore0dollarskuscore1_shifted t17uscore0dollarskuscore1_shifted) (* t17uscore0dollarskuscore1_shifted (- t m)))))\n  (< (+ (+ (* (- 1.0) (- Jsnkj_new l) t17uscore0dollarskuscore1_shifted t17uscore0dollarskuscore1_shifted)\n     (* t17uscore0dollarskuscore1_shifted (- t m)) g)\n    (/ (* (+ (* l t17uscore0dollarskuscore1_shifted) (- t m))\n      (+ (* (* (- 1.0) (- Jsnkj_new l)) t17uscore0dollarskuscore1_shifted) (- t m)))\n    (* 2.0 (- Jsnkj_new l)))) 0))))\n(assert (= a (mod h p)))\n(assert (= c (+ j q r m v)))\n(assert (= e (+ n s)))\n(check-sat)\n[673] %\n```\n\nOS: Ubuntu 18.04\nCommit: b686bb6\n",
    "priority": 1
  },
  "480": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun HTSab_new () Real) \n(declare-fun ECxis_new () Real )  \n(declare-fun a () Real) \n(declare-fun b () Real) \n(declare-fun UAfuP_new () Real) \n(declare-fun c () Real) \n(declare-fun d () Real) \n(declare-fun Jlidu_new () Real) \n(declare-fun x () Real) \n(declare-fun e () Real) \n(declare-fun ehbTa_new () Real) \n(declare-fun f () Real) \n(declare-fun y () Real) \n(declare-fun CLPEA_new () Real) \n(declare-fun g () Real) \n(declare-fun h () Real) \n(declare-fun i () Real) \n(declare-fun j () Real) \n(declare-fun t1428uscore0 () Real) \n(declare-fun B () Real) \n(declare-fun v2 () Real) \n(declare-fun k () Real) \n(declare-fun l () Real) \n(declare-fun I2 () Real) \n(declare-fun m () Real) \n(declare-fun V () Real) \n(declare-fun n () Real) \n(declare-fun o () Real) \n(declare-fun aa () Real) \n(declare-fun z () Real) \n(declare-fun A_shifted () Real) \n(declare-fun p () Real) \n(declare-fun q () Real) \n(declare-fun r () Real) \n(declare-fun v_shifted () Real) \n(declare-fun s () Real) \n(declare-fun t35uscore0dollarskuscore1_shifted () Real) \n(declare-fun vuscore2dollarskuscore29_shifted () Real) \n(declare-fun t () Real) \n(declare-fun ab () Real) \n(declare-fun u () Real) \n(declare-fun ac () Real) \n(assert (not \n(exists ((v Real)) (=> (xor (and (or (and (= j V (- f t)) (distinct (- y t) 0.0) (= (- y t) 2.0 (- d v_shifted)) (< (- (- x) (/\n(* (- (- B))))) 0) (= (- Jlidu_new vuscore2dollarskuscore29_shifted) 2.0) (< (+ (/\n v2 )) (- ehbTa_new A_shifted)) (< 0.0 B)) (<= 0.0 (- HTSab_new (- b B)))) (<= (- HTSab_new (- 118 b B)) V) (<= 0.0 v2 V i) (< 0.0 V)) (< 0.0 (- CLPEA_new v_shifted))) (>= 0.0 (- a t)) (=> (xor (<= 0.0 v) (<= v (- a t))) (and (or (<= 0.0 j) (<= j V)) (<= 0.0 (+ (* (* (- 1.0) B) v) k) (+ (* (* (- 1.0) B) v) k) V) (<= (mod v 0.0) (- CLPEA_new v_shifted)))) (= (- ECxis_new ) 2.0))))) \n(assert (not \n(exists ((w Real)) (=> (and (or (and (xor (and (or ( and (and (=> (>= 0.0 r (/ 164 UAfuP_new v2)) (and (and (<= 0.0 (+ (* r)  I2 )) (<= (+ (* A_shifted r) (- I2)) s)) (<= r (- f n)))) (< 0.0 (- UAfuP_new v2))) (distinct z ab) (= u 1.0)) (<= 0.0 (- Jlidu_new I2))) (<= (* 230 Jlidu_new I2) s) (< z ab) (= q 2.0) (< z ac) (< 0.0 (- HTSab_new g)) (<= 0.0 (- d l))) (<= (- 30 d l) s)) (<= 0.0 A_shifted)) (< 0.0 s)) (< 0.0 (- f n))) (> (+ (* A_shifted (- UAfuP_new v2)) (- Jlidu_new I2)) s))))) \n(assert (= HTSab_new (+ g p))) \n(assert (= ECxis_new (+ h))) \n(assert (= a (+ t1428uscore0 t))) \n(assert (= b (mod B p))) \n(assert (= UAfuP_new (div v2 t35uscore0dollarskuscore1_shifted))) \n(assert (distinct c (+ k A_shifted))) \n(assert (= d (+ l v_shifted))) \n(assert (= Jlidu_new (+ I2 vuscore2dollarskuscore29_shifted))) \n(assert (distinct e (+ m t35uscore0dollarskuscore1_shifted))) \n(assert (= f (+ n t))) \n(assert (= y (div o t))) \n(assert (= CLPEA_new (div aa v_shifted))) \n(check-sat)\n```\nZ3 smt.arith.solver=6 throws out an assertion violation:\n```\n[650] % z3 smt.arith.solver=6 small.smt2\nASSERTION VIOLATION\nFile: ../src/smt/theory_lra.cpp\nLine: 989\nlp::tv::is_term(vi)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: b686bb6\n",
    "priority": 1
  },
  "481": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :rewriter.arith_ineq_lhs true)\n(set-option :nlsat.shuffle_vars true)\n(set-option :rewriter.elim_and true)\n(set-option :rewriter.sort_sums true)\n(set-option :algebraic.factor false)\n(set-option :rewriter.eq2ineq true)\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(declare-fun d () Real)\n(declare-fun aa () Real)\n(declare-fun e () Real)\n(declare-fun f () Real)\n(declare-fun ab () Real)\n(declare-fun ac () Real)\n(declare-fun ad () Real)\n(declare-fun g () Real)\n(declare-fun h () Real)\n(declare-fun i () Real)\n(declare-fun j () Real)\n(declare-fun k () Real)\n(declare-fun l () Real)\n(declare-fun m () Real)\n(declare-fun n () Real)\n(declare-fun ae () Real)\n(declare-fun o () Real)\n(declare-fun af () Real)\n(declare-fun p () Real)\n(declare-fun q () Real)\n(declare-fun r () Real)\n(declare-fun ag () Real)\n(declare-fun s () Real)\n(declare-fun ah () Real)\n(declare-fun t () Real)\n(declare-fun ai () Real)\n(declare-fun u () Real)\n(declare-fun v () Real)\n(declare-fun w () Real)\n(declare-fun x () Real)\n(declare-fun y () Real)\n(declare-fun z () Real)\n(declare-fun aj () Real)\n(declare-fun ak () Real)\n(declare-fun al () Real)\n(declare-fun vuscore2dollarskuscore97_shifted () Real)\n(declare-fun am () Real)\n(declare-fun an () Real)\n(declare-fun ao () Real)\n(declare-fun ap () Real)\n(declare-fun aq () Real)\n(declare-fun ar () Real)\n(declare-fun v_shifted () Real)\n(declare-fun V_shifted () Real)\n(declare-fun I1uscore2dollarskuscore89_shifted () Real)\n(declare-fun ep_shifted () Real)\n(declare-fun ts7uscore2_shifted () Real)\n(declare-fun x_shifted () Real)\n(assert\n (exists ((af Real))\n (=\n  (and\n  (< (+ (/ (* (- a an)) (* (- f ar))) w (/ ab 0)) af)\n  (xor true (<= ts7uscore2_shifted aq 0.0 (+ (* ao ts7uscore2_shifted) (- d q))) (= 0 ah))\n  (< (* (+ (+ (* (- d q) (+ (* (* (- n ak)) (- h v))))) (* (* ao (- h v)) (+ (* (- h v)) (* (- d q)))))) 0.0)\n  (<= v_shifted 0.0 ao)\n  (< 0.0 (- h v)))\n  (< (+ (/ (* (+ (* ao aq) (- d q)) (+ (* ao aq) (- d q))) (* (- n ak)))) aj))))\n(assert (= o b af c p vuscore2dollarskuscore97_shifted aa r x_shifted e ag s ac t ad ai g u i (+ w ts7uscore2_shifted)))\n(assert (= j x V_shifted k y I1uscore2dollarskuscore89_shifted l z ep_shifted m aj n (+ ak ap) ae al am))\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/polynomial/algebraic_numbers.cpp\nLine: 389\nsl != sign_zero\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: b686bb6\n",
    "priority": 0
  },
  "482": {
    "body": "\n```\n[595] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/math/polynomial/algebraic_numbers.cpp\nLine: 2430\n!nested_call\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[596] % \n[596] % cat small.smt2\n(set-option :algebraic.factor false)\n(set-option :nlsat.reorder false)\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(declare-fun e () Real)\n(assert (exists ((d Real)) (= (= d 0.0) (= b 2.0))))\n(assert (< (* (- a b) e e) (/ (* (+ b c) (+ (* (- a b) e) c)) a)))\n(check-sat)\n[597] %\n```\n\nOS: Ubuntu 18.04\nCommit: b686bb6\n",
    "priority": 1
  },
  "483": {
    "body": "```\r\n[700] % z3 small.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/tactic/tactical.cpp\r\nLine: 113\r\nr1_size > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[701] % \r\n[701] % cat small.smt2\r\n(set-option :sat.local_search true)\r\n(set-option :ackermannization.sat_backend true)\r\n(set-option :sat.xor.solver true)\r\n(set-option :ackermannization.inc_sat_backend true)\r\n(declare-fun a () Bool)\r\n(declare-fun b () Bool)\r\n(assert (xor (xor (xor a (xor a b))) b))\r\n(check-sat-using (then qfufbv_ackr simplify))\r\n[702] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: b686bb6\r\n",
    "priority": 1
  },
  "484": {
    "body": "```\r\n[534] % z3 small.smt2\r\nFailed to verify: a.is_numeral(val, r)\r\nASSERTION VIOLATION\r\nFile: ../src/qe/qe_arith.cpp\r\nLine: 567\r\nUNREACHABLE CODE WAS REACHED.\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[535] % \r\n[535] % cat small.smt2\r\n(set-option :model_evaluator.array_equalities false)\r\n(declare-fun a ((Array Int (Array Int Real))) (Array Int (Array Int Real)))\r\n(declare-fun b ((Array Int (Array Int Real)) (Array Int (Array Int Real))) (Array Int (Array Int Real)))\r\n(declare-fun c ((Array Int (Array Int Real)) (Array Int (Array Int Real))) (Array Int (Array Int Real)))\r\n(assert\r\n (forall ((d Int)\r\n     (i Int)\r\n     (e (Array Int (Array Int Real)))\r\n     (f (Array Int (Array Int Real)))\r\n     (j (Array Int (Array Int Real)))\r\n     (k (Array Int (Array Int Real)))\r\n     (l (Array Int (Array Int Real)))\r\n     (g (Array Int (Array Int Real))))\r\n (let ((h (c e (b f (b (c (b j (b k (a j))) (b l (b g (a l)))) (a f))))))\r\n  (distinct (select (h d) i) (select (h i) d )))))\r\n(check-sat-using qe_rec)\r\n[536] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: b686bb6\r\n",
    "priority": 0
  },
  "485": {
    "body": "```\r\n[578] % z3 small.smt2\r\nSegmentation fault\r\n[579] % \r\n[579] % cat small.smt2\r\n(set-option :rewriter.arith_lhs true)\r\n(set-option :rewriter.sort_sums true)\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(assert (> (+ (* 2 a) (* (- 2) b)) 0))\r\n(check-sat-using ufbv)\r\n[580] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: b686bb6\r\n",
    "priority": 1
  },
  "486": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a ((Array Int (Array Int Int)) (Array Int (Array Int Int))) (Array Int (Array Int Int)))\n(assert (forall ((b Int) (c Int) (d (Array Int (Array Int Int))) (e (Array Int (Array Int Int))))\n     (let ((f (a d e))) (= 0 (select (f c) b)))))\n(check-sat-using qe_rec)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/qe/qe_arith.cpp\nLine: 68\nm.canceled() || m.is_true(val)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: b686bb6\n",
    "priority": 0
  },
  "487": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :sat.prob_search true)\n(declare-fun a () Bool)\n(declare-fun b () Bool)\n(assert a)\n(assert b)\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/util/old_vector.h\nLine: 370\nidx < size()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: b686bb6\n",
    "priority": 1
  },
  "488": {
    "body": "```\r\n[766] % z3 small.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/tactic/goal.cpp\r\nLine: 256\r\n!m().proofs_enabled() || pr\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[767] % \r\n[767] % cat small.smt2\r\n(set-option :proof true)\r\n(declare-fun a (Int Int) Int)\r\n(assert (forall ((b Int)) (= (a b 0) 0)))\r\n(check-sat-using ufbv)\r\n[768] %\r\n```\r\nRecent closed bugs #3634, #3633, #3554 crashed at the same location. \r\nOS: Ubuntu 18.04\r\nCommit: 0dc5bad\r\n",
    "priority": 1
  },
  "489": {
    "body": "```\r\n[540] % z3 model_validate=true small.smt2\r\nsat\r\n(error \"line 4 column 21: an invalid model was generated\")\r\n[541] % \r\n[541] % cat small.smt2\r\n(declare-fun a (Int) Bool)\r\n(assert (forall ((b Int)) (a (div 2 b))))\r\n(assert (a 1))\r\n(check-sat-using ufbv)\r\n[542] %\r\n```\r\nZ3 gave the following clearly incorrect model\r\n```\r\n(model \r\n (define-fun a ((x!0 Int)) Bool\r\n  (= x!0 (div 2 x!0)))\r\n)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 0dc5bad\r\n",
    "priority": 1
  },
  "490": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () (Seq Int)) \n(declare-fun b () Int) \n(declare-fun c () Int) \n(define-fun d () Int b) \n(define-fun j () Bool (distinct c d)) \n(define-fun e () Bool j) \n(define-fun f () Bool (not e)) \n(define-fun g () (Seq Int) (seq.unit c)) \n(define-fun h () Int (seq.indexof a g)) \n(define-fun i () Bool (> h b)) \n(define-fun k () Bool (or f i)) \n(assert k) \n(check-sat)\n```\nZ3  gives an invalid model:\n```\n$ ./z3/build/z3 model_validate=true small.smt2 \nsat\n(error \"line 13 column 10: an invalid model was generated\")\n$ cat small.smt2 \n(declare-fun a () (Seq Int)) \n(declare-fun b () Int) \n(declare-fun c () Int) \n(define-fun d () Int b) \n(define-fun j () Bool (distinct c d)) \n(define-fun e () Bool j) \n(define-fun f () Bool (not e)) \n(define-fun g () (Seq Int) (seq.unit c)) \n(define-fun h () Int (seq.indexof a g)) \n(define-fun i () Bool (> h b)) \n(define-fun k () Bool (or f i)) \n(assert k) \n(check-sat)\n```\n\nOS: Ubuntu 18.04\nCommit: 65b2037\n",
    "priority": 0
  },
  "491": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :proof true) \n(define-fun a () Int 7) \n(declare-fun b () Int) \n(declare-fun c () Int) \n(define-fun d () Bool (<= b a )) \n(define-fun e () Bool d ) \n(assert e) \n(maximize c) \n(check-sat)     \n\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/tactic/arith/eq2bv_tactic.cpp\nLine: 311\nm_bounds.has_upper(e1)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 65b2037\n",
    "priority": 1
  },
  "492": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :smt.seq.validate true)  \n(set-option :smt.threads 3) \n(set-option :smt.phase_selection 5) \n(declare-fun s0 () (Seq Int)) \n(declare-fun s1 () Int) \n(declare-fun a () Int) \n(define-fun s7 () Int 172) \n(define-fun s8 () Bool (>= s1 s7)) \n(define-fun b () Bool s8) \n(define-fun c () Int (seq.nth s0 s1)) \n(define-fun d () Bool (= a c)) \n(define-fun s12 () Bool (or b d)) \n(define-fun s13 () Bool s12) \n(define-fun s14 () (Seq Int) (seq.unit a)) \n(define-fun s15 () Int (seq.indexof s0 s14)) \n(define-fun e () Bool (<= s15 s1)) \n(define-fun s17 () Bool (xor s13 e)) \n(assert s17)  \n(check-sat-using  smt)     \n```\nZ3  throws out a segmentation fault:\n```\n$ ./z3/build/z3 small.smt2 \nl_undef\n\n(not (= (seq.prefix.y (seq.unit a) s0) (as seq.empty (Seq Int))))\n(let ((a!1 (seq.++ (seq.prefix.x (seq.unit a) s0)\n                   (seq.unit (seq.prefix.c (seq.unit a) s0))\n                   (seq.prefix.y (seq.unit a) s0))))\n  (= (seq.unit a) a!1))\nSegmentation fault\n$ ./z3/build/z3 small.smt2 \nsat\n$ ./z3/build/z3 small.smt2 \nsat\n$ cat small.smt2 \n(set-option :smt.seq.validate true)  \n(set-option :smt.threads 3) \n(set-option :smt.phase_selection 5) \n(declare-fun s0 () (Seq Int)) \n(declare-fun s1 () Int) \n(declare-fun a () Int) \n(define-fun s7 () Int 172) \n(define-fun s8 () Bool (>= s1 s7)) \n(define-fun b () Bool s8) \n(define-fun c () Int (seq.nth s0 s1)) \n(define-fun d () Bool (= a c)) \n(define-fun s12 () Bool (or b d)) \n(define-fun s13 () Bool s12) \n(define-fun s14 () (Seq Int) (seq.unit a)) \n(define-fun s15 () Int (seq.indexof s0 s14)) \n(define-fun e () Bool (<= s15 s1)) \n(define-fun s17 () Bool (xor s13 e)) \n(assert s17)  \n(check-sat-using  smt) \n```\n\nOS: Ubuntu 18.04\nCommit: 65b2037\n",
    "priority": 0
  },
  "493": {
    "body": "Hi,\r\nFor this formula\r\n```\r\n(set-option :sat.cut true) \r\n(set-option :rewriter.arith_ineq_lhs true) \r\n(set-option :sat.drat.check_unsat true) \r\n(set-option :sat.xor.solver true) \r\n(set-option :rewriter.local_ctx true) \r\n(set-option :rewriter.eq2ineq true) \r\n(define-fun a () Int 191) \r\n(define-fun b () Int 3) \r\n(define-fun c () Int 6) \r\n(define-fun j () Int 246) \r\n(declare-fun d () Int) \r\n(declare-fun k () Int) \r\n(define-fun l () Bool (<= d a)) \r\n(define-fun e () Bool (>= d b)) \r\n(define-fun f () Bool (distinct d c)) \r\n(define-fun m () Bool (distinct d j)) \r\n(define-fun g () Bool (or f m)) \r\n(define-fun h () Bool (and e g)) \r\n(define-fun i () Bool (or l h)) \r\n(assert i) \r\n(assert (= d k)) \r\n(check-sat-using qfnia)         \r\n```\r\nz3 throws out a verification failed:\r\n```\r\n$ z3/build/z3 small.smt2 \r\nVerification of 0 75 -170 -170 failed\r\n^C^C\r\n$ cat small.smt2 \r\n(set-option :sat.cut true) \r\n(set-option :rewriter.arith_ineq_lhs true) \r\n(set-option :sat.drat.check_unsat true) \r\n(set-option :sat.xor.solver true) \r\n(set-option :rewriter.local_ctx true) \r\n(set-option :rewriter.eq2ineq true) \r\n(define-fun a () Int 191) \r\n(define-fun b () Int 3) \r\n(define-fun c () Int 6) \r\n(define-fun j () Int 246) \r\n(declare-fun d () Int) \r\n(declare-fun k () Int) \r\n(define-fun l () Bool (<= d a)) \r\n(define-fun e () Bool (>= d b)) \r\n(define-fun f () Bool (distinct d c)) \r\n(define-fun m () Bool (distinct d j)) \r\n(define-fun g () Bool (or f m)) \r\n(define-fun h () Bool (and e g)) \r\n(define-fun i () Bool (or l h)) \r\n(assert i) \r\n(assert (= d k)) \r\n(check-sat-using qfnia)         \r\n(base) \r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 65b2037\r\n",
    "priority": 0
  },
  "494": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :opt.dump_models true) \n(set-option :sat.ddfw_search true) \n(set-option :sat.xor.solver true) \n(define-fun s1 () Int 67) \n(define-fun s3 () Int 5) \n(declare-fun s0 () Int) \n(declare-fun s13 () Int) \n(define-fun s2 () Bool (<= s0 s1)) \n(define-fun s4 () Bool (>= s0 s3)) \n(define-fun s10 () Bool s4) \n(define-fun s11 () Bool (and s2 s10)) \n(assert s11) \n(assert (= s0 s13)) \n(maximize s13) \n(check-sat) \n```\nZ3  throws out a segmentation fault:\n```\n$ ./z3/build/z3 small.smt2 \nSegmentation fault\n$ cat small.smt2 \n(set-option :opt.dump_models true) \n(set-option :sat.ddfw_search true) \n(set-option :sat.xor.solver true) \n(define-fun s1 () Int 67) \n(define-fun s3 () Int 5) \n(declare-fun s0 () Int) \n(declare-fun s13 () Int) \n(define-fun s2 () Bool (<= s0 s1)) \n(define-fun s4 () Bool (>= s0 s3)) \n(define-fun s10 () Bool s4) \n(define-fun s11 () Bool (and s2 s10)) \n(assert s11) \n(assert (= s0 s13)) \n(maximize s13) \n(check-sat)\n```\n\nOS: Ubuntu 18.04\nCommit: 65b2037\n",
    "priority": 1
  },
  "495": {
    "body": "\n```\n[794] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/util/old_vector.h\nLine: 375\nidx < size()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[795] % \n[795] % cat small.smt2\n(set-option :unsat_core true)\n(declare-fun a () Bool)\n(assert (or a a))\n(check-sat-using ufbv-rewriter)\n[796] %\n```\n\nOS: Ubuntu 18.04\nCommit: 65b2037\n",
    "priority": 1
  },
  "496": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :sat.drat.check_unsat true)\n(assert (not (< 0)))\n(check-sat-using sat)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/sat/sat_drat.cpp\nLine: 673\nm_inconsistent\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 65b2037\n",
    "priority": 0
  },
  "497": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(set-option :proof true)    \r\n(assert (= true true)) \r\n(check-sat-using unit-subsume-simplify)     \r\n```\r\nZ3  throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/tactic/goal.cpp\r\nLine: 306\r\n!m().proofs_enabled()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 65b2037\r\n",
    "priority": 1
  },
  "498": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :smt.clause_proof true)\n(set-option :model_validate true)\n(declare-fun a (Real) Bool)\n(declare-fun b (Real) Bool)\n(assert (= a b))\n(assert (b 0))\n(check-sat-using (then uflra smt))\n```\nZ3  gives an invalid model:\n```\n[607] % z3 small.smt2\nsat\n(error \"line 7 column 33: an invalid model was generated\")\n[608] % \n[608] % cat small.smt2\n(set-option :smt.clause_proof true)\n(set-option :model_validate true)\n(declare-fun a (Real) Bool)\n(declare-fun b (Real) Bool)\n(assert (= a b))\n(assert (b 0))\n(check-sat-using (then uflra smt))\n[609] %\n```\n\nOS: Ubuntu 18.04\nCommit: d8e00bc\n",
    "priority": 1
  },
  "499": {
    "body": "\n```\n% z3-43e7242 bug.smt2\nfailed to verify: (= a (= \"\" b))\nevaluated to false\n(params override_incremental true keep_cardinality_constraints true pb.solver solver xor_solver false inprocess.max 2 restart.max 5000 lookahead_simplify true retain_blocked_clauses false max_conflicts 4294967295)\na |-> 0\n(= \"\" b) |-> 1\nsat\n(error \"line 6 column 79: an invalid model was generated\")\n% cat bug.smt2\n(set-option :model_validate true)  \n(set-option :parallel.enable true)  \n(declare-fun a () Bool)  \n(declare-fun b () String) \n(assert (= a (= \"\" b)))   \n(check-sat-using (then fix-dl-var psat bit-blast ufbv-rewriter propagate-ineqs)) \n\n\n```\nOS: Ubuntu 18.04\nCommit: ad2e6ff\n",
    "priority": 0
  },
  "500": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :trace true) \n(set-option :smt.random_seed 1)  \n(declare-fun a () Int) \n(declare-fun b () Int) \n(declare-fun c () Int) \n(declare-fun d () Int) \n(declare-fun h () Int) \n(declare-fun e () Int) \n(declare-fun f () Int)  \n(declare-fun g () Int) \n(declare-fun i () Int) \n(assert (and (or (not (<= 6 e)) (= e (+ (* (/ d i)) 2) 0)) \n(= (not (<= (+ (+ (/ a (/ b h)))) 6)) (= (+ (+ f (/ d i))) 0)) \n(= (+ (* (/ c g))) 1)))\n(check-sat)                    \n\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ast/ast.h\nLine: 491\nm_ref_count > 0\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: cfe96fe\n",
    "priority": 1
  },
  "501": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :smt.seq.validate true)   \n(set-option :smt.phase_selection 5)  \n(set-option :smt.threads 4)  \n(declare-fun a () String) \n(declare-fun g () String) \n(declare-fun b () String) \n(declare-fun c () String) \n(declare-fun d () String)  \n(declare-fun h () String) \n(declare-fun e () String)  \n(declare-fun f () String)  \n(assert (= (str.substr c 0 (str.len f)) (str.substr g 0 (str.len h)) (str.substr b 0 (str.len e )))) \n(assert (= (str.substr a 0 (str.len d)) \"\")) \n(check-sat)   \n```\nZ3  throws out a segmentation fault:\n```\n$ z3/build/z3 small.smt2 \nl_undef\n\n(let ((a!1 (str.++ (seq.unit (seq.nth d 0))\n                   (str.substr d (+ 0 1) (- (str.len d) (+ 0 1))))))\n  (not (= d a!1)))\n(let ((a!1 (str.++ (seq.unit (seq.nth d 0))\n                   (str.substr d (+ 0 1) (- (str.len d) (+ 0 1))))))\n  (= d a!1))\nSegmentation fault\n$ z3/build/z3 small.smt2 \nl_undef\n\n(not (= e \"\"))\n(let ((a!1 (str.++ (seq.unit (seq.nth e 0))\n                   (str.substr e (+ 0 1) (- (str.len e) (+ 0 1))))))\n  (not (= e a!1)))\nSegmentation fault\n$ z3/build/z3 small.smt2 \nl_undef\n\n(let ((a!1 (str.++ (seq.unit (seq.nth d 0))\n                   (str.substr d (+ 0 1) (- (str.len d) (+ 0 1))))))\n  (not (= d a!1)))\n(let ((a!1 (str.++ (seq.unit (seq.nth d 0))\n                   (str.substr d (+ 0 1) (- (str.len d) (+ 0 1))))))\n  (= d a!1))\nSegmentation fault\n$ z3/build/z3 small.smt2 \nl_undef\n\n(not (= (seq.unit (seq.nth d 0)) (str.at d 0)))\n(= (seq.unit (seq.nth d 0)) (str.at d 0))\nSegmentation fault\n$ z3/build/z3 small.smt2 \nsat\n$ z3/build/z3 small.smt2 \nl_true\n\n(let ((a!1 (str.++ (seq.unit (seq.nth h 0))\n                   (str.substr h (+ 0 1) (- (str.len h) (+ 0 1))))))\n  (not (= h a!1)))\n(let ((a!1 (str.++ (seq.unit (seq.nth h 0))\n                   (str.substr h (+ 0 1) (- (str.len h) (+ 0 1))))))\n  (= h a!1))\n\n(kernel)ASSERTION VIOLATION\nFile: ../src/smt/theory_seq.cpp\nLine: 4678\nUNREACHABLE CODE WAS REACHED.\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\nA\n$ cat small.smt2 \n(set-option :smt.seq.validate true)   \n(set-option :smt.phase_selection 5)  \n(set-option :smt.threads 4)  \n(declare-fun a () String) \n(declare-fun g () String) \n(declare-fun b () String) \n(declare-fun c () String) \n(declare-fun d () String)  \n(declare-fun h () String) \n(declare-fun e () String)  \n(declare-fun f () String)  \n(assert (= (str.substr c 0 (str.len f)) (str.substr g 0 (str.len h)) (str.substr b 0 (str.len e )))) \n(assert (= (str.substr a 0 (str.len d)) \"\")) \n(check-sat)\n```\n\nOS: Ubuntu 18.04\nCommit: cfe96fe\n",
    "priority": 0
  },
  "502": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :sat.local_search true) \n(set-option :sat.xor.solver true) \n(declare-fun x0 () Bool)\n(declare-fun x2 () Bool) \n(declare-fun x3 () Bool) \n(assert (xor (or x2 x3) (xor x3 (or x0 x3)))) \n(check-sat)       \n```\nZ3  throws out an assertion violation:\n```\nNOT IMPLEMENTED YET!\nASSERTION VIOLATION\nFile: ../src/sat/sat_local_search.cpp\nLine: 492\nUNREACHABLE CODE WAS REACHED.\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 79eb6a0\n",
    "priority": 1
  },
  "503": {
    "body": "```\r\n[542] % z3 small.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 932\r\nis_app(n)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[543] % \r\n[543] % cat small.smt2\r\n(set-option :smt.arith.nl.gb false)\r\n(set-option :trace true)\r\n(set-option :debug_ref_count true)\r\n(assert (forall ((a Int) (c Int) (b Int)) (=> (< a c) (< 0 b) (< (* a b) (* c b)))))\r\n(check-sat)\r\n[544] %\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 9be7bda\r\n",
    "priority": 1
  },
  "504": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :rewriter.eq2ineq true) \n(set-option :smt.core.extend_patterns true) \n(assert (forall ((a Int) (b Int)) (distinct b a))) \n(check-sat)             \n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/smt/smt_solver.cpp\nLine: 380\nm_name2assertion.contains(name)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 9be7bda\n",
    "priority": 1
  },
  "505": {
    "body": "\n```\n[662] % z3 small.smt2\nSegmentation fault\n[663] % \n[663] % cat small.smt2\n(set-option :sat.xor.solver true)\n(set-option :parallel.enable true)\n(set-option :sat.prob_search true)\n(declare-fun a () Bool)\n(declare-fun b () Bool)\n(declare-fun c () Bool)\n(declare-fun d () Bool)\n(declare-fun e () Bool)\n(assert (or (and d (or e c)) (and b (or c d) (or c a))))\n(check-sat)\n[664] %\n```\n\nOS: Ubuntu 18.04\nCommit: 9be7bda\n",
    "priority": 0
  },
  "506": {
    "body": "\n```\n% z3 bug.smt2\nASSERTION VIOLATION\nFile: ../src/util/old_vector.h\nLine: 375\nidx < size()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\nSegmentation fault\n% cat bug.smt2\n(set-option :sat.ddfw_search true)                             \n(declare-fun x1 () Bool) \n(assert x1) \n(check-sat)\n```\n\nOS: Ubuntu 18.04\nCommit: 9be7bda\n",
    "priority": 0
  },
  "507": {
    "body": "\n```\n% z3 bug.smt2\nFailed to verify: colors1.find(a, v2)\nASSERTION VIOLATION\nFile: ../src/tactic/core/symmetry_reduce_tactic.cpp\nLine: 238\nUNREACHABLE CODE WAS REACHED.\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\nsat\n% cat bug.smt2\n(declare-fun t2001uscore0 () Real) \n(declare-fun b () Real) \n(declare-fun c () Real) \n(declare-fun d () Real) \n(declare-fun e () Real) \n(declare-fun f() Real) \n(assert (not (exists ((ts2001uscore0 Real))  \n(= (> d (div c (/ (mod e e) (* b))))\n(= (>= 0 d) (=> (> ts2001uscore0 t2001uscore0) (<= 0 f))))))) \n(check-sat-using (then qfnra qfuf))\n```\nThe variable name `ts2001uscore0` is necessary to trigger the bug. If we remove qfuf from the formula, Z3 segfaults.\n\n\nOS: Ubuntu 18.04\nCommit: 9be7bda\n",
    "priority": 1
  },
  "508": {
    "body": "\n```\n% z3-9be7bda bug.smt2                                                           \nASSERTION VIOLATION                                                             \nFile: ../src/ast/ast.cpp                                                        \nLine: 3112                                                                      \nis_or(f1)                                                                       \n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB                    \nASSERTION VIOLATION                                                             \nFile: ../src/ast/ast.cpp                                                        \nLine: 3147                                                                      \nfound.get(i, false)                                                             \n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB                    \n% cat bug.smt2                                                                  \n(set-option :combined_solver.ignore_solver1 true)                               \n(set-option :debug_ref_count true)                                              \n(set-option :smt.arith.random_initial_value true)                               \n(set-option :proof true)                                                        \n(set-option :trace true)                                                        \n(declare-fun a () Real)                                                         \n(declare-fun b () Real)                                                         \n(declare-fun c () Real)                                                         \n(declare-fun d () Real)                                                         \n(declare-fun n () Real)                                                         \n(declare-fun e () Real)                                                         \n(declare-fun f () Real)                                                         \n(declare-fun i () Real)                                                         \n(declare-fun g () Real)                                                         \n(declare-fun h ()  Real)                                                        \n(declare-fun m () Real)                                                         \n(declare-fun j () Real)                                                         \n(declare-fun k () Real)                                                         \n(declare-fun l ()  Real)                                                        \n(declare-fun o ()  Real)                                                        \n(assert (not (= (< 0.0 j)(= l (- h))                                            \n(< 0.0 d (+ (* (- n ) b f)) (- (/ 2.0 (- c g)) (* j  m))))))                   \n(assert (= a (+ e k) (mod f o)))                                                \n(assert (= i h))                                                                \n(check-sat) \n```\nIf I comment on either one of the options individually, the solver throws a segmentation fault or a mem leak. \n\nOS: Ubuntu 18.04\nCommit: 9be7bda\n",
    "priority": 0
  },
  "509": {
    "body": "\n```\n[1375] % z3 small.smt2\nsat\nsat\n(error \"line 8 column 10: an invalid model was generated\")\n[1376] % \n[1376] % cat small.smt2\n(set-option :model_validate true)\n(set-option :parallel.enable true)\n(declare-fun a () Int)\n(declare-fun b () Int)\n(declare-fun c (Int) Int)\n(assert (distinct b (c a)))\n(check-sat)\n(check-sat)\n[1377] %\n```\nOS: Ubuntu 18.04\nCommit: 9be7bda\n",
    "priority": 1
  },
  "510": {
    "body": "```\r\n[578] % z3 bug.smt2 \r\nASSERTION VIOLATION\r\nFile: ../src/util/parray.h\r\nLine: 336\r\ni < size(r)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[579] % \r\n[579] % cat bug.smt2 \r\n(declare-fun a () Int)\r\n(declare-fun b () Int)\r\n(declare-fun c () Int)\r\n(assert (and (or (distinct a 0) (= b 0)) (distinct c 0) (not true)))\r\n(check-sat-using (then add-bounds solve-eqs))\r\n[580] %\r\n\r\n``` \r\n\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 9be7bda\r\n",
    "priority": 1
  },
  "511": {
    "body": "Hi,\r\nthe following trace shows an assertion violation in Z3. You fixed a similar issue in #3521.\r\n```\r\n% z3-9be7bda bug.smt2\r\n(error \"line 14 column 5: Wrong number of arguments (1) passed \r\nto function (declare-fun add-  assume (Proof Bool) Proof)\")\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_context.cpp\r\nLine: 2916\r\nnum_scopes > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_context.cpp\r\nLine: 2397\r\nnum_scopes > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n% cat bug.smt2\r\n(set-option :proof true) \r\n(set-option :rewriter.local_ctx true) \r\n(set-option :smt.clause_proof true) \r\n(declare-fun a () Bool) \r\n(declare-fun b () Bool) \r\n(declare-fun c () Bool) \r\n(declare-fun d () Bool) \r\n(declare-fun e () Bool) \r\n(assert (xor (not (not a)) b)) \r\n(assert (and (xor (and (not (and (or e a) d a)) (or (and (or (not e))))))   \r\n        (not (xor (not c) (or a e))))) \r\n(push) \r\n(assert (and a b)) \r\n(push)\r\n(pop)  \r\n```\r\nI could not make sense of the error in line 4. If I remove the second `(push)`the bug disappears.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 9be7bda\r\n",
    "priority": 1
  },
  "512": {
    "body": "```\r\n% z3-9be7bda bug.smt2\r\nSegmentation fault\r\n% cat bug.smt2\r\n(set-option :trace true) \r\n(declare-fun a () Real)  \r\n(assert (< (+ a) 8 a)) \r\n(check-sat-using qfnia) \r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 9be7bda\r\n",
    "priority": 0
  },
  "513": {
    "body": "Hi,\nFor this formula:\n```\n(define-sort FPN () (_ FloatingPoint 11 53))\n(declare-fun b () FPN)\n(declare-fun c () FPN)\n(declare-fun d () FPN)\n(assert (= b (fp #b1 #b00001100001 #b0100111001011111011101101111000001100101111001101110)))\n(assert (distinct c (fp #b1 #b01101101100 #b0111010000010010101100101111011100111100010001000110)))\n(assert (= d (fp #b0 #b01101101100 #b0111010000010010101100101111011100111100010001000110)))\n(assert (not (distinct (fp.sub roundNearestTiesToEven b c) d)))\n(check-sat-using (then bit-blast ctx-solver-simplify))\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/smt/theory_bv.cpp\nLine: 1865\n!bits[!is_true][i]\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 9be7bda\n",
    "priority": 1
  },
  "514": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :model_validate true)\n(set-option :smt.array.extensional false)\n(declare-fun a () (Set Int))\n(declare-fun b () (Set Int))\n(assert (distinct a b))\n(push)\n(check-sat)\n```\nZ3  gives an invalid model:\n```\n[627] % z3 small.smt2\nsat\n(error \"line 7 column 10: an invalid model was generated\")\n[628] % \n[628] % cat small.smt2\n(set-option :model_validate true)\n(set-option :smt.array.extensional false)\n(declare-fun a () (Set Int))\n(declare-fun b () (Set Int))\n(assert (distinct a b))\n(push)\n(check-sat)\n[629] %\n```\n\nOS: Ubuntu 18.04\nCommit: 9be7bda\n",
    "priority": 0
  },
  "515": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(set-option :smt.clause_proof true)\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(assert (= (< c a) (< 0 b)))\r\n(check-sat)\r\n```\r\nZ3 throws out a ast manager LEAKED:\r\n```\r\n[751] % z3 bug2.smt2 \r\nsat\r\nast_manager LEAKED: 3\r\nLeaked: id: 2147483792\r\n[752] % \r\n[752] % cat bug2.smt2 \r\n(set-option :smt.clause_proof true)\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(assert (= (< c a) (< 0 b)))\r\n(check-sat)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 9be7bda\r\n",
    "priority": 1
  },
  "516": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :proof true)\n(set-option :smt.clause_proof true)\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(assert (= (< c a) (< 0 (* (- a c) b))))\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/tactic/goal.cpp\nLine: 256\nf == m().get_fact(pr)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 9be7bda\n",
    "priority": 1
  },
  "517": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :parallel.enable true)\n(set-option :model_validate true)\n(declare-fun a (Int) Int)\n(assert (distinct 0 (a 0)))\n(check-sat-using psat)\n```\nZ3  gives an invalid model:\n```\n[600] % z3 small.smt2\nfailed to verify: (distinct 0 (a 0))\nevaluated to false\n(params override_incremental true keep_cardinality_constraints true pb.solver solver xor_solver false inprocess.max 2 restart.max 5000 lookahead_simplify true retain_blocked_clauses false max_conflicts 4294967295)\n(= 0 (a 0)) |-> 0\nsat\n(error \"line 5 column 21: an invalid model was generated\")\n[601] % \n[601] % cat small.smt2\n(set-option :parallel.enable true)\n(set-option :model_validate true)\n(declare-fun a (Int) Int)\n(assert (distinct 0 (a 0)))\n(check-sat-using psat)\n[602] %\n```\n\nOS: Ubuntu 18.04\nCommit: 9be7bda\n",
    "priority": 0
  },
  "518": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :smt.arith.reflect false)\n(set-option :rewriter.flat false)\n(set-option :proof true)\n(declare-fun a () Real)\n(declare-fun b () Real)\n(assert (< b (* (* a a) 2) b))\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/smt/theory_arith.h\nLine: 534\nget_context().e_internalized(v)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 9be7bda\n",
    "priority": 1
  },
  "519": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :trace true)\n(set-option :smt.arith.propagate_eqs false)\n(set-option :smt.arith.random_initial_value true)\n(set-option :smt.arith.eager_eq_axioms false)\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(assert (< (* c (div b (+ a 2))) a))\n(check-sat)\n```\nZ3  throws out a segmentation fault:\n```\n[505] % z3 small.smt2\nSegmentation fault\n[506] % \n[506] % cat small.smt2\n(set-option :trace true)\n(set-option :smt.arith.propagate_eqs false)\n(set-option :smt.arith.random_initial_value true)\n(set-option :smt.arith.eager_eq_axioms false)\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(assert (< (* c (div b (+ a 2))) a))\n(check-sat)\n```\n\nOS: Ubuntu 18.04\nCommit: 9be7bda\n",
    "priority": 1
  },
  "520": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :trace true)\n(declare-fun a () Int)\n(declare-fun b () Int)\n(declare-fun c () Int)\n(declare-fun d () Int)\n(declare-fun e () String)\n(assert (xor (< a 8 (* a b)) true (< (/ c d) (str.len e) a b)))\n(assert (= \"bef\" (str.substr e c d)))\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/smt/smt_clause.cpp\nLine: 68\n(*cls)[i] == lits[i]\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 9be7bda\n",
    "priority": 0
  },
  "521": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :proof true) \n(declare-fun a () Int) \n(declare-fun b () Int) \n(assert (or (= a 5) (= a 7) (= a 0))) \n(assert (<= (* b b) 0)) \n(check-sat)    \n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ast/ast.cpp\nLine: 2837\nto_app(get_fact(p2))->get_arg(0) == get_fact(p1)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 907d310\n",
    "priority": 1
  },
  "522": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :proof true) \n(declare-fun a (Int Int) Bool) \n(assert (forall ((b Int) (c Int)) (xor (>= c (/ 7 b)) (a b c)))) \n(assert (a 4 1)) \n(check-sat)            \n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ast/ast.cpp\nLine: 2828\nto_app(get_fact(p2))->get_arg(0) == get_fact(p1)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: fd219ab\n",
    "priority": 1
  },
  "523": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun x0 () Int)\n(declare-fun x1 () Int)\n(declare-fun x2 () Int)\n(declare-fun x3 () Int)\n(declare-fun x4 () Int)\n(declare-fun x5 () Int)\n(declare-fun x6 () Int)\n(declare-fun x7 () Int)\n(declare-fun x8 () Int)\n(declare-fun x9 () Int)\n(assert\n (let ((v3 (* 36 x4))\n       (v0 (* 37 x7))\n       (v21 (* 3 x1))\n       (v2 (* 23 x0))\n       (v4 (* 37 x1))\n       (v23 (* 129 x8))\n       (v17 (* 31 x6))\n       (v19 (* 28 x5))\n       (v5 (* 26 x5))\n       (v12 (- 13 x5))\n       (v20 (* 5 x6))\n       (v1 (* (- 38) x0))\n       (v16 (* (- 24) x6))\n       (v6 (* (- 13) x1))\n       (v9 (* (- 8) x4))\n       (v13 (* (- 26) x9))\n       (v15 (* (- 37) x7)))\n  (and\n   (<= (+ (* 12 x8) (* 12 x7) v3 x7 (* 22 x8)) (- 4))\n   (<= (+ (mod (- 31) x9) v0) 0)\n   (<= (+ (* 22 (- 17) x4) v1 0) (- 251))\n   (<= (+ (* 2 x5) (* (- 17) x9) (* (- 32) x4) (* (- 71 7) x9) (* (- 162) x2) (* 16 x8)) (- 39))\n   (<= (+ x1 (* (- 37) x0) (* 16 x6) (* (- 12) x0) (* 22 x3)) 6)\n   (<= (+ (* 9 x3)  (* (+ 208 32) x8) (* (- 16) x1) v0 v2  (* (- 250) x8) (* (- 15) x3)) (- 15))\n   (<= (+ x8 v4 v1 (* 13 x3) (* (- 23) x7) (* 37 x9)) (- 14))\n   (<= (+ (div 10 x6) (* (- 39) x7) v16 0 ) 81)\n   (<= (+ (* (- 226) x9) (* 24 x3) v23 (* (- 18) x3) 0 (* 11 x2)) (- 25 (* (- 10) x8) v19) 0)\n   (<= (+ (* (- 4 15) x0) (* (- 22) x3)) (- 24))\n   (<= (+ (* 38 x2) (* 23 x3) (* 12 x2) (- x0) v3 (* 91 x6) (* 4 x0) v5 v15 (* (- 10) x9)) 16)\n   (<= (+ (* 31 x4)  (* (- 19) x9) v5 v12 0 (* (- 31) x2)) (- 12))\n   (<= (+ (* (- 28) x1) (* 29 x0) (* 5 x1) (* (- 38) x8) v6 (* (- 8) x2) (* 16 x3) (* 6 x7)) 0)\n   (<= (+ (* (- 165) x4) (* 37 x6) 0 (* 25 x1) (* (- 33) x9)) 0)\n   (<= (+ v12 (* 7 x4) v13 0 (* (- 31) x0) (* (- 35) x0) (* 36 x2) (* (- 25) x3) v15) (- 33))\n   (<= (div (* 10 x4) v16 (* 26 x6) v17 0 (* (- 32) x5) (* 32 x2) (* 19 x1 30 x6) 0) 0)\n   (<= (+ v20 (div (- 28) x5) v23) 35))))\n(check-sat)\n\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/smt/theory_arith_inv.h\nLine: 198\n!above_upper(v)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: fd219ab\n",
    "priority": 1
  },
  "524": {
    "body": "Hi,\nFor this formula:\n```\n(define-sort FPN () (_ FloatingPoint 31 43))\n(declare-fun a () FPN)\n(declare-fun b () FPN)\n(declare-fun c () FPN)\n(assert (distinct (fp.rem a b) c))\n(check-sat)\n\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ast/fpa/fpa2bv_converter.cpp\nLine: 1166\nfalse\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n\n```\n\nOS: Ubuntu 18.04\nCommit: fd219ab\n",
    "priority": 1
  },
  "525": {
    "body": "```\r\n$bin/z3-145ec8f model_validate=true bug.smt2\r\nsat\r\n(error \"line 2 column 10: an invalid model was generated\")\r\n(model \r\n)\r\n$cat bug.smt2 \r\n(assert (= (seq.indexof (seq.unit 0) (seq.unit 0)) 0))\r\n(check-sat)\r\n(get-model)\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 145ec8f",
    "priority": 1
  },
  "526": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Int) \r\n(assert (= a 9)) \r\n(assert (= (* (/ a a) a) (- (/ (+ a a) a) a))) \r\n(assert (distinct (- (div (+  a  a) a) a) a)) \r\n(check-sat-using  ctx-simplify)   \r\n```\r\nZ3 throws out an ast_manager LEAKED:\r\n```\r\n$ z3/build/z3 small.smt2 \r\nunsat\r\nast_manager LEAKED: 3\r\nLeaked: -7.0\r\nid: 83\r\n$ cat small.smt2 \r\n(declare-fun a () Int) \r\n(assert (= a 9)) \r\n(assert (= (* (/ a a) a) (- (/ (+ a a) a) a))) \r\n(assert (distinct (- (div (+  a  a) a) a) a)) \r\n(check-sat-using  ctx-simplify)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: e5e6f48",
    "priority": 1
  },
  "527": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () String) \n(declare-fun b () String) \n(declare-fun c () String) \n(declare-fun d () String) \n(assert (or (distinct a (str.++ b c)) (distinct b  d)  \n(not (str.in.re d (str.to.re \".\"))))) \n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/util/old_buffer.h\nLine: 201\nidx < size()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 601b399\n",
    "priority": 1
  },
  "528": {
    "body": "```\r\n[1114] % z3 small.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/util/old_vector.h\r\nLine: 370\r\nidx < size()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[1115] % \r\n[1115] % cat small.smt2\r\n(define-sort FPN () (_ FloatingPoint 11 2))\r\n(declare-fun a () FPN)\r\n(declare-fun b () FPN)\r\n(declare-fun c () FPN)\r\n(assert (= (fp.add roundTowardNegative a b) c))\r\n(check-sat)\r\n[1116] % \r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 8717c7d",
    "priority": 1
  },
  "529": {
    "body": "Hi,\nFor this formula:\n```\n(define-sort a () (_ FloatingPoint 55 53))\n(declare-fun b () a)\n(declare-fun c () a)\n(declare-fun d () a)\n(assert (= (fp.div roundTowardNegative b c) d))\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ast/fpa/fpa2bv_converter.cpp\nLine: 940\nebits <= sbits\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: f158ab8\n",
    "priority": 1
  },
  "530": {
    "body": "File: [bug.smt2](https://github.com/Z3Prover/z3/files/4367953/bug.txt) \r\n```\r\n% z3debug-8d39694 bug.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/math/lp/lar_solver.cpp\r\nLine: 1706\r\nall_vars_are_registered(coeffs)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/util/old_vector.h\r\nLine: 370\r\nidx < size()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 8d39694",
    "priority": 1
  },
  "531": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real)   \n(declare-fun b () Real) \n(declare-fun c () Real)  \n(declare-fun d () Real) \n(declare-fun h () Real) \n(declare-fun e () Real) \n(declare-fun f () Real) \n(declare-fun i () Real) \n(assert (not (exists ((g Real)) (and (or (< 0.0 (* a c))) (<= (- (* d g)) e))))) \n(assert (= b (+ d i))) \n(assert (= c (/ h f f))) \n(check-sat-using smt)    \n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/lp/emonics.cpp\nLine: 346\ninvariant()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 8d39694\n",
    "priority": 1
  },
  "532": {
    "body": "File: [bug.smt2](https://github.com/Z3Prover/z3/files/4366412/bug.txt)\r\n\r\n```\r\n% z3debug-8d39694 smt.threads=2 bug.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/math/lp/lar_solver.cpp\r\nLine: 1202\r\nm_mpq_lar_core_solver.m_r_solver.calc_current_x_is_feasible_include_non_basis()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/math/lp/lar_core_solver.h\r\nLine: 760\r\nl <= u\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 8d39694",
    "priority": 0
  },
  "533": {
    "body": "Consider the formula [bug.smt2](https://github.com/Z3Prover/z3/files/4366377/bug.txt) that causes two different assertion violations when feed to Z3. There were recently closed issue these two assertion violations (cf. #3344, #3304, #2930 and #2955). \r\n \r\n```\r\n% z3-8717c7d smt.threads=2 bug.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/math/lp/lp_primal_core_solver_def.h\r\nLine: 1299\r\n!this->use_tableau()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/util/old_vector.h\r\nLine: 370\r\nidx < size()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 8717c7d\r\n\r\n",
    "priority": 0
  },
  "534": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :smt.threads 2)\n(assert (forall ((a Int) (b Int)) \n(exists ((c Int)) (and (< a (* 20 c)) (< (* 20 c) b))))) \n(apply qe)     \n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/qe/qe.cpp\nLine: 1764\nl_false != m_solver.check()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 8d39694\n",
    "priority": 0
  },
  "535": {
    "body": "Hi,\nFor this formula:\n```\n(define-sort FPN () (_ FloatingPoint 46 53))\n(declare-fun a () FPN)\n(declare-fun y () FPN)\n(declare-fun b () FPN)\n(assert (= (fp.mul roundTowardZero a y) b))\n(check-sat)\n```\nZ3  gives an invalid model:\n```\n[606] % z3 model_validate=true small.smt2\nsat\n(error \"line 6 column 10: an invalid model was generated\")\n[607] % \n[607] % cat small.smt2\n(define-sort FPN () (_ FloatingPoint 46 53))\n(declare-fun a () FPN)\n(declare-fun y () FPN)\n(declare-fun b () FPN)\n(assert (= (fp.mul roundTowardZero a y) b))\n(check-sat)\n```\n\nOS: Ubuntu 18.04\nCommit: 8717c7d\n",
    "priority": 0
  },
  "536": {
    "body": "```\r\n% z3-65de3f7 bug.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/util/obj_hashtable.h\r\nLine: 177\r\ne\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nSegmentation fault\r\n%\r\n% z3debug-ceb2849 bug.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/util/obj_hashtable.h\r\nLine: 177\r\ne\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nSegmentation fault\r\n% cat bug.smt2\r\n(declare-fun x1 () Bool) \r\n(assert (not x1)) \r\n(check-sat-using sine-filter) \r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 65de3f7 (master), ceb2849 (debug)\r\n",
    "priority": 1
  },
  "537": {
    "body": "The below trace shows an incorrect model bug in Z3.\r\n```\r\n[715] % z3-4.8.7 small.smt2\r\nsat\r\nsat\r\n(model \r\n  (define-fun a () Real\r\n    0.0)\r\n  (define-fun c () Real\r\n    2.0)\r\n  (define-fun b () Real\r\n    1.0)\r\n)\r\n[716] % z3 small.smt2\r\nunknown\r\nsat\r\n(model \r\n  (define-fun a () Real\r\n    0.0)\r\n  (define-fun b () Real\r\n    0.0)\r\n  (define-fun c () Real\r\n    0.0)\r\n)\r\n[717] % \r\n[717] % cat small.smt2\r\n(set-option :proof true)\r\n(set-option :smt.random_seed 1)\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(assert (or (= c 1) (= (/ 1 a) 0)))\r\n(assert (= b 1))\r\n(assert (not (= a (- 1))))\r\n(check-sat)\r\n(check-sat)\r\n(get-model)\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 65de3f7\r\n",
    "priority": 1
  },
  "538": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real)  \n(declare-fun b () Real)  \n(declare-fun c () Real)  \n(declare-fun d () Real) \n(assert (not (exists ((e Real)) (=> (and (= 0 (/ a (- b e)) c)) (< c d))))) \n(check-sat)\n```\nZ3 debug branch  throws out a segmentation fault:\n```\n$ z3debug/build/z3 small.smt2 \nSegmentation fault\n$ cat small.smt2 \n(declare-fun a () Real)  \n(declare-fun b () Real)  \n(declare-fun c () Real)  \n(declare-fun d () Real) \n(assert (not (exists ((e Real)) (=> (and (= 0 (/ a (- b e)) c)) (< c d))))) \n(check-sat) \n```\n\nOS: Ubuntu 18.04\nCommit: ceb2849\n",
    "priority": 0
  },
  "539": {
    "body": "```\r\n% z3-65de3f7 bug.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/qe/qe.cpp\r\nLine: 710\r\n!m.is_not(f) && !m.is_and(f) && !m.is_or(f)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nunsat\r\n% z3debug-ceb2849 bug.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/qe/qe.cpp\r\nLine: 710\r\n!m.is_not(f) && !m.is_and(f) && !m.is_or(f)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nunsat\r\n% cat bug.smt2\r\n(declare-sort a 0) \r\n(declare-fun app ( a Int) Int) \r\n(assert (forall ((b a) (c a)) (xor (exists (( d Int)) (= 0 (app c d))) (= b c)))) \r\n(assert (distinct 0 0)) ; trivial term to necessary to trigger the bug   \r\n(check-sat-using qe-sat) \r\n```\r\nOS: Ubuntu 18.04\r\nCommits: 65de3f7 (master), ceb2849 (debug)  \r\n",
    "priority": 0
  },
  "540": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun s_5 ( Int ) Bool) \n(declare-fun p () Int) \n(assert (forall (( ?r Int )) \n(let ((?v_4 ( = ?r p ))) (xor (s_5 ?r))))) \n(check-sat-using (then qe-sat bv)) \n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ast/ast.h\nLine: 721\nidx < m_num_args\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: ceb2849\n",
    "priority": 0
  },
  "541": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a (Int Int) Bool) \n(assert (forall ((b Int)) \n(xor (a 1 b)))) \n(check-sat-using qe-sat) \n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ast/ast.h\nLine: 721\nidx < m_num_args\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: d4b137a\n",
    "priority": 0
  },
  "542": {
    "body": "Hi,\nFor this formula:\n```\n(assert (xor (exists (( ?a Int )) (= 0 ?a )))) \n(check-sat-using purify-arith)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ast/normal_forms/nnf.cpp\nLine: 588\nt->get_num_args() == 2\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 37bc4a4\n",
    "priority": 1
  },
  "543": {
    "body": "Hi,\nFor this formula:\n```\n(assert (xor false)) \n(check-sat-using aig)\n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/tactic/aig/aig.cpp\nLine: 555\nspos + 2 == m_result_stack.size()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: d4b137a\n",
    "priority": 1
  },
  "544": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(set-option :smt.phase_selection 5)    \r\n(set-option :smt.threads 10)  \r\n(declare-fun a () String) \r\n(assert (distinct (str.len a) 83))\r\n(check-sat)  \r\n```\r\nZ3 nodeterministicly throws out ast_manager LEARKED:\r\n```\r\n$ z3/build/z3 small.smt2 \r\nsat\r\n$ z3/build/z3 small.smt2 \r\nast_manager LEAKED: 3\r\nLeaked: 84\r\nid: 371\r\nast_manager LEAKED: 3\r\nLeaked: 84\r\nid: 371\r\nast_manager LEAKED: 3\r\nLeaked: 84\r\nid: 371\r\nast_manager LEAKED: 3\r\nLeaked: 84\r\nid: 371\r\nsat\r\n$ cat small.smt2 \r\n(set-option :smt.phase_selection 5)    \r\n(set-option :smt.threads 10)  \r\n(declare-fun a () String) \r\n(assert (distinct (str.len a) 83))\r\n(check-sat)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 37bc4a4",
    "priority": 1
  },
  "545": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :smt.phase_selection 5)\n(set-option :smt.arith.eager_eq_axioms false) \n(set-option :smt.random_seed 8)\n(set-option :proof true)\n(declare-fun x () String)\n(declare-fun y () String)\n(assert (distinct (str.++ x \"ba\") (str.++ \"ab\" x)))\n(assert (distinct (str.++ y \"ab\") (str.++ \"ab\" y )))\n(check-sat)\n(get-model)\n```\nZ3  gives an invalid model:\n```\nsat\n(model \n  (define-fun y () String\n    \"T\\xe9\")\n  (define-fun x () String\n    \"a\")\n)\n```\nif I feed this model to the formula, Z3 reports unsat.\n\nOS: Ubuntu 18.04\nCommit: 37bc4a4\n",
    "priority": 1
  },
  "546": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :smt.threads 2)\n(declare-fun a () Bool) \n(declare-fun b () Bool) \n(declare-fun c () Bool) \n(declare-fun d () Bool) \n(declare-fun e () Bool) \n(declare-fun f () Bool) \n(declare-fun g () Bool)  \n(declare-fun h () Bool) \n(declare-fun i () Bool) \n(declare-fun j () Bool) \n(declare-fun k () Bool) \n(declare-fun l () Bool) \n(declare-fun m () Real) \n(declare-fun n () Bool) \n(declare-fun o () Bool) \n(declare-fun p () Bool) \n(assert (= (+ (* (ite e 1 0))) (+ (+ (+ (* (ite p 1 0) (ite o 1 0)(ite b 1 0) (ite a 1 0)(ite d 1 0) (ite c 1 0)(ite g 1 0) (ite f 1 0)))) (ite i 1 0) (ite h 1 0))(* 2.0 (+ (ite k 1.0 0.0))) (+ (ite j 1.0 0.0) (ite l 1.0 0.0) (ite n 1.0 0.0 )))) (minimize m) (check-sat)             \n\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/smt/theory_pb.cpp\nLine: 2178\n!c.is_ge() || (sum >= c.k()) == (ctx.get_assignment(c.lit()) == l_true)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: e075f38\n",
    "priority": 1
  },
  "547": {
    "body": "Hi,\nFor this formula:\n```\n  (set-option :smt.threads 2)\n  (declare-fun a () Int)  \n  (declare-fun b () Int)  \n  (declare-fun c () Int)  \n  (declare-fun d () Int)  \n  (declare-fun e () Int)  \n  (declare-fun n () Int)  \n  (declare-fun g () Int)  \n  (declare-fun f () Int)  \n  (declare-fun i () Int)  \n  (declare-fun j () Int)  \n  (declare-fun h () Int)  \n  (declare-fun l () Int)  \n  (declare-fun m () Int)  \n  (declare-fun k () Int)  \n  (declare-fun o () Int)  \n  (assert (or (= e 1) (= e 245) (= e 6) (= e 7) (= e 8) (= e 10)))  \n  (assert (or (= n 1) (= n 2) (= n 3) (=  n 5)  (= n 8) (= n 9) (= n 0)))  \n  (assert (or (= g 1)  (= g 3) (= g 4) (= g 5) (= g 6) (= g 7) (= g 810)))  \n  (assert (or (= f 3) (= f 4) (= f 5) (= f 6) (= f 7) (= f 8) (= f 9) (= f 0)))  \n  (assert (or (= i 1) (=  i 4) (= i 5) (= i 6) (= i 7) (= i 8) (= i 9) (= i 10)))  \n  (assert (or (= j 124) (= j 5) (= j 6) (= j 7) (= j 8) (= j 9) (= j 0)))  \n  (assert (=>  (>= d 1) (= l 1) (= h 0) (and (= o 1) (= k 0)))) \n  (assert (<= a b c (+ (* c 4) 4) o))  \n  (assert (<= 0 k))  \n  (minimize m)  \n  (check-sat)                         \n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/smt/theory_arith_aux.h\nLine: 1810\n!maintain_integrality || valid_assignment()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: e075f38\n",
    "priority": 0
  },
  "548": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :smt.threads 2)  \n(declare-fun a () Real) \n(declare-fun b () Real) \n(declare-fun c () Real) \n(declare-fun d () Real) \n(declare-fun aa () Real) \n(declare-fun e () Real) \n(assert (not (exists ((f Real)) \n    (= (=> (<= 0.0 f b) \n    (<= 0.0 (+ (/ (*  (- a aa)) f (* (div a aa)) f)) d)) \n    (distinct e 2.0))))) \n(assert (= a (+ c aa)))\n(check-sat)   \n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/lp/emonics.cpp\nLine: 540\nfound\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 9b58b77\n",
    "priority": 0
  },
  "549": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :smt.threads 2)\n(assert (forall ((a Int) (b Int)) \n(exists ((x Int)) (and (< a (* 20 x)) (< (* 20 x) b))))) \n(apply qe)\n\n\n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/qe/qe.cpp\nLine: 1764\nl_false != m_solver.check()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 9b58b77\n",
    "priority": 1
  },
  "550": {
    "body": "```\r\n% z3-752b498 smt.arith.solver=6 bug.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/math/lp/lar_solver.cpp\r\nLine: 2252\r\nb.is_int()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nsat\r\n% cat bug.smt2\r\n(declare-fun a () Int) \r\n(declare-fun b () Int) \r\n(declare-fun c () Int) \r\n(assert (let ((?d c)) \r\n        (and (<= (+ a (* 6 b))(/ 8 101 ))\r\n        (<= (* ?d a) (- 4 (* 6 a)) 0)))) \r\n(check-sat)\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 752b498\r\n",
    "priority": 0
  },
  "551": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :model false)  \n(declare-fun a () Real)  \n(declare-fun b () Real)  \n(declare-fun aa () Real)  \n(declare-fun c () Real)  \n(declare-fun ab () Real)    \n(declare-fun d () Real)  \n(declare-fun h () Real)    \n(declare-fun e () Real)  \n(declare-fun f () Real)  \n(declare-fun k () Real)  \n(declare-fun l () Real)  \n(declare-fun g () Real)  \n(declare-fun ad () Real)  \n(declare-fun n () Real)  \n(declare-fun ae () Real)  \n(declare-fun i () Real)  \n(declare-fun j () Real)  \n(declare-fun o () Real)  \n(declare-fun r  () Real)  \n(declare-fun ag () Real)  \n(declare-fun m () Real)  \n(declare-fun p () Real)  \n(declare-fun q () Real)  \n(declare-fun ai () Real)  \n(declare-fun aj () Real)  \n(declare-fun ak () Real)  \n(declare-fun al () Real)  \n(declare-fun an () Real)  \n(declare-fun ao  () Real)  \n(assert (not (exists ((aq Real)) (=> (and (or (and (= r (div 65 a (div 3 aa aq))) (= o 0.0ae 2.0 ad) (<= 0.0 f (- 4 h )) (<= 0.0 n (- h )  0.0 g)) (< 0.0  ak)) (> 0.0 ag)) (or (= (- d ) m) (=> (<= 0.0 k) (=> (<= 0.0 aq k) (and (<=  o (- ak)) (<= 0.0 (mod (* g aq) (/ 81 b al))) (<= (/ (* g aq) (- b al)) (-  ak)) (<= (+ aq ) ag))) (= (/ 71 c p) 2.0)))))))\n(assert (=> (and (xor (and (or (=> (xor (>= 0.0  ab ) (<= 0 an)) (<= 0.0 (+ j) ao))) (= ai q (- n))) (< (- a l) 0)) (= aj 2.0) (< (+ (- 2 e m) ) 0.0 (- c i))) (< 0.0 ao))) \n(assert (= b c (+ i p))) \n(check-sat)\n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/lp/nla_core.cpp\nLine: 113\ncanonize_sign_is_correct(m)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: bb63721\n",
    "priority": 1
  },
  "552": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :smt.threads 2)\n(declare-const a String)\n(declare-const b String)\n(declare-const c String)\n(declare-const d String)\n(assert (distinct c d))\n(assert (= (str.++ a d b) (str.++ d c)))\n(check-sat)\n(get-model)\n```\nZ3  gives an invalid model:\n```\n[653] % z3 small.smt2\nsat\n(model \n  (define-fun c () String\n    \"!0!\")\n  (define-fun a () String\n    \"\")\n  (define-fun d () String\n    \"!1!\")\n  (define-fun b () String\n    \"\")\n)\n[654] % cat small.smt2\n(set-option :smt.threads 2)\n(declare-const a String)\n(declare-const b String)\n(declare-const c String)\n(declare-const d String)\n(assert (distinct c d))\n(assert (= (str.++ a d b) (str.++ d c)))\n(check-sat)\n(get-model)\n[655]\n```\n\nOS: Ubuntu 18.04\nCommit: 752b498\n",
    "priority": 1
  },
  "553": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :proof true) \n(declare-sort a$) \n(declare-sort c$) \n(declare-sort d$) \n(declare-sort f$) \n(declare-sort e$)   \n(declare-fun comp$b (f$) e$) \n(declare-fun m$g (e$ d$) f$) \n(declare-fun m$ac (f$ a$) c$) \n(declare-fun m$aw (d$ a$) a$)  \n(assert (forall ((?h f$) (?i d$) (?j f$) (?k d$)) (= (= (m$g (comp$b ?h) ?i) (m$g (comp$b ?j) ?k)) \n(forall ((?l a$)) (= (m$ac ?h (m$aw ?i ?l)) (m$ac ?j (m$aw ?k ?l)))) false)))  \n(check-sat)\n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ast/ast.cpp\nLine: 2910\nto_app(get_fact(p1))->get_arg(1) == to_app(get_fact(p2))->get_arg(0)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: f913f29\n",
    "priority": 0
  },
  "554": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a (Int Int Int) Int) \n(declare-fun b () Int) \n(assert (let ( (c 0)) \n(let ((aa (a c b b)) (d 0)) \n(let ((h (* 2 aa))) \n(let ((e (div 102 h c)) (f 0) (m 0) (g b) (o h) (i 0)) \n(let ((j o) (k (~ aa))) \n(let ((l (= g m)) (p (< 1 aa)) (q (<= 5 i)) (n (distinct j g))) \n(let ((ae (ite l d o))) \n(let ((af (ite p ae k))) \n(let ((ag (ite n f af))(ah (ite q b e)))(> ag ah))))))))))) (check-sat)\n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/lp/emonics.cpp\nLine: 527\nfound\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 9b09351\n",
    "priority": 1
  },
  "555": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real) \n(declare-fun b () Real) \n(assert (not (exists ((c Real)) \n(= (= (+ (div (mod 5 (* c c)) a)) \n(/ 5 (* b b)) a) (<= b 5))))) \n(check-sat)                          \n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/lp/emonics.cpp\nLine: 551\nm_cg_table.contains(m.var())\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: d8d0b09\n",
    "priority": 1
  },
  "556": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real)  \n(declare-fun b () Real) \n(declare-fun c () Real) \n(declare-fun d () Real) \n(declare-fun e () Real)  \n(declare-fun f () Real)   \n(assert (not (exists ((g Real)) (=>  (xor (and (= (div a (-  g)) 2.0)))   (and (=> (<= 0.0 g b)  (<= (div (* c g) d) e)) (= f 2.0)))))) \n(check-sat)  \n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/lp/int_solver.cpp\nLine: 427\nlrac.m_r_solver.calc_current_x_is_feasible_include_non_basis() == lrac.m_r_solver.current_x_is_feasible()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: d8d0b09\n",
    "priority": 1
  },
  "557": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :model false) \n(set-option :proof true) \n(set-option :rewriter.arith_ineq_lhs true) \n(set-option :smt.phase_selection 5) \n(set-option :smt.random_seed 1) \n(declare-fun a () Real) (declare-fun b () Real) (declare-fun c () Real) (declare-fun d () Real) \n(declare-fun e () Real) (declare-fun f () Real) (declare-fun g () Real) (declare-fun h () Real) \n(declare-fun i () Real) (declare-fun j () Real) (declare-fun k () Real) (declare-fun l () Real) \n(declare-fun m () Real) (declare-fun n () Real) (declare-fun o () Real) (declare-fun aaa () Real) \n(declare-fun bbb () Real) (declare-fun v1 () Real) (declare-fun A () Real) (declare-fun v2 () Real) \n(declare-fun I1 () Real) (declare-fun I2 () Real) (declare-fun x2 () Real) (declare-fun x1 () Real) \n(declare-fun xI1 () Real) (declare-fun xI2 () Real) (declare-fun V () Real) (declare-fun aa () Real) \n(declare-fun bb () Real) (declare-fun cc () Real) (declare-fun ep () Real) (declare-fun dd () Real) \n(declare-fun ee () Real) (declare-fun ff () Real) (declare-fun gg () Real)  (declare-fun ccc () Real) \n(declare-fun ddd () Real) (declare-fun eee () Real) (declare-fun kk () Real) \n(declare-fun fff () Real) \n(declare-fun ll () Real) \n(declare-fun ggg () Real) \n(declare-fun hhh () Real) \n(declare-fun mm () Real) \n(declare-fun kkk () Real) \n(declare-fun lll () Real) \n(assert (not (=> (and (or (or (and (and (and (and (and (and (and (and (and (and (=> (and (<= 0.0 gg kk)) (and (and (<= 0.0 (+ (+ ddd gg))) (<= (+ (div 107 ddd gg)) 0)) (<= gg (div 128 a v1)))) (<= 0.0 kk)) (distinct (- ee) 0.0)) (<= 0.0 (- k aa))) (< (- k aa) (- o dd))) (> ccc (- h xI1))) (= fff 2.0)) (< ccc lll)) (< 0.0 (- bbb ff))) (<= 0.0 (- d I1))) (<= (- d I1) (- o dd))) (< 0.0 ddd)) (< 0.0 (- o dd))) (< 0.0 (- a v1))) (<= (+ (* ddd kk) (- k aa)) (- o dd))))) \n(assert (= a (+ v1 kkk))) \n(assert (= b (+ A kkk))) \n(assert (= c (+ v2 mm))) \n(assert (distinct d (+ I1 ggg))) \n(assert (distinct e (+ I2 ggg))) \n(assert (= f (+ x2 kk))) \n(assert (= g (+ x1 ccc))) \n(assert (= h (+ xI1 ll))) \n(assert (= i (+ xI2 mm))) \n(assert (= j (+ V fff))) \n(assert (= k (+ aa mm))) \n(assert (= l (* bb lll))) \n(assert (= m (- cc eee))) \n(assert (= n (* ep ll))) \n(assert (distinct o (+ dd hhh))) \n(assert (= aaa 0)) \n(assert (= bbb (+ ff eee))) \n(check-sat)                         \n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/smt/smt_conflict_resolution.cpp\nLine: 797\nm_ctx.is_true(n2) || m_ctx.is_false(n2)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: d8d0b09\n",
    "priority": 0
  },
  "558": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real) \n(declare-fun b () Real) \n(declare-fun c () Real)  \n(assert (not (exists ((d Real))    \n    (<= d (mod d 0.0) (* a c))))) \n(assert (< 0.0 (- a))) \n(assert (= a (mod b c))) \n(check-sat) \n```\nZ3 debug branch  throws out a segmentation fault:\n```\n$ z3debug/build/z3 small.smt2 \nSegmentation fault\n$ cat small.smt2 \n (declare-fun a () Real) \n (declare-fun b () Real) \n (declare-fun c () Real)  \n (assert (not (exists ((d Real))    \n    (<= d (mod d 0.0) (* a c))))) \n(assert (< 0.0 (- a))) \n(assert (= a (mod b c))) \n(check-sat)\n```\n\nOS: Ubuntu 18.04\nCommit: d8d0b09\n",
    "priority": 0
  },
  "559": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real) \n(declare-fun b () Real) \n(assert (> (/ b b b (- a b) (- 4 b) (+ a b) (* a ) b (/ 0 b) (- b) 0 (div 0 b)) 0)) \n(check-sat)   \n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/lp/emonics.cpp\nLine: 221\nis_canonized(m)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: d8d0b09\n",
    "priority": 1
  },
  "560": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun q1 () Real) \n(declare-fun q2 () Real) \n(declare-fun q3 () Real) \n(assert (> q1 q2 (div 3 q2) q3)) \n(minimize q1) \n(check-sat) \n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/smt/theory_arith_eq.h\nLine: 44\nlower_bound(v).is_rational()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 894702d\n",
    "priority": 1
  },
  "561": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :proof true) \n(assert (forall ((a Real) (b Real)) \n(or (>= (+ a b) (- 10 0)) \n    (not (<= (+ (* a b)) 0)) \n    (>= (+ (mod 0 b)) 3)))) \n(check-sat)                 \n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/smt/smt_conflict_resolution.cpp\nLine: 811\n(fact->get_arg(0) == n1->get_owner() && fact->get_arg(1) == n2->get_owner()) || (fact->get_arg(1) == n1->get_owner() && fact->get_arg(0) == n2->get_owner())\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 3ac9dbd\n",
    "priority": 0
  },
  "562": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real) \n(declare-fun b () Real) \n(declare-fun c () Real) \n(declare-fun d () Real) \n(assert (not (exists ((e Real)) \n(xor (xor (and (xor (and (or (and (<= e a)) (> a 4)) (= b 9)) (>= c 4)) (< c 10) (>= c (- 241 (* 233 d)))) (<= c (- d))) (> (* (div (- 2) a) c) 2)))))\n(check-sat)\n```\nZ3 debug branch  throws out an assertion violation:\n```\nFile: ../src/ast/rewriter/rewriter_def.h\nLine: 300\nm().get_sort(m_r) == m().get_sort(t)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 3ac9dbd\n",
    "priority": 1
  },
  "563": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun q1 () Real) \n(declare-fun q2 () Real) \n(declare-fun q3 () Real) \n(assert (< q1 (/ 145 q2 ) q3)) \n(minimize q1) \n(minimize q2) \n(minimize q3) \n(check-sat) \n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/smt/smt_model_generator.cpp\nLine: 102\nm_context->get_assignment(r) != l_undef\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 3ac9dbd\n",
    "priority": 1
  },
  "564": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a ()  Real)\n(declare-fun b () Real) \n(declare-fun c () Real)  \n(declare-fun d () Real) \n(declare-fun e () Real) \n(declare-fun f () Real) \n(declare-fun i () Real)  \n(declare-fun g () Real) \n(assert (not (exists (( h Real )) \n  (=> (and (xor (and (= (-  (div 1 h)) 0.0) (= a 2.0 )) \n  ( = e 2.0 )) (= i f g)) \n  (distinct 0.0 b) (=> (< h b) (<= 0.0 (mod (* c h) d ))) (<= 0 f)))))\n(check-sat)\n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/lp/lar_core_solver.h\nLine: 760\nl <= u\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 3ac9dbd\n",
    "priority": 1
  },
  "565": {
    "body": "```\r\n$z3 bug.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_internalizer.cpp\r\nLine: 1044\r\nb_internalized(to_app(n)->get_arg(0))\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n^C^C\r\n$cat bug.smt2\r\n(check-sat (not false))\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 47bd063",
    "priority": 1
  },
  "566": {
    "body": "Hi,\r\non the following formula Z3 throws the below assertion violation + segfault.\r\n```\r\n(declare-fun a () Int)                                                          \r\n(assert (distinct  \"Good\"  \"Good\"))                                             \r\n(assert (> a 0 ))                                                               \r\n(check-sat-using normalize-bounds)  \r\n```\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/util/parray.h\r\nLine: 336\r\ni < size(r)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nSegmentation fault\r\n```\r\nOS: Ubuntu 18.04\r\nCommit:9f6a0a0",
    "priority": 1
  },
  "567": {
    "body": "On the following formula z3str3 `smt.string_solver=z3str3` throws the below assertion violation.\r\n```\r\n(set-option :proof true)\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(assert (str.contains (str.++ a b) (str.++ b \"x\")))\r\n(check-sat)\r\n```\r\n\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_clause.cpp\r\nLine: 45\r\n!m.proofs_enabled() || js != 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 9f6a0a0",
    "priority": 1
  },
  "568": {
    "body": "Hi,\nFor this formula:\n```\n(declare-sort a$) \n(declare-sort c$) \n(declare-sort d$) \n(declare-sort f$) \n(declare-sort e$)      \n(declare-fun comp$b ( f$ ) e$) \n(declare-fun m$g ( e$ d$ ) f$)  \n(declare-fun m$ac ( f$ a$ ) c$) (declare-fun m$aw ( d$ a$ ) a$)   \n(assert (forall (( ?h f$ ) ( ?i d$ ) ( ?j f$ ) ( ?k d$ )) \n    (= (= (m$g (comp$b ?h) ?i) (m$g (comp$b ?j) ?k)) \n        (forall (( ?l a$ )) (= (m$ac ?h (m$aw ?i ?l )) (m$ac ?j (m$aw ?k ?l )))) false)))  \n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ast/ast.cpp\nLine: 2910\nto_app(get_fact(p1))->get_arg(1) == to_app(get_fact(p2))->get_arg(0)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 6f2b569\n",
    "priority": 1
  },
  "569": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :proof true) \n(declare-fun a () Int)     \n(declare-fun b () Int) \n(assert (>= a 0 a ( * a b))) \n(check-sat) \n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ast/ast.cpp\nLine: 2828\nto_app(get_fact(p2))->get_arg(0) == get_fact(p1)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 6f2b569\n",
    "priority": 1
  },
  "570": {
    "body": "Hi, \r\nfor the following formula Z3 \r\n```\r\n(declare-fun a () Int)                                                          \r\n(declare-fun b (Int Int) Int)                                                   \r\n(declare-fun c (Int Int) Int)                                                   \r\n(assert (forall ((d Int) (y Int))                                               \r\n(= (c d y) (div d y) )))                                                        \r\n(push) (assert (= (c (b 3 (b 3 a)) 3) 0))                                       \r\n(check-sat)                                                                     \r\n(pop)                                                                           \r\n(check-sat)                                                                     \r\n(assert (= (c (b 3 (b 3 a)) 3) 0))                                              \r\n(check-sat) \r\n```\r\nZ3 throws the following assertion violation\r\n```\r\nsat\r\nsat\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_internalizer.cpp\r\nLine: 580\r\n!e_internalized(n)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/util/old_vector.h\r\nLine: 370\r\nidx < size()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: a02d3e9",
    "priority": 1
  },
  "571": {
    "body": "```\r\n[914] % z3debug model_validate=true small.smt2 \r\nsat\r\n(error \"line 3 column 10: an invalid model was generated\")\r\n[915] % \r\n[915] % cat small.smt2 \r\n(declare-fun x () Int)\r\n(assert (= (div (/ 0 x) 2) (div 50 (+ x 2) 0)))\r\n(check-sat)\r\n[916] % \r\n```\r\nOS: Ubuntu 18.04\r\nCommit: a02d3e9",
    "priority": 1
  },
  "572": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(set-option :smt.threads 4)   \r\n(declare-fun c () ( Array Int Int )) \r\n(declare-fun a () ( Array Int Int )) \r\n(declare-fun arr () ( Array Int Int ))\r\n(declare-fun d () Int) \r\n(declare-fun u () Int) \r\n(declare-fun i () Int) \r\n(assert (let (( ?g (select arr i)) (?e (select a 0)) (d d)) \r\n(and (forall (( ?j Int )) (xor (and (= d u)) \r\n     (forall (( ?f Int )) (<= (select arr ?f) (select arr ?j)))))( <= ?e ?g ) \r\n     (forall (( ?h Int )) (= (and (<=  d ?h 0))(= (select arr ?h ) 0)))(= (select c d) d)))) \r\n(check-sat)\r\n```\r\nZ3  nondeterministicly throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/ast/rewriter/rewriter_def.h\r\nLine: 589\r\nframe_stack().empty()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: a6fcdec\r\n",
    "priority": 1
  },
  "573": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(declare-fun d () Real)\n(declare-fun e () Real)\n(declare-fun f () Real)\n(declare-fun g () Real)\n(declare-fun h () Real)\n(declare-fun i () Real)\n(declare-fun l () Real)\n(declare-fun m () Real)\n(declare-fun p () Real)\n(assert (forall ((j Real)) (distinct (<= e 0) (distinct (<= j 0) (<= 0 (+ (* a j) c) (+ (* (/ 100 a 0) j)) e)))))\n(assert (exists ((k Real)) (=> (and (<= 0 h) (>= 0 h) (= c 1 l) (= d 0 p) (< 0 i)) (< 0 f))))\n(assert (= a m))\n(assert (= b (mod p g)))\n(check-sat)\n```\nZ3 debug branch  throws out a segmentation fault:\n```\n[709] % z3 small.smt2\nunknown\n[710] % z3debug small.smt2\nSegmentation fault\n[711] % \n[711] % cat small.smt2\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(declare-fun d () Real)\n(declare-fun e () Real)\n(declare-fun f () Real)\n(declare-fun g () Real)\n(declare-fun h () Real)\n(declare-fun i () Real)\n(declare-fun l () Real)\n(declare-fun m () Real)\n(declare-fun p () Real)\n(assert (forall ((j Real)) (distinct (<= e 0) (distinct (<= j 0) (<= 0 (+ (* a j) c) (+ (* (/ 100 a 0) j)) e)))))\n(assert (exists ((k Real)) (=> (and (<= 0 h) (>= 0 h) (= c 1 l) (= d 0 p) (< 0 i)) (< 0 f))))\n(assert (= a m))\n(assert (= b (mod p g)))\n(check-sat)\n[712] \n```\n\nOS: Ubuntu 18.04\nCommit: a02d3e9\n",
    "priority": 1
  },
  "574": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(assert (distinct 1.0 (^ 0.5 100)))\r\n(check-sat)\r\n```\r\nZ3 debug branch gives a wired message:\r\n```\r\n[505] % z3debug small.smt2\r\n(not (= 1.0 (^ (/ 1.0 2.0) 100.0))) -> (not (= 1.0 (^ (/ 1.0 2.0) 100.0)))\r\nsat\r\n[506] % \r\n[506] % cat small.smt2\r\n(assert (distinct 1.0 (^ 0.5 100)))\r\n(check-sat)\r\n```\r\nIs it expected?\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 64de08b",
    "priority": 1
  },
  "575": {
    "body": "```\r\n$z3/build-2020-03-10-7bcd345/z3 bug0_PRETTY.smt2 \r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_lra.cpp\r\nLine: 1541\r\ncan_get_ivalue(v)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n^C^C\r\n$cat bug0_PRETTY.smt2 \r\n(define-fun a () Int 10) \r\n(define-fun b () Int 0) \r\n(define-fun c () Int 1) \r\n(define-fun d () Int 5) \r\n(declare-fun s0 () Int)       \r\n(define-fun e () Int 0) \r\n(define-fun f () Int (- s0 )) \r\n(define-fun u () Int f ) \r\n(define-fun g () Int u ) \r\n(define-fun h () Bool (<= g d)) \r\n(define-fun i () Int f ) \r\n(define-fun j () Int i) \r\n(define-fun k () Int (+ c j)) \r\n(define-fun l () Int (ite h k j)) \r\n(define-fun m () Int l) \r\n(define-fun n () Int (div m a)) \r\n(define-fun o () Bool (>= m b)) \r\n(define-fun p () Bool o ) \r\n(define-fun q () Int (ite p b c)) \r\n(define-fun r () Int (* n q)) \r\n(define-fun s () Bool (distinct e r)) \r\n(define-fun t () Bool s ) \r\n(assert t)\r\n(check-sat)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 7bcd345\r\n",
    "priority": 1
  },
  "576": {
    "body": "```\r\n$~/project_share/solver_binaries/z3/build-2020-03-10-3dad24a/z3 bug0.smt2\r\nsat\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 491\r\nm_ref_count > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n^C\r\n$cat bug0.smt2 \r\n; COMMAND-LINE: --finite-model-find\r\n; EXPECT: sat\r\n;(set-logic ALL_SUPPORTED)\r\n;(set-info :status sat)\r\n(declare-sort $$unsorted 0)\r\n(declare-fun $$rtu (Real) $$unsorted)\r\n(declare-fun $$utr ($$unsorted) Real)\r\n(declare-fun p ($$unsorted) Bool)\r\n(assert (= true (= ($$utr ($$rtu 12)) 12) (= ($$utr ($$rtu (- 41 152))) (- 41 152)) ))\r\n(assert (exists ((x $$unsorted)) (p x)))\r\n(check-sat)\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3dad24a\r\n",
    "priority": 0
  },
  "577": {
    "body": "```\r\n[564] % z3 small.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_context.h\r\nLine: 277\r\ne_internalized(n)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_context.h\r\nLine: 277\r\ne_internalized(n)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[565] % \r\n[565] % cat small.smt2\r\n(set-option :rewriter.arith_ineq_lhs true)\r\n(set-option :smt.threads 2)\r\n(declare-fun g ((Array Int (Array Int Real)) Int) Bool)\r\n(declare-fun n () Int)\r\n(declare-fun a0 () (Array Int (Array Int Real)))\r\n(declare-fun e0 () Real)\r\n(declare-fun a1 () (Array Int (Array Int Real)))\r\n(declare-fun e1 () Real)\r\n(declare-fun a2 () (Array Int (Array Int Real)))\r\n(declare-fun e2 () Real)\r\n(declare-fun a3 () (Array Int (Array Int Real)))\r\n(declare-fun e3 () Real)\r\n(declare-fun a4 () (Array Int (Array Int Real)))\r\n(declare-fun e4 () Real)\r\n(declare-fun a5 () (Array Int (Array Int Real)))\r\n(declare-fun e5 () Real)\r\n(declare-fun a6 () (Array Int (Array Int Real)))\r\n(assert\r\n(forall ((?a (Array Int (Array Int Real))) (?n Int)) (distinct (g ?a ?n)\r\n(exists ((?i Int) (?j Int)) (xor (xor (<= 203 ?i) (<= ?i ?n) (> 153 ?j) (> ?j ?n)) (distinct (select (?a ?i) ?j) (select (?a ?j) ?i)))))))\r\n(assert (g a0 n))\r\n(assert (distinct a1 (store a0 208 (store (select a0 59) 32 e0))))\r\n(assert (distinct a2 (store a1 99 (store (select a1 174) 166 e1))))\r\n(assert (= a3 (store a2 243 (store (select a2 2) 247 e2))))\r\n(assert (= a4 (store a3 91 (store (select a3 19) 244 e3))))\r\n(assert (= a5 (store a4 43 (store (select a4 220) 135 e4))))\r\n(assert (= a6 (store a5 205 (store (select a5 44) 1 e5))))\r\n(assert (g a6 n))\r\n(check-sat)\r\n[566] % \r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 3dad24a\r\n",
    "priority": 1
  },
  "578": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n[925] % timeout -s 9 8 z3 small.smt2 >& out.txt\r\nKilled\r\n[926] % tail -5 out.txt\r\nASSERTION VIOLATION\r\nFile: ../src/nlsat/nlsat_solver.cpp\r\nLine: 562\r\na->ref_count() == 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n[927] % \r\n[927] % cat small.smt2\r\n(set-option :nlsat.check_lemmas true)\r\n(set-option :nlsat.shuffle_vars true)\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun s () Real)\r\n(declare-fun e () Real)\r\n(declare-fun f () Real)\r\n(declare-fun u () Real)\r\n(declare-fun g () Real)\r\n(declare-fun h () Real)\r\n(declare-fun i () Real)\r\n(declare-fun j () Real)\r\n(declare-fun k () Real)\r\n(declare-fun l () Real)\r\n(declare-fun m () Real)\r\n(declare-fun n () Real)\r\n(declare-fun t () Real)\r\n(declare-fun o () Real)\r\n(declare-fun v () Real)\r\n(declare-fun p () Real)\r\n(declare-fun q () Real)\r\n(assert (not (forall ((f Real)) (= (<= h l 0.0) (<= 0.0 g)))))\r\n(assert\r\n (exists ((r Real))\r\n  (or\r\n   (and\r\n    (or\r\n     (and\r\n      (or\r\n       (and\r\n        (and (= o q) (= (+ (* (/ 4 c g)) j) (- b u) o (/ s i)))\r\n        (< m (/ 7 a f) t))\r\n       (<= 0.0 p))\r\n      (> p (/ 4 b u)))))\r\n   (>= m (* (* (+ (+ (* (- 4 c))))) (- g))))))\r\n(assert (= c (+ g n)))\r\n(assert (distinct d (/ h q)))\r\n(assert (distinct e (/ j v k t)))\r\n(check-sat)\r\n[928] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: a09ed76\r\n",
    "priority": 0
  },
  "579": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () (Array Int Int))\r\n(assert (= (select a 0) 0))\r\n(check-sat)\r\n(check-sat)\r\n(get-model)\r\n\r\n```\r\nZ3  gives an invalid model:\r\n```\r\nsat\r\nsat\r\n(model \r\n  (define-fun a () (Array Int Int)\r\n    ((as const (Array Int Int)) 1))\r\n)\r\n```\r\nif I feed this model to the formula, Z3 reports unsat.\r\nOn the debug branch, however, Z3 reports a correct model.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: a51d65d\r\n",
    "priority": 1
  },
  "580": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :proof true)\n(declare-fun a () String)\n(declare-fun b () String)\n(declare-fun c () String)\n(declare-fun d () String)\n(declare-fun e () String)\n(declare-fun f () Bool)\n(declare-fun g () String)\n(declare-fun h () Int)\n(declare-fun i () Int)\n(declare-fun j () String)\n(declare-fun k () Bool)\n(declare-fun l () Bool)\n(declare-fun m () String)\n(declare-fun n () String)\n(declare-fun o () String)\n(assert (ite k (xor (distinct i h (str.len (str.substr o 2 (str.len j)))))\n         (str.in.re (str.substr b 2 0) (str.to.re \".\"))))\n(assert (= l (= \"\" (str.substr g 10 (str.len m))) (xor (= f l))\n         (distinct \"\"\n          (str.substr a 0\n           (str.len\n            (str.substr c 0\n             (str.len\n              (str.substr d 0\n               (str.len\n                (str.substr o\n                 (str.len j)\n                 (str.len (str.substr e 0 (str.len n)))))))))))))\n(assert (distinct f l))\n(assert (= a (str.++ n) c d o e))\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\n[919] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/ast/ast.cpp\nLine: 3194\nnum_matches == cls_sz || num_matches == cls_sz - 1\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[920] % \n[920] % cat small.smt2\n(set-option :proof true)\n(declare-fun a () String)\n(declare-fun b () String)\n(declare-fun c () String)\n(declare-fun d () String)\n(declare-fun e () String)\n(declare-fun f () Bool)\n(declare-fun g () String)\n(declare-fun h () Int)\n(declare-fun i () Int)\n(declare-fun j () String)\n(declare-fun k () Bool)\n(declare-fun l () Bool)\n(declare-fun m () String)\n(declare-fun n () String)\n(declare-fun o () String)\n(assert (ite k (xor (distinct i h (str.len (str.substr o 2 (str.len j)))))\n         (str.in.re (str.substr b 2 0) (str.to.re \".\"))))\n(assert (= l (= \"\" (str.substr g 10 (str.len m))) (xor (= f l))\n         (distinct \"\"\n          (str.substr a 0\n           (str.len\n            (str.substr c 0\n             (str.len\n              (str.substr d 0\n               (str.len\n                (str.substr o\n                 (str.len j)\n                 (str.len (str.substr e 0 (str.len n)))))))))))))\n(assert (distinct f l))\n(assert (= a (str.++ n) c d o e))\n(check-sat)\n[921] % \n```\n\nOS: Ubuntu 18.04\nCommit: a51d65d\n",
    "priority": 1
  },
  "581": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :proof true)\n(set-option :smt.dack.eq true)\n(declare-fun x () String)\n(declare-fun i () Int)\n(assert (distinct (str.at x i) \"b\"))\n(assert (xor (>= i 215) (>= i (str.len x))))\n(assert (>= (str.len x) 216))\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\n[735] % z3-4.8.7 small.smt2\nsat\n[736] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/ast/ast.h\nLine: 2277\nis_proof(p)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[737] % \n[737] % cat small.smt2\n(set-option :proof true)\n(set-option :smt.dack.eq true)\n(declare-fun x () String)\n(declare-fun i () Int)\n(assert (distinct (str.at x i) \"b\"))\n(assert (xor (>= i 215) (>= i (str.len x))))\n(assert (>= (str.len x) 216))\n(check-sat)\n```\n\nOS: Ubuntu 18.04\nCommit: a51d65d\n",
    "priority": 1
  },
  "582": {
    "body": "Hi,\nFor this formula:\n```\n(set-option :proof true)\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(declare-fun d () Real)\n(declare-fun e () Real)\n(assert (forall ((f Real)) (and (or (and (> d (/ 0 b)) (= c 0)) (<= e 0)) (= d a))))\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\n[561] % z3-4.8.7 small.smt2\nunknown\n[562] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/ast/ast.cpp\nLine: 2904\nto_app(get_fact(p1))->get_decl() == to_app(get_fact(p2))->get_decl() || ( (is_eq(get_fact(p1)) || is_oeq(get_fact(p1))) && (is_eq(get_fact(p2)) || is_oeq(get_fact(p2))))\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[563] % \n[563] % cat small.smt2\n(set-option :proof true)\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(declare-fun d () Real)\n(declare-fun e () Real)\n(assert (forall ((f Real)) (and (or (and (> d (/ 0 b)) (= c 0)) (<= e 0)) (= d a))))\n(check-sat)\n```\n\nOS: Ubuntu 18.04\nCommit: a51d65d\n",
    "priority": 1
  },
  "583": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun n () Int)\r\n(assert (= (mod n n) 1))\r\n(check-sat)\r\n(get-model)\r\n```\r\nz3 debug branch model validator throws out a model validation failure while this model is correct:\r\n```\r\n[507] % z3debug model_validate=true small.smt2 \r\nsat\r\n(error \"line 3 column 10: an invalid model was generated\")\r\n(model \r\n  (define-fun n () Int\r\n    0)\r\n)\r\n[508] % \r\n[508] % cat small.smt2 \r\n(declare-fun n () Int)\r\n(assert (= (mod n n) 1))\r\n(check-sat)\r\n(get-model)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: cb45fb2",
    "priority": 1
  },
  "584": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Bool)\n(declare-fun b () Bool)\n(assert (and (xor a b) a b))\n(check-sat)\n```\nZ3  gives an invalid model:\n```\n[773] % z3 sat.local_search=true model_validate=true small.smt2\nverifying solution\nfailed to verify: (= (not a) b)\nevaluated to false\nfailed to verify: a\nevaluated to false\nfailed to verify: b\nevaluated to false\n(params keep_cardinality_constraints true pb.solver solver xor_solver false)\nsat\n(error \"line 4 column 10: an invalid model was generated\")\n[774] % \n[774] % cat small.smt2\n(declare-fun a () Bool)\n(declare-fun b () Bool)\n(assert (and (xor a b) a b))\n(check-sat)\n\n```\n\nOS: Ubuntu 18.04\nCommit: a51d65d\n",
    "priority": 1
  },
  "585": {
    "body": "Hi,\nFor this formula:\n```\n(simplify (^ (/ (^ 22.0 (/ 3.0 5.0))) 0))\n```\nZ3  throws out an assertion violation:\n```\n[595] % z3-4.8.7 small.smt2\n1.0\n[596] % z3 small.smt2\nASSERTION VIOLATION\nFile: ../src/ast/rewriter/arith_rewriter.cpp\nLine: 1171\nnum_y.is_pos()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\na\n[597] % \n[597] % cat small.smt2\n(simplify (^ (/ (^ 22.0 (/ 3.0 5.0))) 0))\n[598] % \n```\n\nOS: Ubuntu 18.04\nCommit: a51d65d\n",
    "priority": 1
  },
  "586": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Int)\n(declare-fun b () Int)\n(declare-fun c () Int)\n(declare-fun d () Int)\n(declare-fun e () Int)\n(assert (< (+ (* (+ 2 a) (- (- 2) b) (* 30 c)) e) 0))\n(assert (> (/ 50 d e) 40))\n(assert (<= (+ 20 a b) c 60 d))\n(assert (>= e 2))\n(check-sat)\n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/lp/nla_order_lemmas.cpp\nLine: 343\nsign * val(m) < val(a) * val(b)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: d68c114\n",
    "priority": 1
  },
  "587": {
    "body": "Hi,\nFor this formula:\n```\n(assert (exists ((a Real)) (and (not (is_int a)) (> (/ 0 a) 0))))\n(check-sat)\n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/lp/int_solver.cpp\nLine: 427\nlrac.m_r_solver.calc_current_x_is_feasible_include_non_basis() == lrac.m_r_solver.current_x_is_feasible()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: d68c114\n",
    "priority": 1
  },
  "588": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real)\n(declare-fun mWoMy_new () Real)\n(declare-fun d () Real)\n(declare-fun af () Real)\n(declare-fun ag () Real)\n(declare-fun j () Real)\n(declare-fun b () Real)\n(declare-fun ah () Real)\n(declare-fun c () Real)\n(declare-fun aj () Real)\n(declare-fun ai () Real)\n(declare-fun e () Real)\n(declare-fun aa () Real)\n(declare-fun ctphm_new () Real)\n(declare-fun g () Real)\n(declare-fun h () Real)\n(declare-fun i () Real)\n(declare-fun k () Real)\n(declare-fun l () Real)\n(declare-fun m () Real)\n(declare-fun n () Real)\n(declare-fun o () Real)\n(declare-fun p () Real)\n(declare-fun q () Real)\n(declare-fun r () Real)\n(declare-fun s () Real)\n(declare-fun t () Real)\n(declare-fun u () Real)\n(declare-fun ep () Real)\n(declare-fun v () Real)\n(declare-fun w () Real)\n(declare-fun x () Real)\n(declare-fun y () Real)\n(declare-fun z () Real)\n(declare-fun ab () Real)\n(declare-fun ak () Real)\n(declare-fun ac () Real)\n(declare-fun ad () Real)\n(declare-fun ae () Real)\n(assert\n (not\n  (exists ((o Real))\n   (or\n    (and\n     (or\n      (and\n       (or\n        (and\n         (or\n          (and\n           (distinct (- d) d)\n           (= (- ai w) 0.0 (- b (- ah o)))\n           (distinct (/ 7 b (+ 27 ah o)) 2.0) (= p 2.0))\n          (>= (+ s (* 0 (* 2.0 (- (- 1 aj r))))) 0)\n          (distinct q 2.0))\n         (< 0 r ag))\n        (> 0.0 h))\n       (<= h u))\n      (<= 0.0 l)\n      (> l u))\n     (>= 0.0 (* af (- j l)))\n     (<= 0.0 u))\n    (< 0.0 ep)\n    (and\n     (= (* e x) (- g ac))\n     (> 0.0 (- mWoMy_new (- j)))\n     (=>\n      (=>\n       (or (<= 0.0 o) (<= o (- mWoMy_new (* 9 j l))))\n       (and\n        (<= (- ai w) u)\n        (<= 0.0 (+ (* (+ 41 af) o) m))\n        (>= (+ (* (- af (/ 76 j l)) o) m) u)\n        (<= (+ o 0.0) ep)))\n      (= c 2.0)))))))\n(assert\n (not\n  (exists ((f Real))\n   (=>\n    (and\n     (or\n      (and\n       (or\n        (and\n         (=>\n          (<= 0.0 (- ctphm_new ep))\n          (<= (- 5 ctphm_new ep) 0)\n          (or\n           (and\n            (<= 0.0 (+ (* (* (* 6 1.0) ak) (- 255 ctphm_new ep)) (- aa u)))\n            (<= (+ (* (* 4 ak) (+ 11 ctphm_new ep)) 0) y))\n           (< ctphm_new ad)))\n         (<= 0.0 (- a h)))\n        (<= 0.0 (- aa u)))\n       (>= (- aa u) y)))\n     (<= 0.0 (- 8 b n))\n     (<= n y (+ 9 mWoMy_new i))\n     (< 0.0 y)\n     (< 0.0 ad))\n    (or (= ae 2.0) (<= (/ 91 (* (- (- 1.0) ak) (- a h)) (- aa u)) y))))))\n(assert (= a (+ h ac)))\n(assert (= mWoMy_new (* i z)))\n(assert (= af (+ k z)))\n(assert (= j (+ l z)))\n(assert (= b (+ n w)))\n(assert (= ah (+ o w)))\n(assert (= e (/ t x)))\n(assert (= aa (+ u ab)))\n(assert (= g (/ v ac)))\n(check-sat)\n```\nZ3 debug branch  throws out a segmentation fault.\n\nOS: Ubuntu 18.04\nCommit: d68c114\n",
    "priority": 1
  },
  "589": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun x () (_ FloatingPoint 40 60))\r\n(declare-fun y () (_ BitVec 8))\r\n(assert (= ((_ fp.to_ubv 8) RTP x) y #x00))\r\n(check-sat)\r\n```\r\nZ3  throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/util/mpf.cpp\r\nLine: 1192\r\nt.exponent() < INT_MAX\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n\r\n```\r\nRenaming the variables from x and y to a and b respectively hides the bug.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 7d976e4\r\n",
    "priority": 1
  },
  "590": {
    "body": "Hi,\r\non the following formula Z3 throws a segfault.\r\n\r\n```\r\n(declare-fun a () String)\r\n(declare-fun b () Int)\r\n(declare-fun c () Int)\r\n(declare-fun d () Int)\r\n(declare-fun e () Int)\r\n(assert (or (> b 9) (<= c 51) (> (+ 6 b c) (str.len a))))\r\n(assert (and (<= d 95) (> e 88) (>= (* d e) (str.len a))))\r\n(assert (= \"efg\" (str.substr a b c)))\r\n(assert (= \"bef\" (str.substr a d e)))\r\n(assert (> (str.len a) 12))\r\n(check-sat)\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: e0411c18a123ab8dc1a78ba58b6cdcc12b585815",
    "priority": 1
  },
  "591": {
    "body": "Hi,\r\non the following formula Z3 throws an assertion violation\r\n```\r\n(declare-fun a () Int)\r\n(declare-fun b () Int)\r\n(declare-fun c () Int)\r\n(assert (<= (+ (* 1 c) (* 4 b)) 0.8))\r\n(assert (> (* 3 a a) (- (* c 13) 3) 0))\r\n(check-sat)\r\n```\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/math/lp/lar_solver.cpp\r\nLine: 2252\r\nb.is_int()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: e0411c18a123ab8dc1a78ba58b6cdcc12b585815",
    "priority": 1
  },
  "592": {
    "body": "Hi,\r\non the following formula Z3 throws a segfault\r\n```\r\n(declare-fun a () Real)\r\n(assert\r\n (forall ((b Real) (c Real))\r\n  (or\r\n   (and (>= (+ (/ 2 c) b (* 3 a)) (- 50))\r\n    (not (= (+ (* (- 100) c) (/ 5 a)) 0))\r\n    (not (= (- (- b) (* 100 a)) 5)))\r\n   (and (<= (+ (- (* (- 100) c) (* 50 b)) (* (- 100) a)) 8)\r\n    (= (+ (* (- 20 c) (* 10 b)) (/ 80 a)) 4)\r\n    (not (= (+ (- b) (/ 3 a)) 0))))))\r\n(check-sat)\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: e0411c18a123ab8dc1a78ba58b6cdcc12b585815",
    "priority": 1
  },
  "593": {
    "body": "Z3 returns a wrong model for this formula\r\n```\r\n(declare-fun a () Int)\r\n(declare-fun b () Int)\r\n(assert (= (div a (- 2 b)) 2))\r\n(check-sat)\r\n(get-model)\r\n```\r\n```\r\nsat\r\n(model \r\n  (define-fun b () Int\r\n    0)\r\n  (define-fun a () Int\r\n    2)\r\n  (define-fun div0 ((x!0 Int) (x!1 Int)) Int\r\n    2)\r\n)\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: e0411c1",
    "priority": 1
  },
  "594": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun v34530848 () (_ BitVec 32))\r\n(declare-fun o56600044 () (_ BitVec 64))\r\n(declare-fun v58558432 () (_ BitVec 64))\r\n(declare-fun o44159340 () (_ BitVec 64))\r\n(declare-fun o26080216 () (_ BitVec 32))\r\n(declare-fun o46865116 () (_ BitVec 64))\r\n(declare-fun o40655748 () (_ BitVec 64))\r\n(declare-fun o37164884 () (_ BitVec 1))\r\n(declare-fun o30716620 () (_ BitVec 1))\r\n(declare-fun v42550544 () (_ BitVec 64))\r\n(declare-fun o58296580 () (_ BitVec 1))\r\n(declare-fun o57977568 () (_ BitVec 32))\r\n(declare-fun o45336256 () (_ BitVec 1))\r\n(declare-fun v59808052 () (_ BitVec 32))\r\n(declare-fun v33731576 () (_ BitVec 64))\r\n(declare-fun o41590260 () (_ BitVec 1))\r\n(declare-fun v39752780 () (_ BitVec 32))\r\n(declare-fun o37341648 () (_ BitVec 1))\r\n(declare-fun o38631376 () (_ BitVec 32))\r\n(declare-fun o29742548 () (_ BitVec 32))\r\n(declare-fun o44019496 () (_ BitVec 1))\r\n(declare-fun o40480784 () (_ BitVec 32))\r\n(declare-fun o38023584 () (_ BitVec 32))\r\n(declare-fun o45835060 () (_ BitVec 1))\r\n(declare-fun o32386268 () (_ BitVec 1))\r\n(declare-fun o41423944 () (_ BitVec 1))\r\n(declare-fun o34505900 () (_ BitVec 1))\r\n(declare-fun v27192016 () (_ BitVec 32))\r\n(declare-fun o26004364 () (_ BitVec 1))\r\n(declare-fun v25579772 () (_ BitVec 64))\r\n(declare-fun o27161724 () (_ BitVec 1))\r\n(declare-fun v27371316 () (_ BitVec 64))\r\n(declare-fun o27368584 () (_ BitVec 1))\r\n(declare-fun v23087852 () (_ BitVec 32))\r\n(declare-fun v27251468 () (_ BitVec 64))\r\n(declare-fun o34647496 () (_ BitVec 1))\r\n(declare-fun o27696588 () (_ BitVec 32))\r\n(declare-fun o55581876 () (_ BitVec 32))\r\n(declare-fun o34707060 () (_ BitVec 1))\r\n(declare-fun o27371360 () (_ BitVec 1))\r\n(declare-fun o22734244 () (_ BitVec 1))\r\n(declare-fun o38182564 () (_ BitVec 1))\r\n(declare-fun o28047740 () (_ BitVec 1))\r\n(declare-fun o57596048 () (_ BitVec 1))\r\n(declare-fun o35886376 () (_ BitVec 1))\r\n(declare-fun o54178128 () (_ BitVec 64))\r\n(declare-fun o54466972 () (_ BitVec 1))\r\n(declare-fun v57425120 () (_ BitVec 1))\r\n(declare-fun v23576252 () (_ BitVec 32))\r\n(declare-fun o23576292 () (_ BitVec 1))\r\n(declare-fun o27216896 () (_ BitVec 1))\r\n(declare-fun o53157812 () (_ BitVec 1))\r\n(declare-fun o24604172 () (_ BitVec 1))\r\n(declare-fun o27365288 () (_ BitVec 1))\r\n(declare-fun o55221556 () (_ BitVec 1))\r\n(declare-fun o26636776 () (_ BitVec 1))\r\n(declare-fun o30739352 () (_ BitVec 1))\r\n(declare-fun o29634232 () (_ BitVec 1))\r\n(declare-fun o32741984 () (_ BitVec 1))\r\n(declare-fun o39966744 () (_ BitVec 1))\r\n(declare-fun o27652628 () (_ BitVec 1))\r\n(declare-fun v23913312 () (_ BitVec 32))\r\n(declare-fun o27356304 () (_ BitVec 1))\r\n(declare-fun o49337968 () (_ BitVec 1))\r\n(declare-fun o40146988 () (_ BitVec 1))\r\n(declare-fun o37990956 () (_ BitVec 1))\r\n(declare-fun o39347004 () (_ BitVec 1))\r\n(declare-fun o49111032 () (_ BitVec 1))\r\n(declare-fun o39105652 () (_ BitVec 1))\r\n(declare-fun o44889412 () (_ BitVec 1))\r\n(declare-fun o27204788 () (_ BitVec 1))\r\n(declare-fun v28048172 () (_ BitVec 32))\r\n(declare-fun o36659632 () (_ BitVec 1))\r\n(declare-fun v24997860 () (_ BitVec 32))\r\n(declare-fun o19806348 () (_ BitVec 1))\r\n(declare-fun o27191972 () (_ BitVec 1))\r\n(declare-fun o22707364 () (_ BitVec 1))\r\n(declare-fun o24312272 () (_ BitVec 1))\r\n(declare-fun o28064628 () (_ BitVec 1))\r\n(declare-fun o34571448 () (_ BitVec 1))\r\n(declare-fun v59557908 () (_ BitVec 32))\r\n(declare-fun o39248848 () (_ BitVec 1))\r\n(declare-fun o25944840 () (_ BitVec 8))\r\n(declare-fun o37334172 () (_ BitVec 1))\r\n(declare-fun o59106472 () (_ BitVec 1))\r\n(declare-fun v37097508 () (_ BitVec 64))\r\n(declare-fun o35024652 () (_ BitVec 1))\r\n(declare-fun v30807672 () (_ BitVec 64))\r\n(declare-fun o30151692 () (_ BitVec 1))\r\n(declare-fun v58757132 () (_ BitVec 32))\r\n(declare-fun o39098944 () (_ BitVec 1))\r\n(declare-fun o41872052 () (_ BitVec 32))\r\n(declare-fun o29365016 () (_ BitVec 32))\r\n(declare-fun o54457312 () (_ BitVec 1))\r\n(declare-fun o31937916 () (_ BitVec 1))\r\n(declare-fun o28057668 () (_ BitVec 1))\r\n(declare-fun o30709420 () (_ BitVec 1))\r\n(declare-fun o31644712 () (_ BitVec 1))\r\n(declare-fun o57918236 () (_ BitVec 1))\r\n(declare-fun o27251412 () (_ BitVec 1))\r\n(declare-fun o28366792 () (_ BitVec 1))\r\n(declare-fun o57655192 () (_ BitVec 1))\r\n(declare-fun o46697596 () (_ BitVec 1))\r\n(declare-fun o23449468 () (_ BitVec 1))\r\n(declare-fun o37636388 () (_ BitVec 1))\r\n(declare-fun o44002088 () (_ BitVec 1))\r\n(declare-fun o31960168 () (_ BitVec 1))\r\n(declare-fun o26920728 () (_ BitVec 1))\r\n(declare-fun v58761740 () (_ BitVec 32))\r\n(declare-fun v33766424 () (_ BitVec 32))\r\n(declare-fun o50628484 () (_ BitVec 1))\r\n(declare-fun o32948252 () (_ BitVec 32))\r\n(declare-fun o28530424 () (_ BitVec 32))\r\n(declare-fun o35260576 () (_ BitVec 32))\r\n(declare-fun o26374544 () (_ BitVec 1))\r\n(declare-fun o38443564 () (_ BitVec 1))\r\n(declare-fun o34397828 () (_ BitVec 1))\r\n(declare-fun v38212216 () (_ BitVec 32))\r\n(declare-fun v39352032 () (_ BitVec 64))\r\n(declare-fun o28521468 () (_ BitVec 1))\r\n(declare-fun o30774992 () (_ BitVec 32))\r\n(declare-fun o29773024 () (_ BitVec 32))\r\n(declare-fun o56849564 () (_ BitVec 1))\r\n(declare-fun o34513036 () (_ BitVec 32))\r\n(declare-fun o28380212 () (_ BitVec 32))\r\n(declare-fun o37780972 () (_ BitVec 32))\r\n(declare-fun o32138288 () (_ BitVec 1))\r\n(declare-fun o57851316 () (_ BitVec 1))\r\n(declare-fun o53225496 () (_ BitVec 1))\r\n(declare-fun v34512820 () (_ BitVec 64))\r\n(declare-fun v25544804 () (_ BitVec 64))\r\n(declare-fun o38466632 () (_ BitVec 1))\r\n(declare-fun o55604848 () (_ BitVec 1))\r\n(declare-fun v37225912 () (_ BitVec 64))\r\n(declare-fun o38610664 () (_ BitVec 1))\r\n(declare-fun o31154064 () (_ BitVec 1))\r\n(declare-fun o22232900 () (_ BitVec 1))\r\n(declare-fun o39871124 () (_ BitVec 1))\r\n(declare-fun o38115512 () (_ BitVec 1))\r\n(declare-fun o38328284 () (_ BitVec 1))\r\n(declare-fun o37525908 () (_ BitVec 1))\r\n(declare-fun o34412528 () (_ BitVec 1))\r\n(declare-fun o33109316 () (_ BitVec 1))\r\n(declare-fun o38574276 () (_ BitVec 1))\r\n(declare-fun o28313388 () (_ BitVec 1))\r\n(declare-fun o26626548 () (_ BitVec 1))\r\n(declare-fun o26275912 () (_ BitVec 1))\r\n(declare-fun o31621160 () (_ BitVec 1))\r\n(declare-fun o34032124 () (_ BitVec 1))\r\n(declare-fun o27939316 () (_ BitVec 1))\r\n(declare-fun o39318660 () (_ BitVec 1))\r\n(declare-fun o35618596 () (_ BitVec 1))\r\n(declare-fun o37965544 () (_ BitVec 1))\r\n(declare-fun v26462992 () (_ BitVec 64))\r\n(declare-fun v56881024 () (_ BitVec 32))\r\n(declare-fun v41424436 () (_ BitVec 8))\r\n(declare-fun o24859988 () (_ BitVec 8))\r\n(declare-fun o41093912 () (_ BitVec 32))\r\n(declare-fun o24260108 () (_ BitVec 32))\r\n(declare-fun o32698032 () (_ BitVec 32))\r\n(declare-fun o34478936 () (_ BitVec 64))\r\n(declare-fun o38128916 () (_ BitVec 64))\r\n(declare-fun o57655152 () (_ BitVec 64))\r\n(declare-fun v39178776 () (_ BitVec 64))\r\n(declare-fun v40223568 () (_ BitVec 8))\r\n(declare-fun o35523984 () (_ BitVec 8))\r\n(declare-fun o43805236 () (_ BitVec 32))\r\n(declare-fun o27753132 () (_ BitVec 64))\r\n(declare-fun o29567480 () (_ BitVec 64))\r\n(declare-fun o24737520 () (_ BitVec 64))\r\n(declare-fun o39152132 () (_ BitVec 1))\r\n(declare-fun v26939464 () (_ BitVec 64))\r\n(declare-fun v32409348 () (_ BitVec 8))\r\n(declare-fun o43931552 () (_ BitVec 8))\r\n(declare-fun o40560064 () (_ BitVec 32))\r\n(declare-fun o41340936 () (_ BitVec 64))\r\n(declare-fun o58064856 () (_ BitVec 64))\r\n(declare-fun o27283196 () (_ BitVec 64))\r\n(declare-fun o34779636 () (_ BitVec 1))\r\n(declare-fun o32884692 () (_ BitVec 1))\r\n(declare-fun o34903864 () (_ BitVec 1))\r\n(declare-fun v33007480 () (_ BitVec 1))\r\n(declare-fun v45966220 () (_ BitVec 32))\r\n(declare-fun o33880648 () (_ BitVec 1))\r\n(declare-fun o33517128 () (_ BitVec 1))\r\n(declare-fun v26540916 () (_ BitVec 1))\r\n(declare-fun o38400048 () (_ BitVec 1))\r\n(declare-fun v37484248 () (_ BitVec 32))\r\n(declare-fun v36475448 () (_ BitVec 8))\r\n(declare-fun o26146080 () (_ BitVec 8))\r\n(declare-fun o28182872 () (_ BitVec 32))\r\n(declare-fun o37950020 () (_ BitVec 32))\r\n(declare-fun o28628536 () (_ BitVec 32))\r\n(declare-fun o30553308 () (_ BitVec 1))\r\n(declare-fun o39712244 () (_ BitVec 64))\r\n(declare-fun v32057092 () (_ BitVec 64))\r\n(declare-fun v43913024 () (_ BitVec 8))\r\n(declare-fun o34887868 () (_ BitVec 8))\r\n(declare-fun o42541612 () (_ BitVec 32))\r\n(declare-fun o52977668 () (_ BitVec 64))\r\n(declare-fun o58477408 () (_ BitVec 64))\r\n(declare-fun o59618444 () (_ BitVec 64))\r\n(declare-fun o39230308 () (_ BitVec 64))\r\n(declare-fun v45806748 () (_ BitVec 32))\r\n(declare-fun v25004016 () (_ BitVec 8))\r\n(declare-fun o40518776 () (_ BitVec 8))\r\n(declare-fun o26681376 () (_ BitVec 32))\r\n(declare-fun o29909212 () (_ BitVec 32))\r\n(declare-fun o25117196 () (_ BitVec 32))\r\n(declare-fun o34653732 () (_ BitVec 64))\r\n(declare-fun o34876180 () (_ BitVec 1))\r\n(declare-fun o26010024 () (_ BitVec 1))\r\n(declare-fun o58613852 () (_ BitVec 1))\r\n(declare-fun o27457776 () (_ BitVec 1))\r\n(declare-fun v40989608 () (_ BitVec 32))\r\n(declare-fun v50911408 () (_ BitVec 32))\r\n(declare-fun o33758708 () (_ BitVec 32))\r\n(declare-fun o30855544 () (_ BitVec 32))\r\n(declare-fun o32689856 () (_ BitVec 32))\r\n(declare-fun o34766552 () (_ BitVec 1))\r\n(declare-fun o25338912 () (_ BitVec 1))\r\n(declare-fun o38101044 () (_ BitVec 1))\r\n(declare-fun o35845404 () (_ BitVec 1))\r\n(declare-fun Fresh__0 () (_ BitVec 1))\r\n(declare-fun Fresh__1 () (_ BitVec 1))\r\n(declare-fun Fresh__2 () (_ BitVec 1))\r\n(declare-fun Fresh__3 () (_ BitVec 1))\r\n(declare-fun Fresh__4 () (_ BitVec 1))\r\n(declare-fun Fresh__5 () (_ BitVec 1))\r\n(declare-fun Fresh__6 () (_ BitVec 1))\r\n(declare-fun Fresh__7 () (_ BitVec 1))\r\n(declare-fun Fresh__8 () (_ BitVec 1))\r\n(declare-fun Fresh__9 () (_ BitVec 1))\r\n(declare-fun Fresh__10 () (_ BitVec 1))\r\n(declare-fun Fresh__11 () (_ BitVec 1))\r\n(declare-fun Fresh__12 () (_ BitVec 1))\r\n(declare-fun Fresh__13 () (_ BitVec 1))\r\n(declare-fun Fresh__14 () (_ BitVec 1))\r\n(declare-fun Fresh__15 () (_ BitVec 1))\r\n(declare-fun Fresh__16 () (_ BitVec 1))\r\n(declare-fun Fresh__17 () (_ BitVec 1))\r\n(declare-fun Fresh__18 () (_ BitVec 1))\r\n(declare-fun Fresh__19 () (_ BitVec 1))\r\n(declare-fun Fresh__20 () (_ BitVec 1))\r\n(declare-fun Fresh__21 () (_ BitVec 1))\r\n(declare-fun Fresh__22 () (_ BitVec 1))\r\n(declare-fun Fresh__23 () (_ BitVec 1))\r\n(declare-fun Fresh__24 () (_ BitVec 1))\r\n(declare-fun Fresh__25 () (_ BitVec 1))\r\n(declare-fun Fresh__26 () (_ BitVec 1))\r\n(declare-fun Fresh__27 () (_ BitVec 1))\r\n(declare-fun Fresh__28 () (_ BitVec 1))\r\n(declare-fun Fresh__29 () (_ BitVec 1))\r\n(declare-fun Fresh__30 () (_ BitVec 1))\r\n(declare-fun Fresh__31 () (_ BitVec 1))\r\n(declare-fun Fresh__33 () (_ BitVec 1))\r\n(declare-fun Fresh__34 () (_ BitVec 1))\r\n(declare-fun Fresh__35 () (_ BitVec 1))\r\n(declare-fun Fresh__36 () (_ BitVec 1))\r\n(declare-fun Fresh__37 () (_ BitVec 1))\r\n(declare-fun Fresh__38 () (_ BitVec 1))\r\n(declare-fun Fresh__39 () (_ BitVec 1))\r\n(declare-fun Fresh__40 () (_ BitVec 1))\r\n(declare-fun Fresh__41 () (_ BitVec 1))\r\n(declare-fun Fresh__42 () (_ BitVec 1))\r\n(declare-fun Fresh__43 () (_ BitVec 1))\r\n(declare-fun Fresh__44 () (_ BitVec 1))\r\n(declare-fun Fresh__45 () (_ BitVec 1))\r\n(declare-fun Fresh__46 () (_ BitVec 1))\r\n(declare-fun Fresh__47 () (_ BitVec 1))\r\n(declare-fun Fresh__48 () (_ BitVec 1))\r\n(declare-fun Fresh__50 () (_ BitVec 1))\r\n(declare-fun Fresh__51 () (_ BitVec 1))\r\n(declare-fun Fresh__52 () (_ BitVec 1))\r\n(declare-fun Fresh__53 () (_ BitVec 1))\r\n(declare-fun Fresh__54 () (_ BitVec 1))\r\n(declare-fun Fresh__55 () (_ BitVec 1))\r\n(assert (= o56600044 ((_ sign_extend 32) v34530848)))\r\n(assert (= o44159340 (bvadd o56600044 v58558432)))\r\n(assert (= o26080216 ((_ extract 31 0) o44159340)))\r\n(assert (= o46865116 (bvadd ((_ extract 63 0) (_ bv18446744073709551615 64)))))\r\n(assert (= o40655748 (bvudiv o46865116 o56600044)))\r\n(assert (= (= Fresh__0 (_ bv1 1)) (bvult ((_ extract 63 0) (_ bv0 64)) o40655748)))\r\n(assert (= o37164884 Fresh__0))\r\n(assert (= (= Fresh__1 (_ bv1 1)) (distinct ((_ extract 63 0) (_ bv0 64)) v58558432)))\r\n(assert (= o30716620 Fresh__1))\r\n(assert (= o58296580 Fresh__2))\r\n(assert (= o57977568 (ite (= o58296580 (_ bv1 1)) ((_ extract 31 0) (_ bv18446744073709551615 64)) ((_ extract 31 0) (_ bv0 64)))))\r\n(assert (= o45336256 Fresh__3))\r\n(assert (= (= Fresh__4 (_ bv1 1)) (bvslt v33731576 ((_ extract 63 0) (_ bv0 64)))))\r\n(assert (= o41590260 Fresh__4))\r\n(assert (= (= Fresh__5 (_ bv1 1)) (bvult v33731576 ((_ extract 63 0) (_ bv24 64)))))\r\n(assert (= o37341648 Fresh__5))\r\n(assert (= o38631376 (ite (= o37341648 (_ bv1 1)) ((_ extract 31 0) (_ bv18446744073709551615 64)) ((_ extract 31 0) (_ bv0 64)))))\r\n(assert (= o29742548 (ite (= o41590260 (_ bv1 1)) v39752780 o38631376)))\r\n(assert (= (= Fresh__6 (_ bv1 1)) (bvslt o29742548 ((_ extract 31 0) (_ bv0 64)))))\r\n(assert (= o44019496 Fresh__6))\r\n(assert (= o40480784 (ite (= o44019496 (_ bv1 1)) ((_ extract 31 0) (_ bv18446744073709551615 64)) ((_ extract 31 0) (_ bv0 64)))))\r\n(assert (= o38023584 (ite (= o45336256 (_ bv1 1)) v59808052 o40480784)))\r\n(assert (= (= Fresh__7 (_ bv1 1)) (bvsle ((_ extract 31 0) (_ bv0 64)) o38023584)))\r\n(assert (= (= Fresh__8 (_ bv1 1)) (bvsle ((_ extract 63 0) (_ bv0 64)) v42550544)))\r\n(assert (= Fresh__8 (bvand  o32386268) o34505900 (ite (= o58296580 (_ bv1 1)) ((_ extract 0 0) (_ bv1 64)) o41423944)))\r\n(assert (= (= Fresh__9 (_ bv1 1)) (bvult ((_ extract 31 0) (_ bv0 64)) v27192016)))\r\n(assert (= o26004364 Fresh__9))\r\n(assert (= (= Fresh__10 (_ bv1 1)) (bvslt v25579772 ((_ extract 63 0) (_ bv0 64)))))\r\n(assert (= o27161724 Fresh__10))\r\n(assert (= (= Fresh__11 (_ bv1 1)) (bvslt v27371316 ((_ extract 63 0) (_ bv0 64)))))\r\n(assert (= o27368584 Fresh__11))\r\n(assert (= (= Fresh__12 (_ bv1 1)) (bvult v27371316 v27251468)))\r\n(assert (= o34647496 Fresh__12))\r\n(assert (= o27696588 (ite (= o34647496 (_ bv1 1)) ((_ extract 31 0) (_ bv18446744073709551615 64)) ((_ extract 31 0) (_ bv0 64)))))\r\n(assert (= o55581876 (ite (= o27368584 (_ bv1 1)) v23087852 o27696588)))\r\n(assert (= (= Fresh__13 (_ bv1 1)) (bvslt o55581876 ((_ extract 31 0) (_ bv0 64)))))\r\n(assert (= o34707060 Fresh__13))\r\n(assert (= (= Fresh__14 (_ bv1 1)) (bvsle ((_ extract 63 0) (_ bv0 64)) v27371316)))\r\n(assert (= Fresh__14 o22734244 (bvand  o27371360)))\r\n(assert (= (= Fresh__15 (_ bv1 1)) (bvule v27251468 v27371316)))\r\n(assert (= o38182564 Fresh__15))\r\n(assert (= o57596048 (ite (= o34647496 (_ bv1 1)) o22734244 o28047740)))\r\n(assert (= o35886376 (ite (= o27368584 (_ bv1 1)) ((_ extract 0 0) (_ bv1 64)) o57596048)))\r\n(assert (= o54178128 (bvshl v27251468 (concat (_ bv0 56) ((_ extract 7 0) (_ bv3 64))))))\r\n(assert (= (= Fresh__16 (_ bv1 1)) (bvule o54178128 ((_ extract 63 0) (_ bv0 64)))))\r\n(assert (= o54466972 Fresh__16))\r\n(assert (= (= Fresh__17 (_ bv1 1)) (distinct  v23576252)))\r\n(assert (= Fresh__17 o27216896 (bvand  o23576292)))\r\n(assert (= o53157812 (ite (= v57425120 (_ bv1 1)) o27216896 v57425120)))\r\n(assert (= (= Fresh__18 (_ bv1 1)) (bvsle ((_ extract 63 0) (_ bv0 64)) v25579772)))\r\n(assert (= o24604172 Fresh__18 (bvand  o24604172) o55221556 (bvand o53157812 o27365288)))\r\n(assert (= o26636776 (bvand o54466972 o55221556)))\r\n(assert (= o30739352 (bvand o26636776)))\r\n(assert (= o32741984 (bvand o54466972 )))\r\n(assert (= o39966744 (ite (distinct v57425120 (_ bv1 1)) o32741984 ((_ extract 0 0) (_ bv1 64)))))\r\n(assert (= o27652628 (bvand o29634232 o39966744)))\r\n(assert (= (= Fresh__19 (_ bv1 1)) (bvslt v23913312 ((_ extract 31 0) (_ bv0 64)))))\r\n(assert (= o27356304 Fresh__19))\r\n(assert (= (= Fresh__20 (_ bv1 1)) (bvsle ((_ extract 31 0) (_ bv0 64)) o55581876)))\r\n(assert (= o49337968 Fresh__20))\r\n(assert (= o40146988 (bvand o30739352 o49337968)))\r\n(assert (= o37990956 (bvand o40146988)))\r\n(assert (= (= Fresh__21 (_ bv1 1)) (bvsle ((_ extract 31 0) (_ bv0 64)) v23913312)))\r\n(assert (= (ite (= o27356304 (_ bv1 1)) o39347004 o49111032) o44889412 (ite (distinct o34707060 (_ bv1 1)) o27652628 o39105652)))\r\n(assert (= o27204788 (ite (= o27161724 (_ bv1 1)) ((_ extract 0 0) (_ bv1 64)) o44889412)))\r\n(assert (= (= Fresh__22 (_ bv1 1)) (bvsle ((_ extract 31 0) (_ bv0 64)) v28048172)))\r\n(assert (= o36659632 Fresh__22))\r\n(assert (= (= Fresh__23 (_ bv1 1)) (distinct v24997860 ((_ extract 31 0) (_ bv0 64)))))\r\n(assert (= Fresh__23 o27191972 (bvand  o19806348)))\r\n(assert (= (= Fresh__24 (_ bv1 1)) (distinct ((_ extract 31 0) (_ bv0 64)) v27192016)))\r\n(assert (= o22707364 Fresh__24))\r\n(assert (= o24312272 (bvand o27191972 o22707364)))\r\n(assert (= (bvand o36659632 o24312272) o34571448 (bvand o28064628 )))\r\n(assert (= (= Fresh__25 (_ bv1 1)) (distinct  v59557908)))\r\n(assert (= o39248848 Fresh__25))\r\n(assert (= (= Fresh__26 (_ bv1 1)) (distinct o25944840 )))\r\n(assert (= o37334172 Fresh__26))\r\n(assert (= o59106472 (bvand o34571448 o37334172)))\r\n(assert (= (= Fresh__27 (_ bv1 1)) (bvslt v37097508 ((_ extract 63 0) (_ bv0 64)))))\r\n(assert (= o35024652 Fresh__27))\r\n(assert (= (= Fresh__28 (_ bv1 1)) (bvslt v30807672 ((_ extract 63 0) (_ bv0 64)))))\r\n(assert (= o30151692 Fresh__28))\r\n(assert (= (= Fresh__29 (_ bv1 1)) (bvult v30807672 ((_ extract 63 0) (_ bv96 64)))))\r\n(assert (= o39098944 Fresh__29))\r\n(assert (= o41872052 (ite (= o39098944 (_ bv1 1)) ((_ extract 31 0) (_ bv18446744073709551615 64)) ((_ extract 31 0) (_ bv0 64))) o29365016 (ite (= o30151692 (_ bv1 1)) v58757132 o41872052)))\r\n(assert (= o54457312 Fresh__30))\r\n(assert (= (= Fresh__31 (_ bv1 1)) (bvsle ((_ extract 63 0) (_ bv0 64)) v30807672)))\r\n(assert (= o31937916 Fresh__31))\r\n(assert (= (bvand o28057668 o30709420) o57918236 (ite (= o39098944 (_ bv1 1)) o28057668 o31644712)))\r\n(assert (= o27251412 (ite (= o30151692 (_ bv1 1)) ((_ extract 0 0) (_ bv1 64)) o57918236)))\r\n(assert (= (= Fresh__33 (_ bv1 1)) (bvsle ((_ extract 63 0) (_ bv0 64)) v37097508)))\r\n(assert (= o57655192 (bvand  o28366792) o46697596 ))\r\n(assert (= (= Fresh__34 (_ bv1 1)) (bvsle ((_ extract 31 0) (_ bv0 64)) o29365016)))\r\n(assert (= o23449468 Fresh__34))\r\n(assert (= o37636388 (bvand o23449468 o46697596)))\r\n(assert (= o44002088 (ite (= o54457312 (_ bv1 1)) o46697596 o37636388)))\r\n(assert (= o31960168 (ite (= o35024652 (_ bv1 1)) ((_ extract 0 0) (_ bv1 64)) o44002088) o26920728 (bvand o59106472 o31960168)))\r\n(assert (= (= Fresh__35 (_ bv1 1)) (= v33766424 ((_ extract 31 0) (_ bv0 64)))))\r\n(assert (= o50628484 Fresh__35))\r\n(assert (= (ite (= o50628484 (_ bv1 1)) ((_ extract 31 0) (_ bv0 64)) ((_ extract 31 0) (_ bv18446744073709551615 64))) o28530424 (ite (= o54457312 (_ bv1 1)) v58761740 o32948252)))\r\n(assert (= o35260576 (ite (= o35024652 (_ bv1 1)) v58761740 o28530424)))\r\n(assert (= (= Fresh__36 (_ bv1 1)) (bvsle ((_ extract 31 0) (_ bv0 64)) o35260576)))\r\n(assert (= o26374544 Fresh__36))\r\n(assert (= o38443564 (bvand o26920728 o26374544)))\r\n(assert (= o34397828 (bvand o27204788 o38443564)))\r\n(assert (= (= Fresh__37 (_ bv1 1)) (bvult v27371316 v39352032)))\r\n(assert (= o30774992 (ite (= o28521468 (_ bv1 1)) ((_ extract 31 0) (_ bv18446744073709551615 64)) ((_ extract 31 0) (_ bv0 64)))))\r\n(assert (= o29773024 (ite (= o27368584 (_ bv1 1)) v23087852 o30774992)))\r\n(assert (= (= Fresh__38 (_ bv1 1)) (bvslt o29773024 ((_ extract 31 0) (_ bv0 64)))))\r\n(assert (= o56849564 Fresh__38))\r\n(assert (= o34513036 (ite (= o27356304 (_ bv1 1)) ((_ extract 31 0) (_ bv0 64)) v23576252)))\r\n(assert (distinct o28380212 (ite (= o56849564 (_ bv1 1)) v38212216 o34513036)))\r\n(assert (= o37780972 (ite (= o27161724 (_ bv1 1)) v38212216 o28380212)))\r\n(assert (= (= Fresh__39 (_ bv1 1)) (distinct o37780972 ((_ extract 31 0) (_ bv0 64)))))\r\n(assert (= o32138288 Fresh__39))\r\n(assert (= o57851316 (bvand o34397828 o32138288)))\r\n(assert (= (= Fresh__40 (_ bv1 1)) (bvule v34512820 v25544804)))\r\n(assert (= o38466632 Fresh__40 (bvand o53225496 o38466632)))\r\n(assert (= (= Fresh__41 (_ bv1 1)) (bvule v25544804 v37225912)))\r\n(assert (= o38610664 Fresh__41 (bvand o55604848 o38610664)))\r\n(assert (= o22232900 (bvand o34505900 o31154064)))\r\n(assert (= (= Fresh__42 (_ bv1 1)) (bvsle ((_ extract 63 0) (_ bv0 64)) v33731576)))\r\n(assert (= o39871124 Fresh__42))\r\n(assert (= o38115512 (bvand  o39871124)))\r\n(assert (= (= Fresh__43 (_ bv1 1)) (bvule ((_ extract 63 0) (_ bv24 64)) v33731576)))\r\n(assert (= o38328284 Fresh__43))\r\n(assert (= o37525908 (bvand o38115512 o38328284)))\r\n(assert (= o34412528 (ite (= o37341648 (_ bv1 1)) o38115512 o37525908)))\r\n(assert (= o33109316 (ite (= o41590260 (_ bv1 1)) ((_ extract 0 0) (_ bv1 64)) o34412528)))\r\n(assert (= (= Fresh__44 (_ bv1 1)) (bvsle ((_ extract 31 0) (_ bv0 64)) o57977568)))\r\n(assert (= o38574276 Fresh__44 (bvand o22232900 o38574276) o26626548 (bvand o33109316 o28313388)))\r\n(assert (= (= Fresh__45 (_ bv1 1)) (bvsle ((_ extract 31 0) (_ bv0 64)) o29742548)))\r\n(assert (= o26275912 Fresh__45))\r\n(assert (= o31621160 (bvand o26626548 o26275912)))\r\n(assert (= o34032124 (ite (= o44019496 (_ bv1 1)) o26626548 o31621160)))\r\n(assert (= o27939316 (ite (= o45336256 (_ bv1 1)) o22232900 o34032124) (bvand o45835060 o27939316) (bvand o30716620 o39318660)))\r\n(assert (= o37965544 (bvand o37164884 o35618596)))\r\n(assert (= o24859988 (ite (= o27356304 (_ bv1 1)) ((_ extract 7 0) (_ bv0 64)) v41424436)))\r\n(assert (= o41093912 ((_ sign_extend 24) o24859988) o24260108 (ite (= o56849564 (_ bv1 1)) v56881024 o41093912)))\r\n(assert (= o32698032 (ite (= o27161724 (_ bv1 1)) v56881024 o24260108)))\r\n(assert (= o34478936 ((_ sign_extend 32) o32698032)))\r\n(assert (= o38128916 (bvsrem v26462992 o34478936) o57655152 (bvsub v26462992 o38128916)))\r\n(assert (= o35523984 (ite (= o27356304 (_ bv1 1)) ((_ extract 7 0) (_ bv0 64)) v40223568)))\r\n(assert (= o43805236 ((_ sign_extend 24) o35523984)))\r\n(assert (= o27753132 ((_ sign_extend 32) o43805236)))\r\n(assert (= o29567480 (ite (= o56849564 (_ bv1 1)) v39178776 o27753132)))\r\n(assert (= o24737520 (ite (= o27161724 (_ bv1 1)) v39178776 o29567480)))\r\n(assert (= (= Fresh__46 (_ bv1 1)) (bvslt o57655152 o24737520)))\r\n(assert (= o39152132 Fresh__46))\r\n(assert (= o43931552 (ite (= o27356304 (_ bv1 1)) ((_ extract 7 0) (_ bv0 64)) v32409348)))\r\n(assert (= o40560064 ((_ sign_extend 24) o43931552)))\r\n(assert (= o41340936 ((_ sign_extend 32) o40560064)))\r\n(assert (= o58064856 (ite (= o56849564 (_ bv1 1)) v26939464 o41340936)))\r\n(assert (= o27283196 (ite (= o27161724 (_ bv1 1)) v26939464 o58064856)))\r\n(assert (= (= Fresh__47 (_ bv1 1)) (bvsle o27283196 o57655152)))\r\n(assert (= o34779636 Fresh__47))\r\n(assert (= o32884692 (bvand  o34779636)))\r\n(assert (= o34903864 (bvand o39152132 o32884692)))\r\n(assert (= (= Fresh__48 (_ bv1 1)) (distinct ((_ extract 31 0) (_ bv0 64)) v45966220)))\r\n(assert (= Fresh__48 o33517128 (bvand o33880648 )))\r\n(assert (= o38400048 (ite (= v33007480 (_ bv1 1)) o33517128 v26540916)))\r\n(assert (= o26146080 (ite (= o27356304 (_ bv1 1)) ((_ extract 7 0) (_ bv0 64)) v36475448)))\r\n(assert (= o28182872 ((_ sign_extend 24) o26146080)))\r\n(assert (= o37950020 (ite (= o56849564 (_ bv1 1)) v37484248 o28182872)))\r\n(assert (= o28628536 (ite (= o27161724 (_ bv1 1)) v37484248 o37950020)))\r\n(assert (distinct  (= o28628536 ((_ extract 31 0) (_ bv0 64)))))\r\n(assert (= o34887868 (ite (= o27356304 (_ bv1 1)) ((_ extract 7 0) (_ bv0 64)) v43913024)))\r\n(assert (= o42541612 ((_ sign_extend 24) o34887868)))\r\n(assert (= o52977668 ((_ sign_extend 32) o42541612)))\r\n(assert (distinct o58477408 (ite (= o56849564 (_ bv1 1)) v32057092 o52977668)))\r\n(assert (= o59618444 (ite (= o27161724 (_ bv1 1)) v32057092 o58477408)))\r\n(assert (= o39230308 (bvudiv o39712244 o59618444)))\r\n(assert (= o40518776 (ite (= o27356304 (_ bv1 1)) ((_ extract 7 0) (_ bv0 64)) v25004016)))\r\n(assert (= o26681376 ((_ sign_extend 24) o40518776)))\r\n(assert (= o29909212 (ite (= o56849564 (_ bv1 1)) v45806748 o26681376) o25117196 (ite (= o27161724 (_ bv1 1)) v45806748 o29909212)))\r\n(assert (= o34653732 ((_ sign_extend 32) o25117196)))\r\n(assert (= (= Fresh__50 (_ bv1 1)) (bvult o39230308 o34653732)))\r\n(assert (= o34876180 Fresh__50))\r\n(assert (= o26010024 (bvand o34876180)))\r\n(assert (= o58613852 (bvand o30553308 o26010024)))\r\n(assert (= o27457776 (bvand o38400048 o58613852)))\r\n(assert (= o33758708 (ite (= o27356304 (_ bv1 1)) ((_ extract 31 0) (_ bv0 64)) v50911408)))\r\n(assert (= o30855544 (ite (= o56849564 (_ bv1 1)) v40989608 o33758708)))\r\n(assert (= o32689856 (ite (= o27161724 (_ bv1 1)) v40989608 o30855544)))\r\n(assert (= (= Fresh__51 (_ bv1 1)) (= ((_ extract 31 0) (_ bv0 64)) o32689856)))\r\n(assert (= o34766552 Fresh__51))\r\n(assert (= (= Fresh__52 (_ bv1 1)) (=> (= o27457776 (_ bv1 1)) (= o34766552 (_ bv1 1)))))\r\n(assert (= o25338912 Fresh__52))\r\n(assert (= o38101044 Fresh__53))\r\n(assert (= (= Fresh__54 (_ bv1 1)) (and (= o37965544 (_ bv1 1) o38101044))))\r\n(assert (= o35845404 Fresh__54))\r\n(assert (= (= Fresh__55 (_ bv1 1)) (= ((_ extract 0 0) (_ bv0 64)) o35845404)))\r\n(assert (= (_ bv1 1) Fresh__55))\r\n(check-sat-using (then reduce-invertible smt))\r\n```\r\nZ3  gives an invalid model:\r\n```\r\n(define-fun o58064856 () (_ BitVec 64)\r\n    #x0000000000000000)\r\n  (define-fun o37525908 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun Fresh__47 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun v32057092 () (_ BitVec 64)\r\n    #x7fffffffffffffff)\r\n  (define-fun Fresh__27 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun v25579772 () (_ BitVec 64)\r\n    #x8000000000000000)\r\n  (define-fun v32409348 () (_ BitVec 8)\r\n    #x01)\r\n  (define-fun o29365016 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun o37780972 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun o39966744 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o49111032 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun v39352032 () (_ BitVec 64)\r\n    #x0000000000000001)\r\n  (define-fun o39318660 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o32884692 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun Fresh__50 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o56849564 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun v42550544 () (_ BitVec 64)\r\n    #x0000000000000000)\r\n  (define-fun o46697596 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o29567480 () (_ BitVec 64)\r\n    #x0000000000000000)\r\n  (define-fun o27216896 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o32689856 () (_ BitVec 32)\r\n    #x00000001)\r\n  (define-fun o34647496 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o24737520 () (_ BitVec 64)\r\n    #x8000000000000001)\r\n  (define-fun o34779636 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o54457312 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o35024652 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o55604848 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o40146988 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o39871124 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun Fresh__43 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o24859988 () (_ BitVec 8)\r\n    #x00)\r\n  (define-fun v59808052 () (_ BitVec 32)\r\n    #x80000000)\r\n  (define-fun o27368584 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o35618596 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o31621160 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun Fresh__15 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o57977568 () (_ BitVec 32)\r\n    #xffffffff)\r\n  (define-fun o57918236 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun Fresh__28 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun Fresh__23 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun v39178776 () (_ BitVec 64)\r\n    #x8000000000000001)\r\n  (define-fun o38631376 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun o40518776 () (_ BitVec 8)\r\n    #x00)\r\n  (define-fun v26540916 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o25117196 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun o45336256 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o37950020 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun o33517128 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o57596048 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun Fresh__51 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o28064628 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o27356304 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o27457776 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun Fresh__41 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun v37097508 () (_ BitVec 64)\r\n    #x0000000000000000)\r\n  (define-fun o53157812 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o45835060 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o30855544 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun o39712244 () (_ BitVec 64)\r\n    #x0000000000000000)\r\n  (define-fun o33758708 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun o27652628 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o59106472 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o19806348 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun Fresh__8 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun v30807672 () (_ BitVec 64)\r\n    #x0000040000000000)\r\n  (define-fun o34571448 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o38128916 () (_ BitVec 64)\r\n    #x0000000000000000)\r\n  (define-fun v57425120 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o27696588 () (_ BitVec 32)\r\n    #xffffffff)\r\n  (define-fun Fresh__34 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o50628484 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o36659632 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o38115512 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun Fresh__24 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun Fresh__10 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o26374544 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o44019496 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o22707364 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o34032124 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o54178128 () (_ BitVec 64)\r\n    #x0200000000000000)\r\n  (define-fun v36475448 () (_ BitVec 8)\r\n    #x01)\r\n  (define-fun Fresh__54 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o27939316 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun Fresh__9 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun v25004016 () (_ BitVec 8)\r\n    #x01)\r\n  (define-fun o58296580 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o37341648 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o26275912 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o38574276 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun v41424436 () (_ BitVec 8)\r\n    #x01)\r\n  (define-fun o37164884 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o22232900 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun Fresh__39 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o38328284 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o26626548 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o30151692 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun Fresh__48 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o38101044 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o23576292 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o31154064 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o34766552 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun v56881024 () (_ BitVec 32)\r\n    #x00001100)\r\n  (define-fun o24312272 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun Fresh__36 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o46865116 () (_ BitVec 64)\r\n    #xffffffffffffffff)\r\n  (define-fun o52977668 () (_ BitVec 64)\r\n    #x0000000000000000)\r\n  (define-fun o43931552 () (_ BitVec 8)\r\n    #x00)\r\n  (define-fun Fresh__5 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o39105652 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o34397828 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o54466972 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun v23913312 () (_ BitVec 32)\r\n    #x80000000)\r\n  (define-fun o41872052 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun v38212216 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun v45806748 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun Fresh__6 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o28380212 () (_ BitVec 32)\r\n    #x00008000)\r\n  (define-fun o55581876 () (_ BitVec 32)\r\n    #xffffffff)\r\n  (define-fun Fresh__45 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o31644712 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun Fresh__20 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o33880648 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun Fresh__55 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun Fresh__1 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun Fresh__22 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun Fresh__44 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o28530424 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun v23087852 () (_ BitVec 32)\r\n    #x08000000)\r\n  (define-fun o27371360 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o43805236 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun o22734244 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o44159340 () (_ BitVec 64)\r\n    #x0000000000000002)\r\n  (define-fun o42541612 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun o34653732 () (_ BitVec 64)\r\n    #x0000000000000000)\r\n  (define-fun o41340936 () (_ BitVec 64)\r\n    #x0000000000000000)\r\n  (define-fun o28313388 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o35260576 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun o39347004 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o27161724 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o30774992 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun o38443564 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun v45966220 () (_ BitVec 32)\r\n    #x00000001)\r\n  (define-fun o26146080 () (_ BitVec 8)\r\n    #x00)\r\n  (define-fun o38023584 () (_ BitVec 32)\r\n    #x80000000)\r\n  (define-fun o40655748 () (_ BitVec 64)\r\n    #xffffffffffffffff)\r\n  (define-fun o30553308 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o26636776 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o32698032 () (_ BitVec 32)\r\n    #x00001100)\r\n  (define-fun o40480784 () (_ BitVec 32)\r\n    #xffffffff)\r\n  (define-fun o34707060 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o32138288 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun Fresh__40 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o44002088 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun Fresh__35 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun v40223568 () (_ BitVec 8)\r\n    #x01)\r\n  (define-fun o27365288 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun v24997860 () (_ BitVec 32)\r\n    #x00800000)\r\n  (define-fun o38400048 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun Fresh__0 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o26920728 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun v23576252 () (_ BitVec 32)\r\n    #x00008000)\r\n  (define-fun o34478936 () (_ BitVec 64)\r\n    #x0000000000001100)\r\n  (define-fun o23449468 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o49337968 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun v50911408 () (_ BitVec 32)\r\n    #x00000001)\r\n  (define-fun v37225912 () (_ BitVec 64)\r\n    #x8000000000000000)\r\n  (define-fun Fresh__25 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun Fresh__46 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o40560064 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun o35845404 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun v27371316 () (_ BitVec 64)\r\n    #x0000000000000000)\r\n  (define-fun Fresh__26 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o30716620 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun v39752780 () (_ BitVec 32)\r\n    #x80000000)\r\n  (define-fun o27204788 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun Fresh__29 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o39230308 () (_ BitVec 64)\r\n    #x0000000000000000)\r\n  (define-fun v25544804 () (_ BitVec 64)\r\n    #x4000000000000004)\r\n  (define-fun o30739352 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun v58558432 () (_ BitVec 64)\r\n    #x0000000000000001)\r\n  (define-fun o29634232 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun Fresh__11 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o27283196 () (_ BitVec 64)\r\n    #x0000000000000001)\r\n  (define-fun o37965544 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o34513036 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun Fresh__14 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun v58757132 () (_ BitVec 32)\r\n    #x00040000)\r\n  (define-fun o32948252 () (_ BitVec 32)\r\n    #x80000010)\r\n  (define-fun o24260108 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun o41590260 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun v27192016 () (_ BitVec 32)\r\n    #x00000001)\r\n  (define-fun v27251468 () (_ BitVec 64)\r\n    #x0040000000000000)\r\n  (define-fun Fresh__17 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o41093912 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun o29909212 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun v40989608 () (_ BitVec 32)\r\n    #x00000001)\r\n  (define-fun o31960168 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o28366792 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun v26462992 () (_ BitVec 64)\r\n    #x0000000000000000)\r\n  (define-fun o39152132 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o30709420 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun v26939464 () (_ BitVec 64)\r\n    #x0000000000000001)\r\n  (define-fun v28048172 () (_ BitVec 32)\r\n    #x80000000)\r\n  (define-fun v58761740 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun o32741984 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o28057668 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o34505900 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun Fresh__38 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o38466632 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o28047740 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o41423944 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun Fresh__19 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o27753132 () (_ BitVec 64)\r\n    #x0000000000000000)\r\n  (define-fun o37636388 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o24604172 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o56600044 () (_ BitVec 64)\r\n    #x0000000000000001)\r\n  (define-fun o29773024 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun o28628536 () (_ BitVec 32)\r\n    #x00000001)\r\n  (define-fun o33109316 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun v33731576 () (_ BitVec 64)\r\n    #x8000000000000000)\r\n  (define-fun o38610664 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun Fresh__16 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o58613852 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun v34512820 () (_ BitVec 64)\r\n    #x0000000000000005)\r\n  (define-fun v43913024 () (_ BitVec 8)\r\n    #x01)\r\n  (define-fun v34530848 () (_ BitVec 32)\r\n    #x00000001)\r\n  (define-fun o55221556 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o32386268 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o44889412 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o58477408 () (_ BitVec 64)\r\n    #x0000000000000001)\r\n  (define-fun o26681376 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun Fresh__42 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun Fresh__31 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun v37484248 () (_ BitVec 32)\r\n    #x00000001)\r\n  (define-fun Fresh__52 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o34876180 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o59618444 () (_ BitVec 64)\r\n    #x7fffffffffffffff)\r\n  (define-fun o57655152 () (_ BitVec 64)\r\n    #x0000000000000000)\r\n  (define-fun o39098944 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun Fresh__4 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o26010024 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o34412528 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o34887868 () (_ BitVec 8)\r\n    #x00)\r\n  (define-fun o37334172 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o53225496 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o35523984 () (_ BitVec 8)\r\n    #x00)\r\n  (define-fun o29742548 () (_ BitVec 32)\r\n    #x80000000)\r\n  (define-fun Fresh__12 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun Fresh__13 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o27191972 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o28182872 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun Fresh__18 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o26004364 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o31937916 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o37990956 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun Fresh__2 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o26080216 () (_ BitVec 32)\r\n    #x00000002)\r\n  (define-fun Fresh__33 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o57655192 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o57851316 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o39248848 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun Fresh__37 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun Fresh__21 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o25338912 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o28521468 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun Fresh__7 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun Fresh__3 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o34903864 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o38182564 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun o27251412 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun Fresh__53 () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun Fresh__30 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o35886376 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun v33766424 () (_ BitVec 32)\r\n    #x00000000)\r\n  (define-fun v33007480 () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun o25944840 () (_ BitVec 8)\r\n    #x00)\r\n  (define-fun v59557908 () (_ BitVec 32)\r\n    #x00000000)\r\n```\r\nif I feed this model to the formula, Z3 reports unsat.\r\n\r\nSorry for the long formula, but we cannot reduce further. \r\n\r\nOS: Ubuntu 18.04\r\nCommit: 7d976e4\r\n",
    "priority": 1
  },
  "595": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Int)\n(declare-fun b () Bool)\n(declare-fun c () Bool)\n(declare-fun d () Bool)\n(declare-fun e () Bool)\n(declare-fun f (Int) Bool)\n(declare-fun g () Int)\n(declare-fun h (Int) Bool)\n(declare-fun i (Int) Bool)\n(declare-fun j () Bool)\n(declare-fun k () Bool)\n(declare-fun l () Bool)\n(declare-fun m () Int)\n(declare-fun n () Int)\n(declare-fun o () Bool)\n(assert j)\n(assert l)\n(assert (= g (ite (= a 0) 0 (ite b 0 (ite c 0 (ite d 0 (ite o 0 (ite e (ite k (/ 1 0) 0) n))))))))\n(assert (distinct (h 0) (<= 1 m 1 (/ 0 n))))\n(assert (= (f 0) (i 0)))\n(check-sat-using qfnia)\n(get-model)\n```\nZ3 debug branch  gives an invalid model:\n```\n(define-fun b () Bool\n    false)\n  (define-fun g () Int\n    1)\n  (define-fun l () Bool\n    true)\n  (define-fun d () Bool\n    false)\n  (define-fun n () Int\n    1)\n  (define-fun m () Int\n    1)\n  (define-fun e () Bool\n    false)\n  (define-fun j () Bool\n    true)\n  (define-fun c () Bool\n    false)\n  (define-fun o () Bool\n    false)\n  (define-fun a () Int\n    1)\n  (define-fun k () Bool\n    false)\n  (define-fun i ((x!0 Int)) Bool\n    false)\n  (define-fun h ((x!0 Int)) Bool\n    false)\n  (define-fun /0 ((x!0 Real) (x!1 Real)) Real\n    (ite (and (= x!0 0.0) (= x!1 0.0)) 1.0\n      2.0))\n  (define-fun f ((x!0 Int)) Bool\n    false)\n```\nif I feed this model to the formula, Z3 debug branch reports unsat.\n\nOS: Ubuntu 18.04\nCommit: 1d52573\n",
    "priority": 1
  },
  "596": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () Bool)\r\n(declare-fun b () Bool)\r\n(assert (or (not (and a b)) a))\r\n(check-sat)\r\n\r\n```\r\n```\r\nfailed to verify: (or a (not (and a b)))\r\nevaluated to (or a (not (and a b)))\r\n(params keep_cardinality_constraints true pb.solver solver xor_solver false)\r\nsat\r\n```\r\nOS: Ubuntu 18.04\r\nCommit: 6b0e599\r\n",
    "priority": 1
  },
  "597": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () Int)\r\n(declare-fun b () Int)\r\n(declare-fun c () Int)\r\n(assert (exists ((d Int)) (> (/ (+ d 1) (+ 0.5 (ite (distinct d a) b c))) 0)))\r\n(check-sat)\r\n```\r\nz3 debug branch hangs on it:\r\n```\r\n[517] % timeout -s 9 30 z3debug bug2.smt2 \r\nKilled\r\n[518] % cat bug2.smt2 \r\n(declare-fun a () Int)\r\n(declare-fun b () Int)\r\n(declare-fun c () Int)\r\n(assert (exists ((d Int)) (> (/ (+ d 1) (+ 0.5 (ite (distinct d a) b c))) 0)))\r\n(check-sat)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: c716978",
    "priority": 0
  },
  "598": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Int)\n(declare-fun b () Int)\n(assert (= b (/ 300.0 a)))\n(check-sat)\n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/lp/gomory.cpp\nLine: 59\nlia.column_is_int(j) && m_fj.is_pos()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: c716978\n",
    "priority": 1
  },
  "599": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(declare-fun d () Real)\n(declare-fun g () Real)\n(assert\n(and\n (forall ((e Real)) (or (= (* b d) 0.0) (and (< 0.0 (/ 2.0 e c)) (< (* e c) g))))\n (forall ((f Real)) (< 0.0 (* a c)))))\n(check-sat)\n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/util/old_vector.h\nLine: 370\nidx < size()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 9f16fee\n",
    "priority": 1
  },
  "600": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(assert\r\n (exists ((b Int) (c Int) (a Real) (d Int))\r\n  (and (< b (* 114 a (- 228 (- 195 221 176) c) (* 158 (- 176) d)))\r\n   (>= b (* 113 150 (- 50 29 a) (- 68 (/ 106 129 6) c) (* 232 (* 222 94 42) d))))))\r\n(check-sat)\r\n```\r\nZ3  throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/math/lp/nla_core.cpp\r\nLine: 441\r\n!ineq_holds(ineq(cmp, t, rs))\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 794c094 (debug branch)\r\n",
    "priority": 0
  },
  "601": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () Int)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(assert (> a 0))\r\n(assert (= (* (/ b b) c) 2.0))\r\n(check-sat)\r\n(check-sat)\r\n(get-model)\r\n```\r\nZ3  incorrectly gives the following incorrect model for the second check-sat\r\n``` \r\nunknown\r\nsat\r\n(model \r\n  (define-fun c () Real\r\n    16.0)\r\n  (define-fun b () Real\r\n    0.0)\r\n  (define-fun a () Int\r\n    0)\r\n  (define-fun /0 ((x!0 Real) (x!1 Real)) Real\r\n    (ite (and (= x!0 0.0) (= x!1 0.0)) (/ 1.0 8.0)\r\n      0.0))\r\n), \r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 794c094\r\n",
    "priority": 1
  },
  "602": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Bool)\n(declare-fun b () Bool)\n(assert (or (not (and a b)) (not a)))\n(check-sat-using qfufbv_ackr)\n(get-model)\n```\nZ3  gives an invalid model:\n```\n(model \n  (define-fun b () Bool\n    true)\n  (define-fun a () Bool\n    true)\n)\n\nThe model is clearly invalid.\n```\nif I feed this model to the formula, Z3 reports unsat.\n\nOS: Ubuntu 18.04\nCommit: a319f4b\n",
    "priority": 1
  },
  "603": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () (_ BitVec 1))\r\n(declare-fun b ((_ BitVec 1)) (_ BitVec 1))\r\n(declare-fun c () (_ BitVec 1))\r\n(assert (= (b (_ bv1 1)) c))\r\n(assert (distinct (b a) c))\r\n(check-sat-using qfufbv_ackr)\r\n(get-model)\r\n```\r\nZ3  gives an invalid model:\r\n```\r\nsat\r\n(model \r\n  (define-fun a () (_ BitVec 1)\r\n    #b1)\r\n  (define-fun c () (_ BitVec 1)\r\n    #b0)\r\n  (define-fun b ((x!0 (_ BitVec 1))) (_ BitVec 1)\r\n    #b0)\r\n)\r\n\r\n```\r\n\r\nz3 incorrect model from the qfufbv_ackr tactic (the model clearly violates the second assert)\r\nif I feed this model to the formula, Z3 reports unsat.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: a319f4b\r\n",
    "priority": 1
  },
  "604": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () String)\n(declare-fun b () String)\n(assert (distinct (str.prefixof (str.substr a 222 112) b) (str.prefixof (str.at a 182) b)))\n(check-sat-using (then qe2 smt))\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/qe/qsat.cpp\nLine: 642\nvalidate_defs(\"check_sat\")\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n\n```\n\nOS: Ubuntu 18.04\nCommit: a319f4b\n",
    "priority": 0
  },
  "605": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(assert (<= (/ (- 2) c) a))\n(check-sat)\n(assert (> b 0))\n(check-sat)\n(get-model)\n\n```\nZ3  gives an invalid model:\n```\n(model \n  (define-fun c () Real\n    (/ 1.0 8.0))\n  (define-fun a () Real\n    0.0)\n  (define-fun b () Real\n    0.0)\n  (define-fun /0 ((x!0 Real) (x!1 Real)) Real\n    (ite (and (= x!0 (- 2.0)) (= x!1 (/ 1.0 8.0))) (- 16.0)\n      0.0))\n)\n```\nif I feed this model to the formula, Z3 reports unsat.\n\nOS: Ubuntu 18.04\nCommit: ad6062c\n",
    "priority": 1
  },
  "606": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Int)\n(declare-fun b () Int)\n(declare-fun c () Int)\n(assert\n (let ((d 0))\n  (and\n   (or\n    (= (< c a)\n     (distinct\n      (distinct\n       (xor (<= (/ 57 c c) 2) (distinct (distinct c b) (< (/ a c) 5)))\n       (distinct c b))\n      (xor (<= b a) (>= (- a) 4))))\n    (>= (* c a) 51))\n   (> a c))))\n(check-sat)\n\n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/lp/gomory.cpp\nLine: 337\nlia.current_solution_is_inf_on_cut()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n\n```\n\nOS: Ubuntu 18.04\nCommit: caa118c\n",
    "priority": 1
  },
  "607": {
    "body": "Hi,\nFor this formula:\n```\n(assert (forall ((a Real) (b Real))\n(or (is_int a) (> (+ a 9 (- b)) 0) (>= (* (* 4 10) a (* 20 b)) (- 1)))))\n(check-sat)\n\n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/lp/int_solver.cpp\nLine: 387\nlrac.m_r_solver.calc_current_x_is_feasible_include_non_basis() == lrac.m_r_solver.current_x_is_feasible()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n\n```\n\nOS: Ubuntu 18.04\nCommit: caa118c\n",
    "priority": 0
  },
  "608": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Int)\n(declare-fun b () Int)\n(declare-fun c () Int)\n(declare-fun d () Int)\n(assert (<= c a b d a))\n(assert (= (/ 0 c) (+ (* a d) b)))\n(check-sat)\n```\nZ3 debug branch  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/lp/lar_solver.cpp\nLine: 1710\nm_term_register.size() == m_terms.size()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: caa118c\n",
    "priority": 1
  },
  "609": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () String)\n(declare-fun b () String)\n(declare-fun c () String)\n(assert (distinct (str.substr a 3 (str.len b)) \"\"))\n(assert (distinct\n         (ite (= (str.len (str.substr (str.replace a b \"\") 0 (- (str.len c)))) 1) 0 2)\n         (ite (= (str.at (str.replace a b \"\") 2) \"\") 1 2)))\n(check-sat)\n(get-model)\n```\nZ3  gives an invalid model:\n```\n(model \n  (define-fun b () String\n    \"\\x00\")\n  (define-fun a () String\n    \"\\x00\\x00\\x00\\x00\\x00\")\n  (define-fun c () String\n    \"\\x00\")\n)\n```\nif I feed this model to the formula, Z3 reports unsat.\n\nOS: Ubuntu 18.04\nCommit: ad6062c\n",
    "priority": 1
  },
  "610": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun x () Real)\r\n(assert (= x 0.0))\r\n(assert (= (^ x (- 1.0)) (/ 1.0 x)))\r\n(check-sat)\r\n(get-model)\r\n```\r\nz3 model_validate=true throw out an error:\r\n```\r\nsat\r\n(error \"line 4 column 10: an invalid model was generated\")\r\n(model \r\n  (define-fun x () Real\r\n    0.0)\r\n  (define-fun /0 ((x!0 Real) (x!1 Real)) Real\r\n    (ite (and (= x!0 1.0) (= x!1 0.0)) 1.0\r\n      0.0))\r\n)\r\n```\r\nWhile this model is actually valid. \r\n\r\nOS: Ubuntu 18.04\r\nCommit: ad6062c",
    "priority": 1
  },
  "611": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () Int)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(assert (>= a 4))\r\n(assert (= (+ b (* b c)) 3.0))\r\n(check-sat)\r\n(check-sat)\r\n(get-model)\r\n\r\n```\r\nZ3  gives an invalid model:\r\n```\r\n(model \r\n  (define-fun b () Real\r\n    (/ 1.0 8.0))\r\n  (define-fun c () Real\r\n    23.0)\r\n  (define-fun a () Int\r\n    0)\r\n)\r\n```\r\nif I feed this model to the formula, Z3 reports unsat.\r\nIt may be related to https://github.com/Z3Prover/z3/issues/3049.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: e8f7a08\r\n",
    "priority": 1
  },
  "612": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(assert (distinct (str.++ a b) (str.++ b a)))\r\n(check-sat)\r\n```\r\nz3 debug branch throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_lra.cpp\r\nLine: 967\r\n!m_left_side.empty()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: caa118c (./configure -d)",
    "priority": 1
  },
  "613": {
    "body": "Hi,\r\nFor bug1.smt2, bug2.smt2, bug3.smt2:\r\n```\r\n[653] % z3 smt.string_solver=z3str3 bug1.smt2 \r\nSegmentation fault\r\n[654] % z3 smt.string_solver=z3str3 model_validate=true bug1.smt2 \r\nsat\r\n[655] % \r\n[655] % z3 smt.string_solver=z3str3 bug2.smt2\r\nsat\r\n[656] % z3 smt.string_solver=z3str3 model_validate=true bug2.smt2\r\nSegmentation fault\r\n[657] % \r\n[657] % z3 smt.string_solver=z3str3 bug3.smt2\r\nSegmentation fault\r\n[658] % z3 smt.string_solver=z3str3 model_validate=true bug3.smt2\r\nSegmentation fault\r\n[659] % \r\n[659] % cat bug1.smt2 \r\n(declare-fun s () String)\r\n(assert (distinct s \"<a></a>\"))\r\n(assert (< (str.indexof s \"<a>\" 16) (str.indexof s \"</a>\" 23)))\r\n(check-sat)\r\n[660] % cat bug2.smt2 \r\n(declare-fun s () String)\r\n(assert (distinct s \"<a></a>\"))\r\n(assert (< (str.indexof s \"<a>\" 8) (str.indexof s \"</a>\" 13)))\r\n(check-sat)\r\n[661] % cat bug3.smt2 \r\n(declare-fun s () String)\r\n(assert (distinct s \"<a></a>\"))\r\n(assert (< (str.indexof s \"<a>\" 4) (str.indexof s \"</a>\" 7)))\r\n(check-sat)\r\n```\r\nThese three formulas only have difference on constants, but trigger different segmenation fault behavior.\r\nbug1 triggers z3str3 segmentation fault but z3str3 can give sat with model validation.\r\nbug2 triggers z3str3 with model validation segmenation fault but without validation z3str3 gives sat.\r\nbug3 triggers both z3str3 with and without model validation throws out segmentation faults.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 1119961\r\n",
    "priority": 0
  },
  "614": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () (_ BitVec 9000))\n(declare-fun b () (_ BitVec 9000))\n(assert (bvslt a b))\n(check-sat-using smt)\n\n```\nZ3  throws out a segmentation fault.\n\nOS: Ubuntu 18.04\nCommit: dddd740\n",
    "priority": 1
  },
  "615": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(assert\r\n (and\r\n  (and\r\n   (and\r\n    (and\r\n     (=\r\n      (str.len\r\n       (str.substr\r\n        (str.substr url (str.indexof url \"#\" 62) (- (str.indexof url \"#\" 2)))\r\n        (+ 0 1)\r\n        (- (str.len (str.substr url (str.indexof url \"#\" 2) 0))\r\n         (+ (str.indexof (str.substr url (str.indexof url \"#\" 2)\r\n                          (- 0 (str.indexof url \"#\" 2))) \"\" 0) 1)))) 0)\r\n     (not (= (str.substr url 0 0) \"http\")))\r\n    (> (str.indexof url \":\" 0) 0))\r\n   (>= (- (str.indexof url \"#\" 2) 2) 0))\r\n  (>= (str.indexof url \":\" 0) 0)))\r\n(check-sat)\r\n```\r\nZ3 smt.string_solver=z3str3 model_validate=true throws out a segmentation fault.\r\n\r\nif we simplify \"(+ 0 1)\" to \"1\" in the above test, the segfault isn't triggered; the segfault also disappears if we try to flatten the nested conjunctions (i.e., the three inner \"and\"s).\r\n\r\nOS: Ubuntu 18.04\r\nCommit: dddd740\r\n",
    "priority": 1
  },
  "616": {
    "body": "```\r\n$ z3/build-2020-02-25-198622b/z3 bug.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_context.cpp\r\nLine: 3584\r\nat_search_level()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n^C^C\r\n$cat bug.smt2 \r\n(declare-fun a () String)\r\n(declare-fun b () Int)\r\n(declare-fun c () Int)\r\n(assert (< (/ b c) 0))\r\n(assert (distinct \"foo\" (str.substr a b c)))\r\n(check-sat-using psmt)\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: 198622b",
    "priority": 1
  },
  "617": {
    "body": "```\r\n$ z3/build-2020-02-25-198622b/z3 bug.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_context.cpp\r\nLine: 3584\r\nat_search_level()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n^C^C\r\n$cat bug.smt2 \r\n(declare-fun a () String)\r\n(declare-fun b () Int)\r\n(declare-fun c () Int)\r\n(assert (< (/ b c) 0))\r\n(assert (distinct \"foo\" (str.substr a b c)))\r\n(check-sat-using psmt)\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: 198622b",
    "priority": 1
  },
  "618": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () (_ BitVec 2))\n(declare-fun b () (_ BitVec 2))\n(assert (bvsle a b))\n(check-sat-using qfufbv_ackr)\n(get-model)\n```\nZ3  gives an invalid model:\n```\n(model \n  (define-fun b () (_ BitVec 2)\n    #b10)\n  (define-fun a () (_ BitVec 2)\n    #b11)\n)\n```\nif I feed this model to the formula, Z3 reports unsat.\n\nOS: Ubuntu 18.04\nCommit: b68efe4\n",
    "priority": 1
  },
  "619": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a (Int) Int)\n(declare-fun b (Int) Int)\n(declare-fun c (Int) Int)\n(declare-fun d (Int) Int)\n(declare-fun e (Int) Int)\n(declare-fun f (Int) Int)\n(declare-fun g (Int) Int)\n(declare-fun h () Int)\n(declare-fun i () Int)\n(declare-fun j () Int)\n(declare-fun l () Int)\n(declare-fun m () Int)\n(declare-fun u () Int)\n(assert\n (let ((k j))\n  (and\n   (or\n    (and\n     (or\n      (and\n       (or\n        (and\n         (or\n          (and\n           (or\n            (and\n             (or (and (= (a m) h (a u) u)) (= 0 u))\n             (= i (a i)))\n            (= h (b i) (b l) i))\n           (= i 0))\n          (= (c j) u) (= u i))\n         (distinct l h)\n         (= 0 (d h) l m (f m) i)\n         (distinct (f l) (e m) i))\n        (= (e j) m j l j)\n        (= (e u) i))\n       (or (and (or (= 0 j)) (= (g h) i)) (= 0 h)))\n      (= l i))\n     (distinct h m u))\n    (distinct j i))\n   (< h 7)\n   (<= 7 u 7)\n   (<= i (a (a (g (ite (< (+ h l) 7) (+ h l) h))))))))\n(check-sat)\n```\nZ3  gives an invalid model:\n```\n(define-fun i () Int\n    6)\n  (define-fun h () Int\n    (- 66895))\n  (define-fun u () Int\n    7)\n  (define-fun j () Int\n    (- 140647))\n  (define-fun l () Int\n    66901)\n  (define-fun m () Int\n    (- 87824))\n  (define-fun a ((x!0 Int)) Int\n    (ite (= x!0 7) 8\n    (ite (= x!0 6) 7\n      (- 66896))))\n  (define-fun b ((x!0 Int)) Int\n    (ite (= x!0 66901) 7\n      0))\n  (define-fun d ((x!0 Int)) Int\n    66902)\n  (define-fun g ((x!0 Int)) Int\n    7)\n  (define-fun f ((x!0 Int)) Int\n    (ite (= x!0 66901) 7\n      (- 87823)))\n  (define-fun e ((x!0 Int)) Int\n    (ite (= x!0 (- 140647)) (- 87823)\n      7))\n  (define-fun c ((x!0 Int)) Int\n    8)\n```\nif I feed this model to the formula, Z3 reports unsat.\n\nOS: Ubuntu 18.04\nCommit: b68efe4\n",
    "priority": 1
  },
  "620": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun x () Real)\r\n(assert (= x 0.0))\r\n(check-sat-using qffd)\r\n```\r\nZ3  throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/ast/rewriter/expr_safe_replace.cpp\r\nLine: 27\r\nm.get_sort(src) == m.get_sort(dst)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nReplacing Real to Int or 0.0 to 0 makes the crash disappear.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: c71da17\r\n",
    "priority": 1
  },
  "621": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () (_ BitVec 2))\n(declare-fun b () (_ BitVec 2))\n(declare-fun c () (_ BitVec 2))\n(assert (bvslt a (bvadd b (bvsdiv c (_ bv1 2)))))\n(check-sat-using reduce-invertible)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/tactic/generic_model_converter.h\nLine: 52\nis_app(d) && to_app(d)->get_num_args() == 0\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: c71da17\n",
    "priority": 1
  },
  "622": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun x () String)\n(declare-fun y () String)\n(assert (distinct (str.replace (str.replace x y x) x y) x))\n(check-sat)\n(get-model)\n\n```\nZ3 smt.string_solver=z3str3 gives an invalid model:\n```\n(model \n  (define-fun y () String\n    \"\")\n  (define-fun x () String\n    \"\\x00\")\n)\n```\nif I feed this model to the formula, Z3 reports unsat.\n\nOS: Ubuntu 18.04\nCommit: c71da17\n",
    "priority": 0
  },
  "623": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun cx () Bool)\n(declare-fun a () Bool)\n(declare-fun db () Bool)\n(declare-fun b () Bool)\n(declare-fun c () Bool)\n(declare-fun dc () Bool)\n(declare-fun eu () Bool)\n(declare-fun d () Bool)\n(declare-fun dq () Bool)\n(declare-fun ef () Bool)\n(declare-fun e () Bool)\n(declare-fun f () Bool)\n(declare-fun iu () Bool)\n(declare-fun Raaaaaa () Bool)\n(declare-fun g () Bool)\n(declare-fun h () Bool)\n(declare-fun i () Bool)\n(declare-fun j () Bool)\n(declare-fun iv () Bool)\n(declare-fun k () Bool)\n(declare-fun l () Bool)\n(declare-fun iw () Bool)\n(declare-fun m () Bool)\n(declare-fun n () Bool)\n(declare-fun Daaaaaa () Bool)\n(declare-fun ix () Bool)\n(declare-fun o () Bool)\n(declare-fun p () Bool)\n(declare-fun q () Bool)\n(declare-fun r () Bool)\n(assert\n(let (($s\n(forall ((w Bool) (aa Bool) (ab Bool) (ac Bool) (ad Bool) (ae Bool) (af Bool) (ag Bool) (ah Bool) (ai Bool)\n(u (_ BitVec 32))\n(t (_ BitVec 32))\n(v (_ BitVec 32))\n(x (_ BitVec 32))\n(aj (_ BitVec 32))\n(ak (_ BitVec 32))\n(al (_ BitVec 32))\n(am (_ BitVec 32))\n(an (_ BitVec 32))\n(ao (_ BitVec 32))\n(ap (_ BitVec 32))\n(aq (_ BitVec 32))\n(ar (_ BitVec 32))\n(iy (_ BitVec 32))\n(iz (_ BitVec 32))\n(ja (_ BitVec 32))\n(jb (_ BitVec 32))\n(jc (_ BitVec 32))\n(jd (_ BitVec 32))\n(je (_ BitVec 32))\n(jf (_ BitVec 32))\n(jg (_ BitVec 32))\n(jh (_ BitVec 32))\n(ji (_ BitVec 32))\n(jj (_ BitVec 32))\n(jk (_ BitVec 32))\n(jl (_ BitVec 32))\n(jm (_ BitVec 32))\n(jn (_ BitVec 32))\n(jo (_ BitVec 32))\n(jp (_ BitVec 32))\n(jq (_ BitVec 32))\n(jr (_ BitVec 32))\n(js (_ BitVec 32))\n(jt (_ BitVec 32))\n(ju (_ BitVec 32))\n(jv (_ BitVec 32))\n(jw (_ BitVec 32))\n(jx (_ BitVec 32))\n(jy (_ BitVec 32))\n(jz (_ BitVec 32))\n(ka (_ BitVec 32))\n(kb (_ BitVec 32))\n(kc (_ BitVec 32))\n(kd (_ BitVec 32))\n(ke (_ BitVec 32))\n(kf (_ BitVec 32)))\n(let (($as (= (ite ai jj (ite ad jv (ite ai ji (ite ad ju x))))\n(ite ai jl (ite ad jx x)))))\n(let (($at (= (ite ah ao (ite ac jn (ite ah an (ite ac jm v))))\n(ite ah aq (ite ac jp v)))))\n(let ((?au (ite ab je t)))\n(let ((?av (ite ag kb ?au)))\n(let ((?aw (ite ab jb t)))\n(let ((?ax (ite ag jy ?aw)))\n(let ((?ay (ite ab jc ?ax)))\n(let ((?az (ite ag jz ?ay)))\n(let (($ba (= ?az ?av)))\n(let (($bb (= (ite f kd (ite aa iy (ite af kc (ite aa ar u))))\n(ite af kf (ite aa ja u)))))\n(let ((?bc (ite ae js jh)))\n(let ((?bd (bvadd (_ bv1 32) ?bc)))\n(let ((?be (ite ae jt ?bd)))\n(let ((?bf (ite w aj jf)))\n(let ((?bg (ite ae jq ?bf)))\n(let ((?bh (bvadd (_ bv1 32) ?bg)))\n(let ((?bi (ite w ak ?bh)))\n(let ((?bj (ite ae jr ?bi)))\n(let (($bk (= ?bj ?be)))\n(let (($bl (and (not (bvsle t jf))\n(not (bvsle ?ax ?bh))\n(bvsge ?bj (bvadd (bvneg (_ bv1 32)) ?az))\n(not (bvsle t jg))\n(not (bvsle (ite ab jd t) (bvadd (_ bv1 32) (ite w al jg))))\n(bvsge (ite w am (bvadd (_ bv1 32) (ite w al jg)))\n(bvadd (bvneg (_ bv1 32)) ?au))\n(not (bvsle ?au ?bd))\n(bvsge ?be (bvadd (bvneg (_ bv1 32)) ?av)))))\n(let (($bm (or (not ah) c)))\n(let (($bn (or (not ag) dc)))\n(let ((bo 0))\n(let ((bp 0))\n(let (($bq (or (not ad) a)))\n(let (($br (or (not ac) b)))\n(let ((bs 0))\n(let ((?bt (ite ad ju x)))\n(let ((?bu (ite ai ji ?bt)))\n(let ((?bv (ite ad jv ?bu)))\n(let ((?kg (ite ad jx x)))\n(let ((?kh (ite ai jk ?kg)))\n(let (($ki (not dq)))\n(let (($ 0))\n(let ((?bw (ite ac jm v)))\n(let ((?bx (ite ah an ?bw)))\n(let ((?by (ite ac jn ?bx)))\n(let ((?bz (ite ac jp v)))\n(let ((?ca (ite ah ap ?bz)))\n(let (($cb (not ef)))\n(let (($cc (or $cb (= ?ca ?by))))\n(let (($cd e))\n(let (($ce (or $cd (= (ite ag ka ?au) ?ay))))\n(let ((?cf (ite aa ar u)))\n(let ((?cg (ite af kc ?cf)))\n(let ((?ch (ite a iy ?cg)))\n(let ((?ci (ite aa ja u)))\n(let ((?cj (ite af ke ?ci)))\n(let (($ck (not f)))\n(let (($cl (or $ck (= ?cj ?ch))))\n(let (($cm (and (or (not iu) (= ?bc (bvadd (bvneg (_ bv1 32)) ?bi))) $cl $ce $cc)))\n(let (($cn (not $cm)))\n(let (($co (= kf kc)))\n(let (($cp (or $ki (= ?kh ?bt))))\n(let (($cq (or $cb (= ?ca ?bw))))\n(let (($cr (or $cd (= (ite ag ka ?au) ?aw))))\n(let (($cs (or (= ?cj ?cf))))\n(let (($ct (and (or (not iu) ) $cs $cr $cq $cp)))\n(let (($cu (= ke kf)))\n(let (($cv (or $ki (= ?kg ?kh))))\n(let (($cw (or $cb (= ?bz ?ca))))\n(let (($ $))\n(let (($cy (or $ck (= ?ci ?cj))))\n(let (($cz (or (not (and (or (not iu) (= jh ?bd)) $cy $cw $cv)) $cu)))\n(let (($da (= ke kd)))\n(let ((b 0))\n(let ((c 0))\n(let (($dd (or $cd (= ?au ?ay))))\n(let (($de (or $ck (= ?ci ?ch))))\n(let (($kj (not iu)))\n(let (($df (or $kj (= jh ?bi))))\n(let (($dg (= ke kc)))\n(let (($dh (or $ki (= ?kg ?bt))))\n(let (($di (or $cb )))\n(let ((dj $))\n(let (($dk (or $ck (= ?ci ?cf))))\n(let (($dl (or $kj (= jh ?bf))))\n(let (($dm (= kd kc)))\n(let (($dn (or $ki (= ?bv ?bt))))\n(let (($do (or $cb )))\n(let (($dp (or $cd (= ?ay ?aw))))\n(let (($(or $ck)))\n(let (($dr (or $kj (= ?bi ?bf))))\n(let ((ds 0))\n(let (($dt (or $ki )))\n(let (($du (or $cb (= ?ca ?bz))))\n(let (($dv (or $cd (= (ite ag ka ?au) ?au))))\n(let (($dw (or $(= ?cj ?ci))))\n(let (($dx (not (and (or $kj (= ?bc (bvadd (bvneg (_ bv1 32)) jh))) $dw $dv $du $dt))))\n(let (($dy (= jz ka)))\n(let (($dz (or $ki (= ?bv ?kg))))\n(let (($ea (or $cb )))\n(let (($eb (or $cd (= ?ay ?au))))\n(let (($ec (or $(= ?ch ?ci))))\n(let (($ed (or $kj (= ?bi jh))))\n(let (($ee (not (and $ed $ec $eb $ea $dz))))\n(let ((f 0))\n(let (($eg (or $ki (= ?bt ?kh))))\n(let (($eh (or $cb (= ?bw ?ca))))\n(let (($ei (or $cd (= ?aw (ite ag ka ?au)))))\n(let (($ej (or $(= ?cf ?cj))))\n(let (($ek (not (and (or $kj (= ?bf ?bd)) $ej $ei $eh $eg))))\n(let (($el (= jy ka)))\n(let (($em (or $ki (= ?bt ?kg))))\n(let (($en (or $cb (= ?bw ?bz))))\n(let (($eo (or $cd (= ?aw ?au))))\n(let (($ep (or $(= ?cf ?ci))))\n(let (($eq (or $kj (= ?bf jh))))\n(let (($er (not (and $eq $ep $eo $en $em))))\n(let ((es 0))\n(let (($et (or $ki (= ?bt ?bv))))\n(let ((e $))\n(let (($ev (or $cd (= ?aw ?ay))))\n(let (($ew (or $(= ?cf ?ch))))\n(let (($ex (or (= ?bf ?bi))))\n(let (($ey (not (and $ex $ew $ev $ $et))))\n(let ((ez 0))\n(let (($fa (not Raaaaaa)))\n(let (($fb (or $fa (= (ite ad jw x) ?bu))))\n(let (($fc (not g)))\n(let (($fd (or $fc (= (ite ac jo v) ?bx))))\n(let (($fe h))\n(let (($ff (or $fe (= (ite ab jd t) ?ax))))\n(let (($fg i))\n(let (($fh (or $fg (= (ite aa iz u) ?cg))))\n(let (($fi (not j)))\n(let (($fj (or $fi (= (ite w al jg) ?bg))))\n(let (($fk (= jx ju)))\n(let (($fl (or $fa (= (ite ad jw x) x))))\n(let (($fm (or $fc (= (ite ac jo v) v))))\n(let (($fn (or $fe (= (ite ab jd t) t))))\n(let (($fo (or $fg (= (ite aa iz u) u))))\n(let (($kk (and (or $fi (= (ite w al jg) (bvadd (bvneg (_ bv1 32)) jf))) $fo $fn $fm $fl)))\n(let (($fp (not $kk)))\n(let (($fq (= jw jx)))\n(let (($fr (or $fa (= x (ite ad jw x)))))\n(let ((fs (or $(= v (ite ac jo v)))))\n(let (($ft (or $fe (= t (ite ab jd t)))))\n(let (($fu (or $fg (= u (ite aa iz u)))))\n(let (($kl (and (or $fi (= jg (bvadd (_ bv1 32) (ite w al jg)))) $fu $ft  $fr)))\n(let (($fv (not $kl)))\n(let ((fw 0))\n(let (($fx (or $fa (= x ?bu))))\n(let (($fy (or (= v ?bx))))\n(let (($fz (or $fe (= t ?ax))))\n(let (($ga (or $fg (= u ?cg))))\n(let (($gb (not (or $fi (= jg jf)))))\n(let (($gc (or $gb (= jw ju))))\n(let (($gd (= jv ju)))\n(let ((ge 0))\n(let ((gf 0))\n(let (($gg (or $fe (= ?ax t))))\n(let ((gh   $))\n(let (($gi (not (and (or $fi (= ?bg (bvadd (bvneg (_ bv1 32)) jf))) $ $gg))))\n(let (($gj (= jr jt)))\n(let (($gk (or $ki (= ?bv ?kh))))\n(let (($gl (or $cb (= ?by ?ca))))\n(let (($gm (or $cd (= ?ay (ite ag ka ?au)))))\n(let (($gn (or $(= ?ch ?cj))))\n(let ((go 0))\n(let (($gp (and (or $fi (= (ite w al jg) (bvadd (bvneg (_ bv1 32)) jg))) $fo $fn)))\n(let (($gq (= jo jn)))\n(let (($gr (not (or $fi (= jf jg)))))\n(let (($gs (or $gr (= jm jo))))\n(let (($gt (= jm jn)))\n(let (($gu (= jh jg)))\n(let (($gv (not cx)))\n(let ((gw 0))\n(let ((gx b))\n(let ((gy 0))\n(let ((gz iv))\n(let ((ha 0))\n(let (($hb (= jf jh)))\n(let (($hc (or $gv )))\n(let ((hd 0))\n(let ((he 0))\n(let ((hf 0))\n(let (($hg (or $gb (= jd jb))))\n(let (($hh (= jc je)))\n(let (($hi (or $fa (= ?bu (ite ad jw x)))))\n(let ((hj 0))\n(let ((hk 0))\n(let ((hl 0))\n(let ((hm 0))\n(let (($hn (not (and $hi))))\n(let (($ho (= jc jd)))\n(let (($hp (not (and  $ $gg))))\n(let (($hq (= jb je)))\n(let ((hr 0))\n(let (($hs (or $gr (= ar iz))))\n(let (($ht (= ao aq)))\n(let ((hu 0))\n(let (($hv (and  (or $gi (= ak aj an ap))\n(or $ek (= an aq))\n(or (not (and $dn))\n(= ao an))\n(or $ee (= ao ap))\n(or (not (and (or $kj (= ?bi ?bd)) $gn $gm $gl)) $ht (= aq ap))\n$hs\n(or $gi (= iy ar))\n(or $hp (= iy iz))\n(or $fp (= ja ar))\n(or (not $gp) (= ja iz))\n(or $hq) (or $gi (= jc jb) $ho) (or $hn $hh) $hg (or $fv (= jd je))\n(or (not (and $hc)) $hb)\n(or $gu)\n(or $ey (= ji jj))\n(or  (= jk jj))\n(or (= jl ji))\n(or $cn (= jl jj))\n(or $dx (not (and (or $fi (= jf ?bh)) $ga $fz  $fx)) $gt)\n$gs\n(or (not (and (or $fi (= jg ?bh)) $ga  $fy $fx)) $gq)\n(or $fp (= jp jm))\n(or (= jp jn))\n(or (not $gp))\n(or $ey (= jq jr))\n(or $er (= jq js))\n(or $ek (= jq jt))\n(or $ee (= jr js))\n(or (not (and $gm $gl $gk)) $gj)\n(or $dx (= jt js))\n(or $gi $gd)\n$gc\n(or (not (and (or (= jg ?bh)) $ga $fz)))\n(or $fv $fq) (or $fp $fk) (or (not (and $fj $fh $)))\n(or $er $el $dy) (or (= kb jz) (not (and $dr  $dp $do $dn)) $dm)\n(or (not (and $dl $dk $di $dh)) $dg)\n(or (not (and $df $de $dd)) $da)\n$cz\n(or (not $ct) $co)\nab $br $bq $bn $bm)))\n(or (not $hv) (not $bl) (and $bk $bb $ba $at $as))\n)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\n(let (($hw (not (or (and dc iv) (and c db) cx))))\n(let ((hx 0))\n(let ((hy 0))\n(let ((hz 0))\n(let ((ia 0))\n(let ((ib 0))\n(let (($ic (not n)))\n(let (($id (not (or f (and b) (and a dq)))))\n(let ((ie 0))\n(let (($if (not c)))\n(let (($ig (not dc)))\n(let (($ck (not f)))\n(let ((kj 0))\n(let (($ih (not eu)))\n(let (($ki (not dq)))\n(let (($cb (not ef)))\n(let (($ii (and $cb $ki $ih iw)))\n(let (($ij (and $ki $if iw)))\n(let (($ik (and $ck $ki iw)))\n(let (($il (and Daaaaaa iw)))\n(let (($im (and iw l)))\n(let (($in (or $im (and $ig l) $il $ik (and d $ig) (and $ck (not a)) $ij (and $ki (not b) iw) $ii (and $ih $ki) (and $ck $cb) (and $ck $if iw))))\n(let ((io 0))\n(let ((ip 0))\n(let ((iq 0))\n(let (($ir (not q)))\n(and r $ir $in p o (= ix $id) $ic  (= k $hw) $s (not (and b db))\n(not (and a cx))\n)))))))))))))))))))))))))))))\n(assert (let (($im (and iw l))) (not $im)))\n(assert (not (and iw m ix)))\n(assert (let (($il (and Daaaaaa iw))) (not $il)))\n(assert (let (($if (not c))) (let (($ki (not dq))) (let ((ck 0)) (let (($ik (and  $ki $if iw))) (not $ik))))))\n(assert (let (($if (not c))) (let (($is a)) (let (($it (not b))) (let (($fa (not Raaaaaa))) (not (and $fa $it $is $if Daaaaaa)))))))\n(assert (let (($ 0)) (let ((it 0)) (let (($fa (not Raaaaaa))) (let (($fc (not g))) (not (and $fc $fa)))))))\n(assert (let (($ih (not eu))) (let (($if (not c))) (let (($ki (not dq))) (let (($ij (and $ki $if $ih iw))) (not $ij))))))\n(assert (let ((ih 0)) (let ((it b)) (let (($ki (not dq))) (let (($fi (not j))) (not (and $fi $ki iw ix)))))))\n(assert (let (($ih (not eu))) (let (($ki (not dq))) (let (($cb (not ef))) (let (($ii (and $cb $ki $ih iw))) (not $ii))))))\n(check-sat-using qe2)\n```\nZ3  throws out an assertion violation:\n```\nFailed to verify: val1 == val2\nASSERTION VIOLATION\nFile: ../src/smt/theory_bv.cpp\nLine: 1822\nUNREACHABLE CODE WAS REACHED.\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: c71da17\n",
    "priority": 1
  },
  "624": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun c (Int) Int)\r\n(declare-fun br (Int) Int)\r\n(declare-fun cn (Int) Int)\r\n(declare-fun cm (Int) Int)\r\n(declare-fun a (Int) Int)\r\n(declare-fun g () Int)\r\n(declare-fun h () Int)\r\n(declare-fun d () Int)\r\n(declare-fun j () Int)\r\n(declare-fun f () Int)\r\n(declare-fun co () Int)\r\n(declare-fun k () Int)\r\n(declare-fun l () Int)\r\n(declare-fun m () Int)\r\n(declare-fun cp () Int)\r\n(assert\r\n(let ((aa j) (e co) (b k) (i f) (n (br co)) (ba d)\r\n      (bf (c l)) (bg m) (bh (c cp)) (bi (cn g))\r\n      (bj cn) (bn (cn k)) (bt cm) (bx (cm j)) (cg (a l)))\r\n (and\r\n  (or\r\n   (and\r\n    (or\r\n     (and\r\n      (or\r\n       (and\r\n        (or\r\n         (and\r\n          (or\r\n           (and\r\n            (or\r\n             (and\r\n              (or (= (a h) k) (= (a h) l) (= n h))\r\n              (= (a j) f l) (distinct (a co) m) (= (a k) f k))\r\n             (distinct n j) (= cg f) (distinct cg co)\r\n             (= cg k) (= cg l) (= cg m) (= cg cp))\r\n            (= (a cp) cp) (distinct g h)\r\n            (distinct g d)))\r\n          (distinct g l) (distinct h f) (distinct d k) (distinct d l)))\r\n        (distinct d cp) (distinct j f) (distinct j co) (distinct j k)\r\n        (distinct j l) (distinct j m) (= j cp))\r\n       (distinct f m) (distinct f cp))\r\n      (distinct co k) (distinct k cp) (distinct l m) (distinct l cp))\r\n     (> g 1))\r\n    (<= 0 h 11) (< k 1) (<= 0 m)))\r\n  (= (c (c (a (ite (< (- g cp) 11) (- g cp) g))))\r\n   (c (c (a (ite (< (+ g h) 11) (+ g h) g))))))))\r\n(check-sat-using (then dom-simplify smt))\r\n```\r\nZ3  gives an invalid model:\r\n```\r\n(define-fun f () Int\r\n    (- 58574))\r\n  (define-fun g () Int\r\n    3)\r\n  (define-fun k () Int\r\n    (- 72022))\r\n  (define-fun l () Int\r\n    (- 2))\r\n  (define-fun cp () Int\r\n    (- 3))\r\n  (define-fun m () Int\r\n    0)\r\n  (define-fun d () Int\r\n    (- 4))\r\n  (define-fun h () Int\r\n    6)\r\n  (define-fun j () Int\r\n    (- 3))\r\n  (define-fun co () Int\r\n    0)\r\n  (define-fun a ((x!0 Int)) Int\r\n    (ite (= x!0 6) (- 1)\r\n    (ite (= x!0 (- 72022)) (- 58573)\r\n    (ite (= x!0 (- 3)) (- 3)\r\n    (ite (= x!0 9) 59991\r\n      1)))))\r\n  (define-fun br ((x!0 Int)) Int\r\n    (- 4))\r\n  (define-fun c ((x!0 Int)) Int\r\n    (ite (= x!0 0) 26829\r\n    (ite (= x!0 59991) 22797\r\n      0)))\r\n  (define-fun cn ((x!0 Int)) Int\r\n    0)\r\n  (define-fun cm ((x!0 Int)) Int\r\n    0)\r\n```\r\nif I feed this model to the formula, Z3 throws out an error:\r\n```\r\n(error \"line 40 column 10: unknown constant cn\")\r\nsat\r\n```\r\nand CVC4 gives unsat.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: c71da17\r\n",
    "priority": 1
  },
  "625": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(define-fun a ((x Int)) Int 0)\r\n(assert (let ((b a)) true))\r\n(check-sat)\r\n```\r\nZ3 gives an error `(error \"line 2 column 17: unknown constant a\")`, while cvc4 accpets this formula and gives sat.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: c71da17",
    "priority": 0
  },
  "626": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () String)\n(declare-fun b () Int)\n(assert (distinct (str.replace \"A\" (int.to.str b) a)\n         (str.replace \"\" (int.to.str b) a)))\n(assert (= (str.replace a (str.at a b) \"\") a))\n(check-sat)\n(get-model)\n```\nZ3 smt.string_solver=z3str3 gives an invalid model:\n```\n(model \n  (define-fun b () Int\n    1)\n  (define-fun a () String\n    \"\\x00\\x00\\x00\")\n)\n```\nif I feed this model to the formula, Z3 reports unsat.\n\nOS: Ubuntu 18.04\nCommit: 1aea0d2\n",
    "priority": 0
  },
  "627": {
    "body": "Hi,\nFor this formula:\n```\n(assert (forall ((a (Array Int Bool))) (select a 0)))\n(check-sat-using qe_rec)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/util/obj_hashtable.h\nLine: 177\ne\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 1aea0d2\n",
    "priority": 1
  },
  "628": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () String)\r\n(assert (= (str.substr a 0 1) \"\"))\r\n(assert (distinct (str.substr a 1 1) \"*\"))\r\n(check-sat-using (then qe2 smt))\r\n```\r\nZ3  smt.string_solver=z3str3  throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_str_mc.cpp\r\nLine: 805\r\nlhs_chars.size() == rhs_chars.size()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 1aea0d2\r\n",
    "priority": 1
  },
  "629": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () String)\n(assert (let ((b (str.substr a 10 (str.len a))))\n         (let ((c (str.substr a 0 (- (str.len b) (+ (str.indexof b \"z\" 0) 1)))))\n          (and (= (str.len c) 0) (str.prefixof \"yyyz\" a) (str.contains a \"z\")))))\n(check-sat)\n(get-model)\n```\nZ3  gives an invalid model:\n```\n(model \n  (define-fun a () String\n    \"yyyz\\x00\\x00\\x00\\x00\\x00\\x00zz\")\n)\n```\nif I feed this model to the formula, Z3 reports unsat.\n\nOS: Ubuntu 18.04\nCommit: 1aea0d2\n",
    "priority": 1
  },
  "630": {
    "body": "Hi,\nFor this formula:\n```\n(declare-datatypes ((a 0)) ((par (T) ((c (d T))))))\n```\nZ3  throws out a segmentation fault.\n\nOS: Ubuntu 18.04\nCommit: f604fad\n",
    "priority": 1
  },
  "631": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real)\n(declare-fun b () Real)\n(assert (distinct b (^ a 0.0)))\n(assert (= b 1.0))\n(check-sat-using nlqsat)\n(get-model)\n```\nZ3  gives an invalid model:\n```\n(model \n  (define-fun b () Real\n    1.0)\n  (define-fun a () Real\n    (- (/ 1.0 4.0)))\n)\n```\nif I feed this model to the formula, Z3 reports unsat.\n\nOS: Ubuntu 18.04\nCommit: 3bb05b5\n",
    "priority": 1
  },
  "632": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun s () String)\n(assert (< (str.to.int s) 2))\n(check-sat-using (then qe2 smt))\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/qe/qsat.cpp\nLine: 633\nvalidate_defs(\"check_sat\")\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 3bb05b5\n",
    "priority": 0
  },
  "633": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real)\n(declare-fun b () Real)\n(assert (distinct a (^ b 0.0)))\n(check-sat-using subpaving)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/subpaving/subpaving_t_def.h\nLine: 372\ndegree(i) > 0\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 3bb05b5\n",
    "priority": 1
  },
  "634": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun key2 () String)\n(declare-fun value2 () String)\n(assert\n (and\n  (and\n   (and\n    (and\n     (and\n      (and\n       (and\n        (and\n         (and\n          (and\n           (and\n            (and\n             (not\n              (not\n               (not (= (ite (not (= (str.indexof (str.substr value2 0 (- (str.indexof value2 \",\" 0) 0)) \"=\" 0) (- 1))) 1 0) 0))))\n             (not (not (= (ite (str.contains (str.substr value2 (+ (str.indexof value2 \",\" 0) 1) (- (str.len value2) (+ (str.indexof value2 \",\" 0) 1))) \",\") 1 0) 0))))\n            (not (not (= (ite (= (str.len (str.substr value2 (+ (str.indexof value2 \",\" 0) 1) (- (str.len value2) (+ (str.indexof value2 \",\" 0) 1)))) 0) 1 0) 0))))\n           (not (= (ite (str.contains value2 \",\") 1 0) 0)))\n          (not (not (= (ite (= (str.len value2) 0) 1 0) 0))))\n         (not (= (ite (= key2 \"cache-control\") 1 0) 0)))\n        (not (= (ite (= key2 \"cache-control\") 1 0) 0)))\n       (>= 0 0))\n      (>= (- (str.indexof value2 \",\" 0) 0) 0))\n     (>= (+ (str.indexof value2 \",\" 0) 1) 0))\n    (> (- (str.len value2) (+ (str.indexof value2 \",\" 0) 1)) 0))\n   (>= (+ (str.indexof value2 \",\" 0) 119) 0))\n  (>= (- (str.len value2) (+ (str.indexof value2 \",\" 0) 1)) 0)))\n(check-sat)\n\n```\nZ3 smt.string_solver=z3str3 model_validate=true throws out a segmentation fault.\n\nOS: Ubuntu 18.04\nCommit: 3bb05b5\n",
    "priority": 0
  },
  "635": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Int)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(assert (< a 0))\r\n(assert (= (/ 2.0 b c) 1.0))\r\n(check-sat)\r\n(check-sat)\r\n```\r\nTwo (check-sat)s give different answers:\r\n```\r\n[504] % z3 small.smt2\r\nunknown\r\nsat\r\n[505] % \r\n[505] % cat small.smt2\r\n(declare-fun a () Int)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(assert (< a 0))\r\n(assert (= (/ 2.0 b c) 1.0))\r\n(check-sat)\r\n(check-sat)\r\n[506] %\r\n```\r\nChanging a's type to Real or changing 2.0 to 1.0 makes it disappear.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 1ac365c",
    "priority": 0
  },
  "636": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () Real)\r\n(assert (distinct (^ a 0.0) 1.0))\r\n(check-sat)\r\n(check-sat-using nlqsat)\r\n```\r\nZ3  throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/util/old_vector.h\r\nLine: 370\r\nidx < size()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nIt could be related to #3038.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 006caea\r\n",
    "priority": 1
  },
  "637": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Bool)\n(declare-fun b () Bool)\n(declare-fun c () Bool)\n(assert (and (or (and a b) a) c))\n(check-sat-using pb-preprocess)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/tactic/core/pb_preprocess_tactic.cpp\nLine: 578\npure_args(a)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 006caea\n",
    "priority": 1
  },
  "638": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a (Int) Bool)\n(declare-fun b (Int) Bool)\n(assert (distinct a b))\n(check-sat-using psmt)\n\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/smt/smt_context.h\nLine: 277\ne_internalized(n)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n\n```\n\nOS: Ubuntu 18.04\nCommit: 2882a67\n",
    "priority": 1
  },
  "639": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a (Int) Bool)\n(assert (exists ((b Int)) (a 0)))\n(check-sat-using bvarray2uf)\n```\nZ3  throws out an assertion violation:\n```\nNOT IMPLEMENTED YET!\nASSERTION VIOLATION\nFile: ../src/tactic/bv/bvarray2uf_rewriter.cpp\nLine: 396\nUNREACHABLE CODE WAS REACHED.\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 2882a67\n",
    "priority": 1
  },
  "640": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Int)\n(declare-fun b () Int)\n(declare-fun c () Int)\n(declare-fun d () Int)\n(declare-fun e () Int)\n(assert\n (let ((f (< 0 e d)))\n  (or\n   (and\n    (= c (/ 2.0 e))\n    (forall ((g Int))\n     (= (<= g d) (forall ((h Int)) (> h g)))))\n   (< b a)\n   f)))\n(check-sat-using psmt)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/smt/smt_internalizer.cpp\nLine: 530\ngate_ctx\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 2882a67\n",
    "priority": 1
  },
  "641": {
    "body": "EDIT: sorry for the huge formula. We tried hard but couldn't get it any smaller.\r\n\r\n```\r\n#z3/build-2020-02-17-41ab578/z3 bug.smt2\r\nFailed to verify: val1 == val2\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_bv.cpp\r\nLine: 1807\r\nUNREACHABLE CODE WAS REACHED.\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n^C^C\r\n#cat bug.smt2 \r\n(declare-fun a () Bool)\r\n(declare-fun b () Bool)\r\n(declare-fun ec () Bool)\r\n(declare-fun W_S1_V5 () Bool)\r\n(declare-fun c () Bool)\r\n(declare-fun d () Bool)\r\n(declare-fun fe () Bool)\r\n(declare-fun W_S2_V1 () Bool)\r\n(declare-fun ha () Bool)\r\n(declare-fun R_S2_V5 () Bool)\r\n(declare-fun e () Bool)\r\n(declare-fun hb () Bool)\r\n(declare-fun f () Bool)\r\n(declare-fun hc () Bool)\r\n(declare-fun hd () Bool)\r\n(declare-fun g () Bool)\r\n(declare-fun h () Bool)\r\n(declare-fun i () Bool)\r\n(declare-fun j () Bool)\r\n(declare-fun k () Bool)\r\n(declare-fun l () Bool)\r\n(declare-fun m () Bool)\r\n(declare-fun n () Bool)\r\n(declare-fun o () Bool)\r\n(declare-fun p () Bool)\r\n(declare-fun q () Bool)\r\n(declare-fun r () Bool)\r\n(declare-fun s () Bool)\r\n(declare-fun t () Bool)\r\n(assert\r\n(let (($u\r\n(forall\r\n((v (_ BitVec 32))\r\n(w (_ BitVec 32))\r\n(x (_ BitVec 32))\r\n(y (_ BitVec 32))\r\n(aa Bool)\r\n(ab Bool)\r\n(ac Bool)\r\n(ad Bool)\r\n(ae Bool)\r\n(af Bool)\r\n(ag Bool)\r\n(ah Bool)\r\n(ai Bool)\r\n(aj Bool)\r\n(ak (_ BitVec 32))\r\n(al (_ BitVec 32))\r\n(am (_ BitVec 32))\r\n(an (_ BitVec 32))\r\n(ao (_ BitVec 32))\r\n(ap (_ BitVec 32))\r\n(aq (_ BitVec 32))\r\n(ar (_ BitVec 32))\r\n(he (_ BitVec 32))\r\n(hf (_ BitVec 32))\r\n(hg (_ BitVec 32))\r\n(hh (_ BitVec 32))\r\n(hi (_ BitVec 32))\r\n(hj (_ BitVec 32))\r\n(hk (_ BitVec 32))\r\n(hl (_ BitVec 32))\r\n(hm (_ BitVec 32))\r\n(hn (_ BitVec 32))\r\n(ho (_ BitVec 32))\r\n(hp (_ BitVec 32))\r\n(hq (_ BitVec 32))\r\n(hr (_ BitVec 32))\r\n(hs (_ BitVec 32))\r\n(ht (_ BitVec 32))\r\n(hu (_ BitVec 32))\r\n(hv (_ BitVec 32))\r\n(hw (_ BitVec 32))\r\n(hx (_ BitVec 32))\r\n(hy (_ BitVec 32))\r\n(hz (_ BitVec 32))\r\n(ia (_ BitVec 32))\r\n(ib (_ BitVec 32))\r\n(if (_ BitVec 32))\r\n(ic (_ BitVec 32))\r\n(id (_ BitVec 32))\r\n(ie (_ BitVec 32))\r\n(ig (_ BitVec 32))\r\n(ih (_ BitVec 32)))\r\n(let (($as (= (ite aj hn (ite ae hx y)) (ite aj hp (ite ae hz (ite aj ho (ite ae hy y)))))))\r\n(let (($at (= (ite ai ao (ite ad hq x)) (ite ai aq (ite ad hs (ite ai ap (ite ad hr x)))))))\r\n(let ((?au (ite ac hh w)))\r\n(let ((?av (ite ah if ?au)))\r\n(let ((?aw (ite ac hi ?av)))\r\n(let ((?ax (ite ah ic ?aw)))\r\n(let ((?ay (ite ac hg w)))\r\n(let ((?az (ite ah ib ?ay)))\r\n(let (($bb (= (ite ag ie (ite ab ar v)) (ite ag ih (ite ab hf (ite ag ig (ite ab he v)))))))\r\n(let ((?bc (ite aa al hl)))\r\n(let ((?bd (ite af hv ?bc)))\r\n(let ((?be (bvadd (_ bv1 32) ?bd)))\r\n(let ((?bf (ite aa am ?be)))\r\n(let ((?bg (ite af hw ?bf)))\r\n(let ((?bh (ite af ht hk)))\r\n(let ((?bi (bvadd (_ bv1 32) ?bh)))\r\n(let ((?bj (ite af hu ?bi)))\r\n(let (($bk (= ?bj ?bg)))\r\n(let (($bl\r\n(and\r\n(not (bvsle w hj))\r\n(bvsge (ite aa ak hj)\r\n(bvadd (bvneg (_ bv1 32)) ?ay ?ay hk))\r\n(not (bvsle (ite ah ia ?ay) ?bi))\r\n(bvsge ?bj (bvadd (bvneg (_ bv1 32)) ?az))\r\n(not (bvsle w hl))\r\n(not (bvsle ?av ?be))\r\n(bvsge ?bg (bvadd (bvneg (_ bv1 32)) ?ax)))))\r\n(let (($bm (or (not ai) c)))\r\n(let (($bn d))\r\n(let (($bo (or (not ag) fe)))\r\n(let (($bp (or (not af) W_S2_V1)))\r\n(let (($bs (= ih ig)))\r\n(let ((?bt (ite ae hy y)))\r\n(let ((?bu (ite aj ho ?bt)))\r\n(let ((?bv (ite ae hz ?bu)))\r\n(let (($ii (not ha)))\r\n(let (($ij (or $ii (= ?bv ?bt))))\r\n(let ((?ik (ite ad hr x)))\r\n(let ((?il (ite ai ap ?ik)))\r\n(let ((?bw (ite ad hs ?il)))\r\n(let (($bx (not R_S2_V5)))\r\n(let (($bz (not e)))\r\n(let (($ca (or $bz (= ?aw ?au))))\r\n(let ((?cb (ite ab he v)))\r\n(let ((?cc (ite ag ig ?cb)))\r\n(let ((?cd (ite ab hf ?cc)))\r\n(let (($ce (not hb)))\r\n(let (($cf (or $ce (= ?cd ?cb))))\r\n(let (($cg (not f)))\r\n(let (($ch (or $cg (= ?bf ?bc))))\r\n(let (($ci (not (and $ch $cf $ca $ij))))\r\n(let (($cj (= ih ie)))\r\n(let (($ck (and $ii (= ?bv (ite aj hm (ite ae hx y))))))\r\n(let (($cl (or $bx (= ?bw (ite ai an (ite ad hq x))))))\r\n(let (($cm (or $bz (= ?aw (ite ah ia ?ay)))))\r\n(let (($cn (or $ce (= ?cd (ite ag id (ite ab ar v))))))\r\n(let (($co (not (and (or $cg (= ?bf ?bi)) $cn $cm $cl $ck))))\r\n(let (($cq (or $ii (= ?bt (ite aj hm (ite ae hx y))))))\r\n(let (($cr (or $bx (= ?ik (ite ai an (ite ad hq x))))))\r\n(let (($cs (or $bz (= ?au (ite ah ia ?ay)))))\r\n(let (($ct (or $ce (= ?cb (ite ag id (ite ab ar v))))))\r\n(let (($cu (not (and (or $cg (= ?bc ?bi)) $ct $cs $cr $cq))))\r\n(let (($cv (= id ih)))\r\n(let (($cw (or $ii (= (ite ae hx y) ?bv))))\r\n(let (($cx (or $bx (= (ite ad hq x) ?bw))))\r\n(let (($cy (or $bz)))\r\n(let (($cz (or $ce (= (ite ab ar v) ?cd))))\r\n(let (($da (or $cg (= hk ?bf))))\r\n(let (($db (not (and $da $cz $cy $cx $cw))))\r\n(let (($dd (or $ii (= (ite ae hx y) ?bt))))\r\n(let (($de (or $bx (= (ite ad hq x) ?ik))))\r\n(let (($im (or $bz (= ?ay ?au))))\r\n(let (($df (or (= (ite ab ar v) ?cb))))\r\n(let (($dg (or $cg (= hk ?bc))))\r\n(let (($dh (not (and $dg $df $im $de $dd))))\r\n(let (($di (= id ie)))\r\n(let (($dj (or $ii (= (ite ae hx y) (ite aj hm (ite ae hx y))))))\r\n(let (($dk (or (= (ite ad hq x) (ite ai an (ite ad hq x))))))\r\n(let (($dl (or $bz (= ?ay (ite ah ia ?ay)))))\r\n(let (($dm (or $ce (= (ite ab ar v) (ite ag id (ite ab ar v))))))\r\n(let (($dn (not (and (or $cg (= hk ?bi)) $dm $dl $dk $dj))))\r\n(let (($do (= ic ia)))\r\n(let (($dp (or $ii (= ?bv (ite ae hx y)))))\r\n(let (($dq (or $bx (= ?bw (ite ad hq x)))))\r\n(let (($dr (or $bz (= ?aw ?ay))))\r\n(let (($dv (or $ii (= ?bt ?bv))))\r\n(let (($dw (or $bx (= ?ik ?bw))))\r\n(let (($dx (or $bz (= ?au ?aw))))\r\n(let (($dy (or $ce (= ?cb ?cd))))\r\n(let (($dz (or $cg (= ?bc ?bf))))\r\n(let (($eb (or $ii (= ?bt (ite ae hx y)))))\r\n(let (($ed (or $bz (= ?au ?ay))))\r\n(let (($ef (or $cg (= ?bc hk))))\r\n(let (($ek (or (not hd) (= ?il x))))\r\n(let (($eo (or (not h) (= ?cc v))))\r\n(let (($ep (and (or (not i) (= ?bd (bvadd (bvneg (_ bv1 32)) hj))) $eo $ek)))\r\n(let (($es (or (not hc) (= y ?bu))))\r\n(let (($eu (or g (= w ?av))))\r\n(let (($ev (or (not h) (= v ?cc))))\r\n(let (($ew (not (and (or (not i) (= hl ?be)) $ev $eu (or (not hd) (= x ?il)) $es))))\r\n(let (($ex (not (or (= hl hj)))))\r\n(let (($fa (or $ii (= (ite aj hm (ite ae hx y)) ?bv))))\r\n(let (($fb (or $bx (= (ite ai an (ite ad hq x)) ?bw))))\r\n(let (($fc (or $bz (= (ite ah ia ?ay) ?aw))))\r\n(let (($fd (or $ce (= (ite ag id (ite ab ar v)) ?cd))))\r\n(let (($fg (and (or (not i) (= ?bd (bvadd (bvneg (_ bv1 32)) hl))))))\r\n(let (($fj (or (not (and (or $cg (= ?bh (bvadd (bvneg (_ bv1 32)) ?bf))) $fd $fc $fb $fa)) (= hn hp))))\r\n(let (($fl (or $ii (= (ite aj hm (ite ae hx y)) ?bt))))\r\n(let (($fm (or $bx (= (ite ai an (ite ad hq x)) ?ik))))\r\n(let (($fn (or $bz (= (ite ah ia ?ay) ?au))))\r\n(let (($in (or (not (and (or $cg (= ?bh (bvadd (bvneg (_ bv1 32)) ?bc))) $fn $fm $fl)) (= hn ho))))\r\n(let (($fs (or (not a) (= (ite ae hx y) y))))\r\n(let (($fu (or (not ec) (= (ite ad hq x) x))))\r\n(let (($fz (or (not (and (or $cg (= ?bh (bvadd (bvneg (_ bv1 32)) ?bc))))))))\r\n(let (($ge (or $ce (= (ite ag id (ite ab ar v)) (ite ab ar v)))))\r\n(let (($gf (or (not (and $ge)) (= ao an))))\r\n(let (($gi (or (not (and (or i (= hj ?be)) $eu)) (= ak am))))\r\n(let\r\n(($gj\r\n(and $gi\r\n(or $ex (= al ak))\r\n(or $ew (= al am)) $gf $fz\r\n(or (not (and $dr $dq $dp)) (distinct aq an))\r\n(or $co (= aq ao))\r\n(or $ci (= hi hg))\r\n(or (not $fg) (= hi hh))\r\n(or (not (and\r\n(or (= ?ay w)) $fu $fs)) (= hk hj))\r\n(or (not (and $fu $fs)) (= hk hl)) (= hl hj) $in $fj\r\n(or $ci (= hp ho))\r\n(or $ex (= hr hq))\r\n(or (not $ep) (= hs hq))\r\n(or (not $fg) (= hs hr))\r\n(or $dn (= ht hu hw))\r\n(or (not (and $ef)) (= hv ht))\r\n(or $cu (= hv hu))\r\n(or (not (and $dz)) (= hv hw)) (= hy hx)\r\n(or $ew)\r\n(or (not (and $ef\r\n(or $ce) $ed $eb)) (= if ia) (= if ib))\r\n(or (not (and $dz $dy $dx $dw $dv)) (= if ic))\r\n(or $do)\r\n(or $co (= ic ib))\r\n(or $dn $di)\r\n(or $dh (= id ig))\r\n(or $db $cv)\r\n(or $cj)\r\n(or $ci $bs ac) $bp $bo $bn $bm)))\r\n(or (not $gj) (not $bl) (and $bk $bb $at $as))\r\n)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))\r\n(let ((gm (= k e)))\r\n(and t (not s) (not r) (not q)\r\n(= p (not (or (and W_S1_V5 hd) (and b hc)))) (not n)\r\n(= m (not (or fe (and W_S1_V5 c) b)))\r\n(= l (not (or W_S2_V1 (and c hd) hc)))\r\n(= k (not (or (and W_S2_V1 f) (and fe hb e) (and c R_S2_V5) ha)))\r\n(= j (not (or (and c ec) a))) $u (not (and W_S1_V5 ec)) (not (and b a))))))\r\n(assert (not (and l k)))\r\n(assert (not (and (not d) k)))\r\n(assert (not (and o l)))\r\n(assert (not (and (not hb) (not c) l)))\r\n(assert (not (and (not ha) (not c) (not fe) l)))\r\n(assert (not (and (not hb) (not ha) (not c) l)))\r\n(assert (not (and (not W_S2_V1) (not d))))\r\n(assert (not (and (not f) l)))\r\n(assert (not (and (not c) l)))\r\n(assert (or f (not d)))\r\n(assert (or f R_S2_V5))\r\n(assert (not (and m l)))\r\n(assert (or f (not e)))\r\n(assert (not (and (not R_S2_V5) (not b) (not fe) l)))\r\n(assert f)\r\n(assert (or ha fe))\r\n(check-sat-using (then qe2 smt))\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: 41ab578",
    "priority": 1
  },
  "642": {
    "body": "```\r\n#z3/build-2020-02-17-41ab578/z3 bug.smt2\r\n[1]    52123 segmentation fault  z3/build-2020-02-17-41ab578/z3 bug.smt2\r\n#cat bug.smt2 \r\n(assert (forall ((a Real)) (exists ((b Real) (c Real)) (<= (+ a c) 0.0 c 0.0))))\r\n(check-sat-using bv)\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: 41ab578",
    "priority": 1
  },
  "643": {
    "body": "\r\n```\r\n#z3/build-2020-02-17-41ab578/z3 bug.smt2\r\nASSERTION VIOLATION\r\nFile: ../src/math/subpaving/subpaving_t_def.h\r\nLine: 372\r\ndegree(i) > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n^C\r\n\r\n#cat bug.smt2 \r\n(declare-fun a () Real)\r\n(assert (= (^ a 0.0) 1.0))\r\n(check-sat-using subpaving)\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: 41ab578",
    "priority": 1
  },
  "644": {
    "body": "Hi,\nFor this formula:\n```\n(assert (is_int 0))\n(check-sat-using fix-dl-var)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ast/ast.h\nLine: 721\nidx < m_num_args\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 2882a67\n",
    "priority": 1
  },
  "645": {
    "body": "Hi,\nFor this formula:\n```\n(assert\n (forall ((a Real))\n  (exists ((b Real))\n   (forall ((c Real))\n    (exists ((d Real))\n     (forall ((e Real))\n      (exists ((f Real))\n       (and (< e c) (or (= a 0) (= f d))))))))))\n(assert (exists ((g Real)) (< g 0)))\n(check-sat-using horn)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ast/rewriter/th_rewriter.cpp\nLine: 696\nold_q->get_expr() == new_body\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: f810f25\n",
    "priority": 1
  },
  "646": {
    "body": "Hi,\nFor this formula:\n```\n(declare-sort E 0)\n(declare-fun f (E) Bool)\n(declare-fun g (E) E)\n(assert (forall ((a E)) (f (g a))))\n(check-sat-using bv)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ast/macros/macro_manager.cpp\nLine: 280\nv->get_idx() < num\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: d25db0d\n",
    "priority": 1
  },
  "647": {
    "body": "Hi,\nFor this formula:\n```\n(assert (forall ((a Bool)) true))\n(check-sat-using elim-small-bv)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/ast/bv_decl_plugin.h\nLine: 394\nis_bv_sort(s)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: d25db0d\n",
    "priority": 1
  },
  "648": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () (_ BitVec 32))\n(declare-fun b () (_ BitVec 16))\n(declare-fun c () (_ BitVec 16))\n(declare-fun d () (_ BitVec 16))\n(declare-fun t () (_ BitVec 16))\n(declare-fun e () (_ BitVec 16))\n(declare-fun f () (_ BitVec 16))\n(assert (let ((a!1 (bvadd (bvadd a #x00000004)\n                  (bvsub (bvadd (bvadd a #x00000004)\n                                #x0000003d\n                                ((_ zero_extend 16) c)\n                                ((_ zero_extend 16) b))\n                         (bvadd a #x00000004))\n                  #x00000004)))\n(let ((a!2 (bvadd a!1\n                  (bvsub (bvadd a!1\n                                #x00000035\n                                ((_ zero_extend 16) t)\n                                ((_ zero_extend 16) d))\n                         a!1)\n                  #x00000004)))\n(let ((a!3 (bvadd a!2\n                  (bvsub (bvadd a!2\n                                #x00000046\n                                ((_ zero_extend 16) f)\n                                ((_ zero_extend 16) e))\n                         a!2)\n                  #x00000004)))\n(let ((a!4 ((_ zero_extend 24)\n             (ite (bvult (bvsub #xffffffff a!3) #x00000000) #x01 #x00))))\n  (and (= ((_ zero_extend 16) f) #x00000000)\n       (= #x00000000 (bvsub #xffffffff a!4))))))))\n(check-sat)\n(check-sat-using propagate-bv-bounds)\n```\nZ3  throws out an assertion violation:\n```\nFailed to verify: b.negate(b)\nASSERTION VIOLATION\nFile: ../src/tactic/bv/bv_bounds_tactic.cpp\nLine: 335\nUNREACHABLE CODE WAS REACHED.\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 19ba294\n",
    "priority": 1
  },
  "649": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(assert (forall ((a (_ BitVec 6))) (forall ((b (_ BitVec 6))) (forall ((c (_ BitVec 6))) (or (distinct a b c) (= b c))))))\r\n(check-sat-using qe)\r\n```\r\nz3 throws out a segmentation fault.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: aaf2c3b",
    "priority": 1
  },
  "650": {
    "body": "Hi,\nFor this formula:\n```\n(declare-const a Real)\n(declare-const b Real)\n(assert (= (* a a b) 0.0))\n(check-sat-using subpaving)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/interval/interval_def.h\nLine: 1676\n!contains_zero(i2)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: aaf2c3b\n",
    "priority": 1
  },
  "651": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun r () String)\r\n(declare-fun s () String)\r\n(declare-fun t () String)\r\n(assert (= s t))\r\n(assert (= (str.indexof s r 1) (str.indexof t r 0)))\r\n(check-sat)\r\n(get-model)\r\n```\r\nZ3 smt.string_solver=z3str3  gives an invalid model:\r\n```\r\n(model \r\n  (define-fun t () String\r\n    \"?\")\r\n  (define-fun r () String\r\n    \"?\")\r\n  (define-fun s () String\r\n    \"?\")\r\n)\r\n```\r\nif I feed this model to the formula, Z3 reports unsat.\r\nif we swap '0' with '1' from the bug-triggering test, z3str3 now gives a correct model:\r\n```\r\n[525] % z3 smt.string_solver=z3str3 model_validate=true small2.smt2 \r\nsat\r\n(model \r\n  (define-fun t () String\r\n    \"?\")\r\n  (define-fun r () String\r\n    \"\\x00\\x00\")\r\n  (define-fun s () String\r\n    \"?\")\r\n)\r\n[526] % cat small2.smt2 \r\n(declare-fun r () String)\r\n(declare-fun s () String)\r\n(declare-fun t () String)\r\n(assert (= s t))\r\n(assert (= (str.indexof s r 0) (str.indexof t r 1)))\r\n(check-sat)\r\n(get-model)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: aaf2c3b\r\n",
    "priority": 1
  },
  "652": {
    "body": "Hi,\nFor this formula:\n```\n(assert (= (+ 1.0 (^ 0.5 70.0)) 1.0))\n(check-sat-using subpaving)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/subpaving/subpaving_t.h\nLine: 774\nx < num_vars()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: aaf2c3b\n",
    "priority": 1
  },
  "653": {
    "body": "Hi,\nFor this formula:\n```\n(assert (distinct (+ 1.0 (^ 0.5 70.0)) 1.0))\n(check-sat-using subpaving)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/util/old_vector.h\nLine: 370\nidx < size()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: aaf2c3b\n",
    "priority": 1
  },
  "654": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () String)\n(declare-fun b () Int)\n(assert (let ((a!1 (distinct (str.replace \"A\" (int.to.str b) a)\n                     (str.++ \"A\" (str.replace \"\" (int.to.str b) a))))\n      (a!2 (str.++ (str.replace (str.++ (str.substr a 5 b) (str.substr a b 8))\n                                (str.substr a b 9)\n                                \"\")\n                   (str.substr a (- b) (str.len a)))))\n  (or a!1 (= (str.replace a (str.at a b) \"\") a!2))))\n(check-sat)\n```\nZ3 smt.string_solver=z3str3 throws out an assertion violation:\n```\nNOT IMPLEMENTED YET!\nASSERTION VIOLATION\nFile: ../src/smt/theory_str.cpp\nLine: 8870\nUNREACHABLE CODE WAS REACHED.\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n\n```\n\nOS: Ubuntu 18.04\nCommit: aaf2c3b\n",
    "priority": 1
  },
  "655": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () String)\r\n(assert (ite true (str.in.re a (str.to.re \"\")) false))\r\n(check-sat-using nlsat)\r\n```\r\nZ3  throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/nlsat/tactic/goal2nlsat.cpp\r\nLine: 208\r\nUNREACHABLE CODE WAS REACHED.\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nWhile Z3 does not throw out assertion violation on this equivalent formula:\r\n```\r\ndeclare-fun a () String)\r\n(assert (str.in.re a (str.to.re \"\")))\r\n(check-sat-using nlsat)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: aaf2c3b\r\n",
    "priority": 1
  },
  "656": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real)\n(assert (< 0.0 a 1.9))\n(check-sat-using qflia)\n\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/util/rational.h\nLine: 422\nis_int()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n\n```\n\nOS: Ubuntu 18.04\nCommit: aaf2c3b\n",
    "priority": 1
  },
  "657": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a (Int) Int)\n(assert (= a (lambda ((b Int)) 0)))\n(check-sat-using qe_rec)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/qe/qsat.cpp\nLine: 1010\n!is_lambda(e)\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: aaf2c3b\n",
    "priority": 1
  },
  "658": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () (Array Int (Array Int Int)))\n(assert (= a (store a 0 (store (select a 0) 0 0))))\n(check-sat-using qsat)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/qe/qsat.cpp\nLine: 633\nvalidate_defs(\"check_sat\")\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 99b71a9\n",
    "priority": 1
  },
  "659": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Bool)\n(assert (or a (and a)))\n(check-sat-using horn)\n\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/muz/base/dl_context.cpp\nLine: 691\nm_closed\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 85fd139\n",
    "priority": 1
  },
  "660": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun f (Int) Int)\r\n(declare-fun g (Int) Int)\r\n(assert (= f g))\r\n(check-sat-using horn)\r\n```\r\nZ3  (debug mode) throws out an assertion violation and Z3 (release mode) throws out a segmentation fault:\r\n```\r\n[576] % z3 small.smt2 \r\nASSERTION VIOLATION\r\nFile: ../src/muz/rel/aig_exporter.cpp\r\nLine: 272\r\nUNREACHABLE CODE WAS REACHED.\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n[577] % z3release small.smt2 \r\nSegmentation fault\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 85fd139\r\n",
    "priority": 1
  },
  "661": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Int)\n(declare-fun b () Int)\n(declare-fun c () Int)\n(declare-fun d () Int)\n(declare-fun o () Int)\n(declare-fun e () Int)\n(declare-fun f () Int)\n(declare-fun g (Int Int Int) Int)\n(declare-fun h () Int)\n(declare-fun i (Int) Int)\n(declare-fun j (Int) Int)\n(declare-fun k (Int) Int)\n(declare-fun l (Int) Int)\n(declare-fun m (Int) Bool)\n(declare-fun n (Int) Bool)\n(assert\n(let ((p (n (i (i 0)))))\n(let ((aa p) (ab (m 0)))\n(let ((af (n 0)) (ag (or (m f) (n e))))\n(let ((al (distinct 0 d)) (q (not (n (i 0)))) (an h) (aq (n 0)))\n(let ((bs (ite ag (+ 1 c) c)))\n(let ((av (ite af 0 bs)))\n(let ((au (ite (not (distinct c av)) (+ 1 c) c)))\n(let ((az b))\n(let ((be (ite ab (- 0 8 av) av)))\n(let ((bg (ite (and p (distinct au be)) (- au) au)))\n(let ((bk (distinct b (k 0))))\n(let ((cb (or (and (or (m (i 0)) p) (or  bk (= bg c))))))\n(let ((ce (and ab (distinct (l 0) d))))\n(let ((cq (g (ite (= an bs) 0 (ite (and ag (distinct c an)) 0 o)) 0 a)))\n (not\n  (and al (= (ite ce av (ite af bs c)) au)\n   (= (ite (not (distinct bg (ite aa (* 20 be) be)))\n       (ite cb (g 0 (ite (or ab (and af bk)) a\n                     (ite (and ab ag) (ite ag (g 0 a a) a) (ite q cq 0)))\n                (ite (and ab (not (= b (j 0)))) a 0))\n        (ite q cq (ite (or aq (and ag (= bg c)))\n                   (g 0 a a) a))) 0) 0))))))))))))))))))\n(check-sat)\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/math/lp/int_solver.cpp\nLine: 523\nl <= new_val && new_val <= u\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n\n```\n\nOS: Ubuntu 18.04\nCommit: 85fd139\n",
    "priority": 1
  },
  "662": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun s () String)\r\n(assert (distinct s \"aabb\"))\r\n(assert (< (str.indexof s \"aa\" 10) (str.indexof s \"bb\" 180)))\r\n(check-sat)\r\n```\r\n`z3 smt.string_solver=z3str3` throws out a segmentation fault.\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 0146259\r\n",
    "priority": 1
  },
  "663": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun b () String)\r\n(declare-fun a () String)\r\n(declare-fun c () String)\r\n(assert (or (distinct (str.substr a 167 (str.len b)) \"\")))\r\n(assert (let ((a!1 (str.len (str.substr (str.replace (str.replace a b \"\") \"29M8u\" \"\")\r\n                                220\r\n                                (* 92 (str.len c) 109))))\r\n      (a!2 (= (str.at (str.replace (str.replace a b \"\") \"29M8u\" \"\") 141) \"\"))\r\n      (a!3 (distinct (str.len (str.replace (str.replace a b \"\") \"29M8u\" \"\"))\r\n                     200))\r\n      (a!4 (to_real (str.len (str.replace (str.replace a b \"\") \"29M8u\" \"\")))))\r\n  (or (distinct (ite (= a!1 121) 130 211)\r\n                (ite a!2 168 213)\r\n                (ite a!3 243 102)\r\n                24)\r\n      (< (/ (/ 29.0 a!4) 200.0) 109.0))))\r\n(check-sat)\r\n```\r\nz3 smt.string_solver=z3str3 throws out a `Failed to verify: var_hasLen`\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 0146259",
    "priority": 1
  },
  "664": {
    "body": "Hi,\nFor this formula:\n```\n(declare-fun a () Real)\n(declare-fun b () Real)\n(declare-fun c () Real)\n(declare-fun d () Real)\n(assert\n (or\n  (forall ((e Real))\n   (and (or (>= (/ a d) 12.0) (>= (+ a d) (+ 5.0 c)) (>= (+ 5.0 c) 0.0))\n    (>= (- b) 12.0)))\n  (exists ((g Real)) (forall ((f Real)) (exists ((h Real)) true)))))\n(check-sat-using (then qe smt))\n```\nZ3  throws out an assertion violation:\n```\nASSERTION VIOLATION\nFile: ../src/qe/qe.cpp\nLine: 1764\nl_true == m_solver.check()\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 0146259\n",
    "priority": 1
  },
  "665": {
    "body": "Hi,\nFor this formula:\n```\n(assert (exists ((a Real)) (= 1.0 0.0)))\n(check-sat)\n(check-sat-using qe-sat)\n```\nZ3  throws out an assertion violation:\n```\nFailed to verify: m_arith_solver.solve_integer_equation(values, index, is_aux)\nASSERTION VIOLATION\nFile: ../src/qe/qe_arith_plugin.cpp\nLine: 1025\nUNREACHABLE CODE WAS REACHED.\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\n```\n\nOS: Ubuntu 18.04\nCommit: 0146259\n",
    "priority": 1
  },
  "666": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun s () String)\r\n(declare-fun x () Int)\r\n(assert (<= x 9))\r\n(assert (> (str.indexof s \"goodbye\" x) 253))\r\n(check-sat)\r\n(get-model)\r\n```\r\n`z3 smt.string_solver=z3str3 model_validate=true` throws out an invalid model error:\r\n```\r\nsat\r\n(error \"line 5 column 10: an invalid model was generated\")\r\n(model \r\n  (define-fun s () String\r\n    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00goodbye\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00goodbye\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\")\r\n  (define-fun x () Int\r\n    0)\r\n)\r\nast_manager LEAKED: 9\r\nLeaked: (= $$_str0!tmp22[$$_str0!tmp22] $$_str7!tmp34[$$_str7!tmp34])\r\nid: 2295\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 17984af",
    "priority": 1
  },
  "667": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun s () String)\r\n(assert (> (str.to.int s) 1))\r\n(check-sat)\r\n(get-model)\r\n```\r\n`z3str3` gives an invalid model:\r\n```\r\n(model \r\n  (define-fun s () String\r\n    \"1\")\r\n)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 4f33c12",
    "priority": 1
  },
  "668": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-sort T 0)\r\n(declare-fun b (Int T) T)\r\n(declare-fun c (T) Int)\r\n(declare-fun e (Int T) T)\r\n(assert (forall ((d Int) (g T)) (= (c (b d g)) (/ 1 (c g)))))\r\n(assert (forall ((f Int) (g T)) (=> (<= f 0) (= (e f g) (e 0 (b 1 g))))))\r\n(assert\r\n (forall ((f Int))\r\n  (and (<= f 0)\r\n   (exists ((g T)) (distinct (e f (b 1 g)) (b 1 (e f g))))\r\n   (forall ((g T)) (distinct (e 0 (b 1 g)) (b 1 (e (+ f 1) g)))))))\r\n(check-sat-using qflia)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_context.cpp\r\nLine: 2463\r\nUNREACHABLE CODE WAS REACHED.\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 4f33c12",
    "priority": 1
  },
  "669": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(set-logic QF_NRA)\r\n(declare-fun a () Real)\r\n(assert (= (* a a) 0.0))\r\n(check-sat-using nla2bv)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/ast/rewriter/rewriter_def.h\r\nLine: 297\r\nst != BR_DONE || m().get_sort(m_r) == m().get_sort(t)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nCommit: 4f33c12",
    "priority": 1
  },
  "670": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(assert (forall ((a Real))\r\n  (exists ((b Real))\r\n    (forall ((c Real)) (or (= (* a c) 0.0) (not (= a 0.0)))))))\r\n(check-sat-using horn)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nArithmetic proof check failed: (not (<= (* c!3 query!0_0_n) 0.0))\r\nProof check failed\r\n#160 := (<= query!0_0_n 0::Real)\r\n#51 := (= query!0_0_n 0::Real)\r\n#122 := (* query!0_0_n c!3)\r\n#125 := (= #122 0::Real)\r\n#52 := (not #51)\r\n#128 := (or #52 #125)\r\n#131 := (not #128)\r\n#171 := [hypothesis]: #131\r\n#145 := (or #128 #51)\r\n#146 := [def-axiom]: #145\r\n#172 := [unit-resolution #146 #171]: #51\r\n#173 := (or #52 #160)\r\n#174 := [th-lemma arith triangle-eq]: #173\r\n#175 := [unit-resolution #174 #172]: #160\r\n#161 := (>= query!0_0_n 0::Real)\r\n#176 := (or #52 #161)\r\n#177 := [th-lemma arith triangle-eq]: #176\r\n#178 := [unit-resolution #177 #172]: #161\r\n#143 := (<= #122 0::Real)\r\n#181 := (not #143)\r\n#147 := (not #125)\r\n#148 := (or #128 #147)\r\n#149 := [def-axiom]: #148\r\n#179 := [unit-resolution #149 #171]: #147\r\n#144 := (>= #122 0::Real)\r\n#168 := (not #160)\r\n#167 := (not #161)\r\n#169 := (or #144 #167 #168)\r\n#162 := [hypothesis]: #160\r\n#163 := [hypothesis]: #161\r\n#164 := (not #144)\r\n#165 := [hypothesis]: #164\r\n#166 := [th-lemma arith farkas 1 1 1 #165 #163 #162]: false\r\n#170 := [lemma #166]: #169\r\n#180 := [unit-resolution #170 #178 #175]: #144\r\n#182 := (or #125 #181 #164)\r\n#183 := [th-lemma arith triangle-eq]: #182\r\n#184 := [unit-resolution #183 #180 #179]: #181\r\n[th-lemma arith farkas 1 1 1 #184 #178 #175]: false\r\nASSERTION VIOLATION\r\nFile: ../src/ast/proofs/proof_checker.cpp\r\nLine: 108\r\nUNREACHABLE CODE WAS REACHED.\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: d02d90d",
    "priority": 0
  },
  "671": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(assert (distinct (mod (to_int (/ a b)) 3) 1))\r\n(check-sat-using purify-arith)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nFailed to verify: d->get_range() == m.get_sort(e)\r\nASSERTION VIOLATION\r\nFile: ../src/tactic/generic_model_converter.cpp\r\nLine: 36\r\nUNREACHABLE CODE WAS REACHED.\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: d02d90d",
    "priority": 1
  },
  "672": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(assert (forall ((c Real)) (= (>= 0.0 b) (= (<= c 0.0) (> a b)))))\r\n(assert (forall ((d Real)) (< (/ (* (- a b) b) 0.0) a)))\r\n(check-sat-using qe-sat)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nFailed to verify: l_true == m_solvers[idx+1]->check()\r\nASSERTION VIOLATION\r\nFile: ../src/qe/qe_sat_tactic.cpp\r\nLine: 634\r\nUNREACHABLE CODE WAS REACHED.\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 524434c",
    "priority": 1
  },
  "673": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () (_ BitVec 1))\r\n(declare-fun b ((_ BitVec 1)) Bool)\r\n(assert (exists ((c (_ BitVec 1))) (distinct (= a c) (b c))))\r\n(check-sat-using qe-sat)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_bv.cpp\r\nLine: 1712\r\nr\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 5dc8c93",
    "priority": 1
  },
  "674": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(set-logic QF_UFLIA)\r\n(declare-fun a (Int) Int)\r\n(declare-fun b (Int) Int)\r\n(declare-fun c (Int) Int)\r\n(declare-fun d (Int) Int)\r\n(declare-fun ab (Int) Int)\r\n(declare-fun e () Int)\r\n(declare-fun f () Int)\r\n(declare-fun aa () Int)\r\n(declare-fun g () Int)\r\n(declare-fun h () Int)\r\n(declare-fun i () Int)\r\n(declare-fun j () Int)\r\n(assert\r\n (let ((k j) (l e) (b f) (m aa) (n (b h)) (o 0) (p (c i)) (q (d e)) (r (d f)) (s (d aa)) (t 0) (u (d j))\r\n       (v (ab e)) (w (b f)) (x (b aa)) (y (ab g)) (z (ab i)) (ac (+ e j)) (ad (+ e f)))\r\n  (and\r\n   (or\r\n    (and\r\n     (or\r\n      (and\r\n       (or\r\n        (and\r\n         (or\r\n          (and\r\n           (or (and (or (= q h) (= r e) (= r aa) (= r g) (distinct r h) (= r j)) (= s i) (distinct s j)) (distinct t i))\r\n           (or (= u f aa) (= u h) (= u i) (= u j))\r\n           (or (= v e) (= v aa) (= v h) (= v i))\r\n           (= w j))\r\n          (and (or (distinct x e f h) (= x i)) (= x j y i)) (distinct y j))\r\n         (or (and (or (= z g) (= z h)) (= z i)) (distinct z j)))\r\n        (distinct e aa))\r\n       (distinct e g))\r\n      (distinct e h) (distinct e i))\r\n     (distinct f g) (distinct f i) (distinct f j) (distinct aa g) (distinct aa h)\r\n     (distinct aa i) (= aa j) (distinct g h) (distinct g i) (distinct g j)\r\n     (distinct h i) (= h j) (distinct i j) (< e 8) (< f 8) (<= 0 aa 8) (< h 5))\r\n    (< i 8))\r\n   (<= 0 j 8) (distinct (a (a (ab (ite (< ac 8) ac e)))) (a (a (ab (ite (< ad 8) ad e))))))))\r\n(check-sat)\r\n(get-model)\r\n```\r\nz3 gives an incorrect model:\r\n```\r\n(model \r\n  (define-fun i () Int\r\n    6)\r\n  (define-fun f () Int\r\n    5)\r\n  (define-fun g () Int\r\n    6)\r\n  (define-fun aa () Int\r\n    (- 39898))\r\n  (define-fun h () Int\r\n    4)\r\n  (define-fun e () Int\r\n    3)\r\n  (define-fun j () Int\r\n    3)\r\n  (define-fun a ((x!0 Int)) Int\r\n    (ite (= x!0 51149) (- 1)\r\n    (ite (= x!0 6) 21774\r\n    (ite (= x!0 21774) 0\r\n      51149))))\r\n  (define-fun d ((x!0 Int)) Int\r\n    (ite (= x!0 5) 5\r\n      6))\r\n  (define-fun ab ((x!0 Int)) Int\r\n    6)\r\n  (define-fun b ((x!0 Int)) Int\r\n    (ite (= x!0 5) 3\r\n      4))\r\n  (define-fun c ((x!0 Int)) Int\r\n    0)\r\n)\r\n```\r\nIf I feed this model to the formula, z3 reports `unsat`.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 5dc8c93",
    "priority": 1
  },
  "675": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a (Int) Int)\r\n(declare-fun b (Int) Int)\r\n(declare-fun c () Int)\r\n(declare-fun d () Int)\r\n(declare-fun e () Int)\r\n(declare-fun f () Int)\r\n(declare-fun g () Int)\r\n(declare-fun i () Int)\r\n(assert\r\n (let ((h (+ c g)) (j (+ c d)))\r\n  (and (or (and (or (distinct c f) (distinct d f)) (distinct d g)) (distinct e g))\r\n   (< i 7)\r\n   (= (a (a (b (ite (< h 7) h c)))) (a (a (b (ite (< j 7) j c))))))))\r\n(check-sat)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_lra.cpp\r\nLine: 3425\r\n\"integer variables should have integer values: \" && (!a.is_int(o) || r.is_int() || m.canceled())\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 5dc8c93",
    "priority": 1
  },
  "676": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-sort E 0)\r\n(declare-fun s () (Set E))\r\n(assert (distinct (card s) 1))\r\n(check-sat-using qe2)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/qe/qe_mbp.cpp\r\nLine: 86\r\nUNREACHABLE CODE WAS REACHED.\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 5dc8c93",
    "priority": 1
  },
  "677": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a (Int) Int)\r\n(declare-fun b (Int) Int)\r\n(declare-fun c () Int)\r\n(declare-fun d () Int)\r\n(declare-fun i () Int)\r\n(declare-fun g () Int)\r\n(declare-fun h () Int)\r\n(declare-fun f () Int)\r\n(declare-fun e () Int)\r\n(assert (let ((a!1 (and (or (and (distinct h g) (= h i) (= g i)) (< 0 c))\r\n                (< d 1)\r\n                (< e 6)\r\n                (< 6 f)))\r\n      (a!2 (b (ite (< (+ c d) 1) 0 c))))\r\n  (and (or a!1 (< f 1) (<= 0 h)) (< h 10) (< 10 g) (< i (a a!2)))))\r\n(check-sat)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/util/old_vector.h\r\nLine: 370\r\nidx < size()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 140926e",
    "priority": 1
  },
  "678": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () String)\r\n(declare-fun b () Int)\r\n(assert (= (int.to.str b) (str.++ a \"0\")))\r\n(check-sat)\r\n(get-model)\r\n```\r\n`z3 smt.string_solver=z3str3` gives an incorrect model:\r\n```\r\n(model \r\n  (define-fun b () Int\r\n    0)\r\n  (define-fun a () String\r\n    \"\\x00\")\r\n)\r\n```\r\nIf I feed this model to the formula, `z3 smt.string_solver=z3str3` gives `unsat`.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 140926e",
    "priority": 1
  },
  "679": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(assert (= (str.replace (str.++ \"abc\" b) \"b\" a) (str.++ \"ac\" b)))\r\n(check-sat)\r\n```\r\n`z3 smt.string_solver=z3str3` throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_context.cpp\r\nLine: 3610\r\nstatus != l_true || !inconsistent()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 140926e",
    "priority": 1
  },
  "680": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun x () String)\r\n(declare-fun y () String)\r\n(assert (or (= (str.replace (str.replace x y x) x y) x)))\r\n(check-sat)\r\n```\r\n`z3 smt.string_solver=z3str3 ` throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/util/rational.h\r\nLine: 113\r\nis_unsigned()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision 140926e",
    "priority": 1
  },
  "681": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(declare-fun c () String)\r\n(assert (and (distinct (str.substr a 60 (str.len b)) \"\")))\r\n(assert\r\n (or\r\n  (distinct\r\n   (ite (distinct\r\n         (str.len (str.substr (str.replace (str.replace a b \"\") \"29M8u\" \"\")\r\n                   204\r\n                   (- 11 (str.len c) 234)))\r\n         210) 209 248)\r\n   (ite (= (str.at (str.replace (str.replace a b \"\") \"29M8u\" \"\") 234) \"\") 205 98)\r\n   (ite (distinct (str.len (str.replace (str.replace a b \"\") \"29M8u\" \"\")) 41) 172 27)\r\n   217)\r\n  (< (* 131 (str.len (str.replace (str.replace a b \"\") \"29M8u\" \"\")) 235) 147)))\r\n(check-sat)\r\n```\r\n`z3 smt.string_solver=z3str3 model_validate=true` throws out a segmentation fault.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 140926e",
    "priority": 1
  },
  "682": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun b () (_ BitVec 1229))\r\n(declare-fun a () (_ BitVec 1229))\r\n(declare-fun c () Bool)\r\n(assert (let ((a!1 (= ((_ extract 1228 1228) a) ((_ extract 1228 1228) b))))\r\n  (and (= c (bvslt a b)) (= (bvslt a b) (= c a!1)))))\r\n(check-sat-using qfbv-sls)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/util/mpq.cpp\r\nLine: 306\r\nd > 0.0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 140926e",
    "priority": 1
  },
  "683": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-const a String)\r\n(assert (< (str.to.int a) 1))\r\n(check-sat)\r\n```\r\n`z3 smt.string_solver=z3str3` throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.cpp\r\nLine: 431\r\nUNREACHABLE CODE WAS REACHED.\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 140926e",
    "priority": 1
  },
  "684": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(assert (<= 0.0 b a (/ 1.0 b)))\r\n(minimize a)\r\n(minimize c)\r\n(check-sat)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_model_generator.cpp\r\nLine: 102\r\nm_context->get_assignment(r) != l_undef\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 4535228",
    "priority": 1
  },
  "685": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(assert (exists ((f Real))\r\n  (let ((a!1 (- (- (- (- 1.0 b) d) a) c)))\r\n  (let ((a!2 (/ (/ f (- (/ a c))) (* 2.0 (+ a!1 e) (+ 2.0 a c e)))))\r\n    (> 0.0 (/ a!2 (- b d)))))))\r\n(check-sat)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_arith_nl.h\r\nLine: 548\r\ni < get_num_vars_in_monomial(n)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: ff6b330",
    "priority": 1
  },
  "686": {
    "body": "Hi,\r\non the following formula, Z3 segfaults. \r\n\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun e () Real)\r\n(declare-fun f () Real)\r\n(declare-fun g () Real)\r\n(declare-fun h () Real)\r\n(assert\r\n (forall ((d Real))\r\n  (= (> 0.0 (- (/ 0 d) b))\r\n   (<= f (/ 0 (* (+ c (* (+ 1 a e) (- 4 a e))) (- 3 a e g b) 2 h) (- (/ c g))) f))))\r\n(check-sat)\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: 32968fa",
    "priority": 1
  },
  "687": {
    "body": "Consider the following formula:\r\n\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(declare-fun f () Real)\r\n(declare-fun g () Real)\r\n(declare-fun h () Real)\r\n(declare-fun i () Real)\r\n(declare-fun j () Real)\r\n(assert\r\n (exists ((k Real))\r\n  (let ((l (* 2 (- (* (+ h b 1) (+ a g 1)) (/ a g)) (+ c f 1))))\r\n   (or (>= b (/ (/ 1 d) k) h) (>= 0 (/ 0 l) e)))))\r\n(assert (= c (/ (/ 1 f) i) (/ a j)))\r\n(check-sat)\r\n\r\n```\r\n\r\nZ3 throws the following error on it.\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_arith_nl.h\r\nLine: 1244\r\nUNREACHABLE CODE WAS REACHED.\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nOS: Ubuntu 18.04\r\nRevision:41a4dcf",
    "priority": 1
  },
  "688": {
    "body": "Consider the following formula.\r\n```\r\n(declare-fun f (Int Int Int) Int)\r\n(declare-fun g (Int Int Int) Int)\r\n(declare-fun a () Int)\r\n(assert (let ((b (f a a a))) (let ((c (f b a a))) (< (g b b 2) (- c)))))\r\n(check-sat)\r\n```\r\nZ3 gives a wrong model on it.\r\n```\r\n(model \r\n  (define-fun a () Int\r\n    0)\r\n  (define-fun g ((x!0 Int) (x!1 Int) (x!2 Int)) Int\r\n    0)\r\n  (define-fun f ((x!0 Int) (x!1 Int) (x!2 Int)) Int\r\n    0)\r\n)\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: 1d05723",
    "priority": 1
  },
  "689": {
    "body": "Consider the following formula.\r\n\r\n```\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(assert (distinct (str.prefixof a (str.substr b 20 2)) (str.prefixof a (str.at b 7))))\r\n(check-sat)\r\n(get-model)\r\n```\r\nZ3 gives the following incorrect model.\r\n\r\n```\r\n(model \r\n  (define-fun b () String\r\n    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\")\r\n  (define-fun a () String\r\n    \"\\x80\")\r\n)\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: 06173aa\r\n",
    "priority": 1
  },
  "690": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun b () (_ BitVec 7))\r\n(declare-fun a ((_ BitVec 12) (_ BitVec 6)) Bool)\r\n(assert (let ((a!1 (a ((_ zero_extend 11) (ite (bvsle #b001010001 #b001010001) #b1 #b0))\r\n              ((_ sign_extend 5) (ite (bvsle #b001010001 #b001010001) #b1 #b0)))))\r\n(let ((a!2 (ite (or (bvuge ((_ sign_extend 2) b) #b001010001) true)\r\n                a!1\r\n                (or (bvuge ((_ sign_extend 2) b) #b001010001) true))))\r\n  (and a!2 a!2))))\r\n(check-sat-using dom-simplify)\r\n```\r\nz3 gives `unsat` on this `sat` formula.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: a05dec9",
    "priority": 1
  },
  "691": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(define-sort a () (_ FloatingPoint 52 53))\r\n(declare-fun b () a)\r\n(declare-fun c () a)\r\n(declare-fun d () a)\r\n(assert (distinct (fp.rem b c) d ))\r\n(check-sat)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/ast/fpa/fpa2bv_converter.cpp\r\nLine: 1110\r\nm_mpz_manager.get_uint64(max_exp_diff) <= UINT_MAX\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: a05dec9",
    "priority": 1
  },
  "692": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(define-sort a () (FloatingPoint))\r\n(check-sat)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/util/hash.h\r\nLine: 78\r\nn > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: a05dec9",
    "priority": 1
  },
  "693": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(assert (exists ((a Int)) (= (/ 0 0) 0)))\r\n(check-sat-using reduce-invertible)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/util/old_vector.h\r\nLine: 370\r\nidx < size()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 28c827f",
    "priority": 1
  },
  "694": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () (Array (_ BitVec 1) (_ BitVec 1)))\r\n(declare-fun b () (_ BitVec 1))\r\n(assert (distinct (store (store (store a b (select a #b0)) #b0 (select a b)) b (select a b)) a))\r\n(check-sat-using qe2)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/qe/qe_mbp.cpp\r\nLine: 76\r\nUNREACHABLE CODE WAS REACHED.\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 28c827f",
    "priority": 1
  },
  "695": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Int)\r\n(assert (let ((a!1 ((_ int2bv 3) (bv2int (bvor ((_ int2bv 3) a))))))\r\n(let ((a!2 (distinct (bv2int (bvand a!1 ((_ int2bv 3) 1))) 0)))\r\n  (and a!2 (= ((_ extract 0 0) (bvand a!1)) #b0)))))\r\n(check-sat-using qe2)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_bv.cpp\r\nLine: 164\r\ne->get_th_var(get_id()) != null_theory_var\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 28c827f",
    "priority": 1
  },
  "696": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(assert (forall ((a (_ BitVec 1))) (forall ((b (_ BitVec 1))) (= b #b0))))\r\n(check-sat-using smtfd)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/tactic/fd_solver/smtfd_solver.cpp\r\nLine: 1928\r\n!m_axioms.contains(fml)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\na\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 28c827f",
    "priority": 0
  },
  "697": {
    "body": "Consider the following formula.\r\n```\r\n(declare-fun a () String)\r\n(declare-fun b () Int)\r\n(assert (= b (+ (str.indexof a \"x\" 0) 1)))\r\n(assert (str.contains (str.substr a b (* (str.len a) b)) \"y\"))\r\n(assert (str.contains (str.replace (str.substr a 0 1) \"x\" \"\") \"z\"))\r\n(assert (str.contains a \"x\"))\r\n(check-sat)\r\n\r\n```\r\nZ3 gives the following on it.\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_arith_nl.h\r\nLine: 1556\r\nn != nm\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nOS: Ubuntu 18.04\r\nRevision:41a4dcf",
    "priority": 1
  },
  "698": {
    "body": "Consider the following formula.\r\n```\r\n(assert (exists ((! Real)) (>= (!) 0.0)))\r\n(check-sat)\r\n```\r\nZ3 throws the following assertion violation.\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/parsers/smt2/smt2parser.cpp\r\nLine: 2037\r\nexpr_stack().size() == fr->m_expr_spos + 1\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n\r\n```",
    "priority": 1
  },
  "699": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(set-logic QF_NRA)\r\n(check-sat-using ctx-solver-simplify)\r\n```\r\nZ3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/ast/rewriter/rewriter_def.h\r\nLine: 292\r\nst != BR_DONE || m().get_sort(m_r) == m().get_sort(t)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 805ac74\r\n",
    "priority": 1
  },
  "700": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Int)\r\n(declare-fun b () Int)\r\n(declare-fun c () Int)\r\n(declare-fun d () Real)\r\n(assert (= (/ a b) (+ (/ 1 c b) d)))\r\n(assert (> d 1))\r\n(assert (> d 0))\r\n(check-sat)\r\n(get-model)\r\n```\r\nZ3 gives an incorrect model:\r\n```\r\n(model \r\n  (define-fun b () Int\r\n    0)\r\n  (define-fun a () Int\r\n    (- 1))\r\n  (define-fun c () Int\r\n    0)\r\n  (define-fun d () Real\r\n    0.0)\r\n  (define-fun /0 ((x!0 Real) (x!1 Real)) Real\r\n    (ite (and (= x!0 1.0) (= x!1 0.0)) (- 1.0)\r\n      0.0))\r\n)\r\n```\r\nwhich violates `(assert (> d 0))`.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 805ac74",
    "priority": 1
  },
  "701": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(assert (exists ((a Real)) true))\r\n(check-sat-using sat)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.h\r\nLine: 932\r\nis_app(n)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 3ec7146",
    "priority": 1
  },
  "702": {
    "body": "On the following formula Z3 throws an assertion violation\r\n\r\n```\r\n(declare-sort E 0)\r\n(declare-fun s () (Set E))\r\n(declare-fun t () (Set E))\r\n(declare-fun u () (Set E))\r\n(assert (> (card (union s t)) 74))\r\n(assert (> (card (union s u)) 73))\r\n(assert (> (card (union t u)) 66))\r\n(assert (< (card s)4))\r\n(check-sat)\r\n```\r\n\r\nwith the following message\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_internalizer.cpp\r\nLine: 447\r\nget_assignment(v) == l_undef\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nRevision: 41a4dcf\r\nOS: Ubuntu 18.04",
    "priority": 1
  },
  "703": {
    "body": "Hi, the following formula throws an assertion violation with z3. \r\n\r\n```\r\n(declare-fun a (Int) Int)\r\n(declare-fun b () Int)\r\n(assert (= (ite (= b (a 0)) b (+ 2 b)) (ite (= b (a 0)) b (- 1 b))))\r\n(check-sat)\r\n```\r\n\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_lra.cpp\r\nLine: 3394\r\n\"integer variables should have integer values: \" && (!a.is_int(o) || r.is_int() || m.canceled())\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision:41a4dcf",
    "priority": 1
  },
  "704": {
    "body": "Z3 segfaults on the following formula \r\n```\r\n(declare-datatypes ((a 0) (b 0)))\r\n(declare-datatypes ((c 0)) (((d (e a) (f b)))))\r\n```\r\n\r\n```\r\n(error \"line 1 column 33: invalid datatype declaration, '(' expected got b\")\r\n[1]    99340 segmentation fault  z3/build-2020-01-29-9694dc0/z3 bug.smt2\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: 9694dc0",
    "priority": 1
  },
  "705": {
    "body": "The following formulas causes an assertion violation in z3\r\n```\r\n(declare-fun a () Real)\r\n(assert (< (/ 1 0 a) 1))\r\n(assert (forall ((b Real)) (= (/ (/ 0 (- b)) 0) 0)))\r\n(assert (forall ((c Real))\r\n         (forall ((d Real))\r\n          (forall ((e Real))\r\n           (>= (* e c) 2 (* d (/ 1 c) (/ 0 c)))))))\r\n(check-sat)\r\n\r\n```\r\n\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_enode.h\r\nLine: 217\r\nidx < get_num_args()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nOS: Ubuntu 19.04\r\nRevision: 9694dc0",
    "priority": 1
  },
  "706": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Int)\r\n(declare-fun b () Real)\r\n(assert (= b (/ 0 a)))\r\n(assert (> b 0))\r\n(check-sat)\r\n(get-model)\r\n```\r\nz3 gives an incorrect model :\r\n```\r\n(model \r\n  (define-fun a () Int\r\n    0)\r\n  (define-fun b () Real\r\n    0.0)\r\n)\r\n```\r\nin which b = 0 cannot satisfy b > 0.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 5497022",
    "priority": 1
  },
  "707": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun x () Real)\r\n(assert (= (^ (- 1.0 x) (- 1.0)) (* 2.0 (^ x (- 1.0)))))\r\n(check-sat)\r\n(get-model)\r\n```\r\nz3 gives an incorrect model \r\n```\r\n(model \r\n  (define-fun x () Real\r\n    0.0)\r\n  (define-fun /0 ((x!0 Real) (x!1 Real)) Real\r\n    (ite (and (= x!0 1.0) (= x!1 0.0)) (/ 1.0 2.0)\r\n      0.0))\r\n)\r\n```\r\nIf I feed this model to the formula, z3 reports unsat.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 5497022\r\n",
    "priority": 1
  },
  "708": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(assert (> 0 (/ 0 0)))\r\n(check-sat)\r\n```\r\n`z3 model_validate=true` reports an error:\r\n```\r\n(error \"line 2 column 10: an invalid model was generated\")\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 5497022",
    "priority": 0
  },
  "709": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun b (Int Int Int) Int)\r\n(declare-fun c () Int)\r\n(declare-fun d (Int) Bool)\r\n(declare-fun e (Int Int Int) Int)\r\n(declare-fun f (Int Int Int) Bool)\r\n(assert (let ((a!1 (- (* 3 (b (b c c c) c c)) (b c c c)))\r\n      (a!3 (- (* 3 (b (b c c c) c c)) (e 0 0 0)))\r\n      (a!4 (- (* 3 (b (b c c c) c c))))\r\n      (a!6 (f 0 0 (e (e 0 0 0) 0 0)))\r\n      (a!8 (* 4 (- (* (- 3) (b c c c))))))\r\n(let ((a!2 (ite (distinct 0 (* a!1)) (* 3 (b (b c c c) c c)) (* 4 3)))\r\n      (a!5 (< a!3 (ite (d (- a!4)) 1 0)))\r\n      (a!7 (ite a!6 a!4 (- (b (b c c c) c c))))\r\n      (a!9 (ite (= a!3 0) a!8 (ite (d (- a!4)) 1 0))))\r\n(let ((a!10 (f a!2\r\n               0\r\n               (ite (<= 0 c) (ite a!5 0 a!7) (ite (< 0 0) 0 (ite a!6 a!9 a!4)))))\r\n      (a!11 (ite (= (* (- 3) (b c c c)) (ite (d a!8) 1 0)) (- c) a!2)))\r\n(let ((a!12 (> a!9 (ite (> 0 (- a!4)) (b (b c c c) c c) a!11))))\r\n  (= a!10 a!12))))))\r\n(check-sat)\r\n(get-model)\r\n```\r\nz3 correctly reports sat, but gives an incorrect model:\r\n```\r\n(model \r\n  (define-fun c () Int\r\n    0)\r\n  (define-fun b ((x!0 Int) (x!1 Int) (x!2 Int)) Int\r\n    0)\r\n  (define-fun d ((x!0 Int)) Bool\r\n    (ite (= x!0 0) false\r\n      true))\r\n  (define-fun e ((x!0 Int) (x!1 Int) (x!2 Int)) Int\r\n    (ite (and (= x!0 8369) (= x!1 0) (= x!2 0)) 0\r\n      8369))\r\n  (define-fun f ((x!0 Int) (x!1 Int) (x!2 Int)) Bool\r\n    true)\r\n)\r\n```\r\nIf I feed this model to the formula, z3 gives unsat.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: f2015b3",
    "priority": 1
  },
  "710": {
    "body": "HI,\r\nFor this formula,\r\n```\r\n(declare-fun x () Int)\r\n(declare-fun y () Int)\r\n(assert (= x 0))\r\n(assert (distinct (div (* x y) y) x))\r\n(check-sat)\r\n```\r\nz3 nightly build gives unknown while z3-4.8.7 gives sat:\r\n```\r\n[611] % z3 simple.smt2 \r\nunknown\r\n[612] % z3-4.8.7 simple.smt2 \r\nsat\r\n[613] % cvc4 --quiet simple.smt2 \r\nsat\r\n[614] % cat simple.smt2 \r\n(declare-fun x () Int)\r\n(declare-fun y () Int)\r\n(assert (= x 0))\r\n(assert (distinct (div (* x y) y) x))\r\n(check-sat)\r\n```\r\nIf x is replaced by 0, then z3 is able to report sat:\r\n```\r\n[618] % z3 simple2.smt2 \r\nsat\r\n[619] % cat simple2.smt2 \r\n(declare-fun x () Int)\r\n(declare-fun y () Int)\r\n; (assert (= x 0))\r\n(assert (distinct (div (* 0 y) y) 0))\r\n(check-sat)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 55f62fc",
    "priority": 1
  },
  "711": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun f () Real)\r\n(declare-fun g () Real)\r\n(declare-fun h () Real)\r\n(declare-fun vuscore2dollarskuscore () Real)\r\n(assert\r\n (exists ((e Real))\r\n  (and\r\n   (or\r\n    (> (/ 0 (- (+ (* g h) (* b d) (/ 6 b d)) (* (- 39 b d) vuscore2dollarskuscore))) f)\r\n    (< vuscore2dollarskuscore (/ 0 a c)))\r\n   (<= (/ 2 a c) h))))\r\n(check-sat)\r\n```\r\nZ3 will be hundres of times faster if I change `vuscore2dollarskuscore` to `i`:\r\n```\r\n[760] % time z3 small.smt2\r\nsat\r\nreal    1m47.390s\r\nuser    1m47.214s\r\nsys     0m0.012s\r\n[761] % time z3 small2.smt2 \r\nsat\r\nreal    0m0.114s\r\nuser    0m0.107s\r\nsys     0m0.004s\r\n[762] % \r\n[762] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun f () Real)\r\n(declare-fun g () Real)\r\n(declare-fun h () Real)\r\n(declare-fun vuscore2dollarskuscore () Real)\r\n(assert\r\n (exists ((e Real))\r\n  (and\r\n   (or\r\n    (> (/ 0 (- (+ (* g h) (* b d) (/ 6 b d)) (* (- 39 b d) vuscore2dollarskuscore))) f)\r\n    (< vuscore2dollarskuscore (/ 0 a c)))\r\n   (<= (/ 2 a c) h))))\r\n(check-sat)\r\n[763] % \r\n[763] % cat small2.smt2 \r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun f () Real)\r\n(declare-fun g () Real)\r\n(declare-fun h () Real)\r\n(declare-fun i () Real)\r\n(assert\r\n (exists ((e Real))\r\n  (and\r\n   (or\r\n    (> (/ 0 (- (+ (* g h) (* b d) (/ 6 b d)) (* (- 39 b d) i))) f)\r\n    (< i (/ 0 a c)))\r\n   (<= (/ 2 a c) h))))\r\n(check-sat)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 22f1c64",
    "priority": 0
  },
  "712": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun ag () Real)\r\n(declare-fun u () Real)\r\n(declare-fun e () Real)\r\n(declare-fun ah () Real)\r\n(declare-fun f () Real)\r\n(declare-fun YUNCA_new () Real)\r\n(declare-fun EMrJi_new () Real)\r\n(declare-fun ae () Real)\r\n(declare-fun g () Real)\r\n(declare-fun YSjFW_new () Real)\r\n(declare-fun h () Real)\r\n(declare-fun SuTDY_new () Real)\r\n(declare-fun i () Real)\r\n(declare-fun v1 () Real)\r\n(declare-fun j () Real)\r\n(declare-fun k () Real)\r\n(declare-fun B () Real)\r\n(declare-fun v2 () Real)\r\n(declare-fun l () Real)\r\n(declare-fun m () Real)\r\n(declare-fun n () Real)\r\n(declare-fun x1 () Real)\r\n(declare-fun xI1 () Real)\r\n(declare-fun o () Real)\r\n(declare-fun ai () Real)\r\n(declare-fun I1uscore4dollarskuscore353 () Real)\r\n(declare-fun ab () Real)\r\n(declare-fun p () Real)\r\n(declare-fun v1uscore4dollarskuscore353 () Real)\r\n(declare-fun q () Real)\r\n(declare-fun r () Real)\r\n(declare-fun s () Real)\r\n(declare-fun af () Real)\r\n(declare-fun ac () Real)\r\n(declare-fun t () Real)\r\n(declare-fun aa () Real)\r\n(declare-fun v () Real)\r\n(declare-fun w () Real)\r\n(declare-fun x () Real)\r\n(declare-fun y () Real)\r\n(declare-fun ad () Real)\r\n(assert\r\n (and\r\n  (forall ((p Real))\r\n   (and\r\n    (and\r\n     (or\r\n      (and\r\n       (or (distinct j 0.0) (< (+ 31 (/ (* v1 v1) (/ 2.0 B))) (- 7 YUNCA_new af)))\r\n       (distinct (/ 7 e (- g)) 2.0)\r\n       (>= (- (*  (*  SuTDY_new p) (/ v2 v2 2.0))) (/ 144 EMrJi_new (/ YSjFW_new I1uscore4dollarskuscore353)))\r\n       (< 0.0 v1)\r\n       (<= v1 (* ae (/ 142 YSjFW_new I1uscore4dollarskuscore353)))\r\n       (>= 0.0 v2))\r\n      (> v2 ae))\r\n     (> 0.0 k)\r\n     (> 0.0 (- ae (/ 112 YSjFW_new I1uscore4dollarskuscore353))))\r\n    (or\r\n     (= (/ 209 EMrJi_new (- 5 YSjFW_new I1uscore4dollarskuscore353)) (+ u ac))\r\n     (<= 0.0 (+ a (/ 71 c k)))\r\n     (and (or (<= (/ 190 (* (* 110 (* 241 1.0)) p) v1uscore4dollarskuscore353) 0) (> ai 0)) false))))\r\n  (exists ((z Real))\r\n   (or\r\n   (and\r\n    (or\r\n     (and\r\n      (or\r\n       (and\r\n        (or\r\n         (> r d)\r\n         (< 0.0 (/ (- (- 9 YUNCA_new xI1) r) (* ag v2)))\r\n         (<= (/ (* (* 202 xI1) r) (+ 94 ag v2)) x)\r\n         (>= 0.0 (/ 1 d B))\r\n         (distinct (+ SuTDY_new p) c))\r\n        (= v 1.0))\r\n       (<=\r\n        (- (/\r\n            (+ 210 (/ 233 (+ 22 YUNCA_new) (- i v1uscore4dollarskuscore353)))\r\n            (* 39 (+ 180 YUNCA_new xI1 (- 1 2)) (- (/ 244 f x1) (* 10 f x1)) (+ 252 f x1 ag v2))))\r\n        (+  SuTDY_new p)))\r\n      (<= 0.0 (* ag v2)))\r\n     (> (/ 213 ag v2) x)\r\n     (> ad (/ 120 SuTDY_new p))\r\n     (< 0.0 (- i v1uscore4dollarskuscore353)))\r\n    (> w x)\r\n    (> 0.0 (* YUNCA_new xI1))\r\n    (>= 0.0 (* f x1)))\r\n    (= v 2.0)\r\n    (> 0.0 (- (/ 105 YUNCA_new xI1) (* 60 d)))))))\r\n(assert (distinct a (-  aa af)))\r\n(assert (distinct b (-  j ac)))\r\n(assert (= c (* k aa)))\r\n(assert (distinct d (/ B s)))\r\n(assert (distinct ag (* v2 aa)))\r\n(assert (distinct u (+ l ac m y aa)))\r\n(assert (distinct ah (* n q)))\r\n(assert (distinct f (/ x1 y)))\r\n(assert (= YUNCA_new (/ xI1 af)))\r\n(assert (= EMrJi_new (+ 2 o)))\r\n(assert (distinct g (/ 6 ai aa)))\r\n(assert (= h (/ ab y)))\r\n(assert (distinct SuTDY_new (+ p q)))\r\n(assert (= i (- t)))\r\n(check-sat)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/nlsat/nlsat_interval_set.cpp\r\nLine: 84\r\ns <= 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 22f1c64",
    "priority": 0
  },
  "713": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-datatypes ((A 0)))\r\n(declare-datatypes ((B 0)) (((f (g A)))))\r\n```\r\nZ3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/util/map.h\r\nLine: 157\r\ne\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 93d1091",
    "priority": 1
  },
  "714": {
    "body": "Consider the following formula\r\n```\r\n(declare-fun x () Real)\r\n(declare-fun y () Real)\r\n(assert (= x 0.0))\r\n(assert (= y (^ x 0.0)))\r\n(assert (= y 1.0))\r\n(check-sat)\r\n(get-model)\r\n```\r\nZ3 reports a correct model here but model validation fails:\r\n\r\n```\r\n(= 1.0 (^ 0.0 0.0)) -> false\r\nsat\r\n(error \"line 11 column 10: an invalid model was generated\")\r\n(model \r\n  (define-fun y () Real\r\n    1.0)\r\n  (define-fun x () Real\r\n    0.0)\r\n) \r\n```\r\nThe original formula has is very similar to the one in Issue #707.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 1d77e3e ",
    "priority": 1
  },
  "715": {
    "body": "Hi,\r\n\r\nconsider the following formula.\r\n```\r\n(declare-sort a 0) \r\n(define-sort b (c d) d)   \r\n(define-fun e ((c Real) (f Real)) Bool (= c f)) \r\n(define-fun foo ((c  Real) (f (b a Real)))   Bool (e c f)) \r\n(assert (distinct false (distinct false (foo 0 0) )))\r\n```\r\nz3 throws an assertion violation on it.\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/ast/rewriter/rewriter_def.h\r\nLine: 50\r\nv->get_sort() == m().get_sort(r)\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: 78feac4",
    "priority": 1
  },
  "716": {
    "body": "Hi,\r\n\r\nconsider the following formula\r\n\r\n```\r\n(declare-fun a (Int) Int) \r\n(assert  (exists ((b Int) (c Int)) \r\n    (! (= (= 0 c) (distinct false  (= b c))) :pattern ((a b) c))))  \r\n```\r\n\r\nRunning z3 on this formula throws the following assertion violation. \r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/ast/ast.cpp\r\nLine: 2452\r\nis_app(exprs[i])\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 78feac4",
    "priority": 1
  },
  "717": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Int)\r\n(declare-fun b () Int)\r\n(declare-fun c () Int)\r\n(declare-fun d () Int)\r\n(declare-fun e () Int)\r\n(declare-fun f () Int)\r\n(assert (= (* 100 a e) (+ b f)))\r\n(assert (<= (/ 1 c (/ 3 d)) (/ e b)))\r\n(assert (= (- c) (* 49 (+ 92 d))))\r\n(assert (< (- 196 c d f) 3))\r\n(assert (>= (+ b e) 0))\r\n(check-sat)\r\n```\r\nZ3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_context.h\r\nLine: 959\r\nl != false_literal\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 6ad55cc",
    "priority": 1
  },
  "718": {
    "body": "Hi,\r\non the following unsatisfiable formula z3str3 incorrectly reports \"sat\" \r\n\r\n```\r\n(declare-fun i () Int)\r\n(assert (< i 1))\r\n(assert (= (int.to.str i) \"00\"))\r\n(check-sat)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: ba03d99",
    "priority": 1
  },
  "719": {
    "body": "Hi,\r\n\r\nconsider the following formula.\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(assert (forall ((c Real)) (or (<= 0 c) (> b a))))\r\n(assert (= b (/ b a)))\r\n(check-sat)\r\n(get-model)\r\n```\r\nZ3 with `model_validate=true`  returns a correct model but reports that that model is invalid.\r\n```\r\nsat\r\n(error \"line 5 column 10: an invalid model was generated\")\r\n(model \r\n  (define-fun a () Real\r\n    0.0)\r\n  (define-fun b () Real\r\n    (/ 1.0 8.0))\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: 49b6d5b",
    "priority": 1
  },
  "720": {
    "body": "Hi, \r\n\r\nfor the following formula Z3 gives an assertion violation.\r\n\r\n```\r\n(assert\r\n (exists ((?g Real))\r\n  (forall ((?a Real))\r\n   (forall ((?c Real))\r\n    (forall ((?d Real))\r\n     (forall ((?b Real))\r\n      (or\r\n       (not (= (* ?a ?b) 0))\r\n       (<= (+ (/ (+ 94 ?b (* 20 ?d)) (* 41 ?c)) (* 3 ?g)) 0))))))))\r\n(check-sat)\r\n```\r\n\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_enode.h\r\nLine: 217\r\nidx < get_num_args()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: ec39d84",
    "priority": 1
  },
  "721": {
    "body": "Hi, on the following formula Z3 leaks memory.\r\n\r\n```\r\n(declare-fun skoY () Real)  \r\n(declare-fun skoX () Real)  \r\n(declare-fun pi () Real)  \r\n(assert (= true (= (- (+ skoY (+ (+ 900000000000000000000000 (* skoX (- 900000000)))  \r\n(- (* skoY (* skoY (* skoY (* skoY (* skoY (- skoY (+ skoY  \r\n(* skoY (* skoY (* skoX (* skoX (/ (- 15625) 4158))))))))))))))))  \r\n(+ 1800060000000000000000000 (* skoX (* skoX 1800060000))))  \r\n(and (<= 100 skoX) (and (not (<= 0 pi)) (not (<= pi 0))))))  \r\n(check-sat)\r\n```\r\nThe original formula came from the SMTLIB benchmark suite and already contained these huge numbers.\r\n```\r\nunsat\r\nast_manager LEAKED: 6\r\nLeaked: bv[4:4]\r\nid: 475\r\nLeaked: bv[2:3]\r\nid: 464\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: ebb7d60",
    "priority": 1
  },
  "722": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-datatypes ((a 0)))\r\n(declare-fun b (a a) Bool)\r\n(assert (exists ((c a) (d a)) (b c d)))\r\n(check-sat)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/util/map.h\r\nLine: 157\r\ne\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: ebb7d60",
    "priority": 1
  },
  "723": {
    "body": "Hi, \r\nFor this formula,\r\n```\r\n(declare-fun a () Int)\r\n(declare-fun b () Int)\r\n(declare-fun c () Bool)\r\n(assert\r\n (let ((d (+ a a)) (f (+ b 1)))\r\n  (let ((e (< (- (* d (ite (>= f 0) f 0))) 0)))\r\n   (let ((h (- (+ (ite e 1 0) 1))))\r\n    (let ((g (- (ite e 2 5) (ite (>= h 0) h (+ h 2)))))\r\n     (distinct 0 (+ (ite (ite (= g 0) c false) 2 0) 0)))))))\r\n(check-sat)\r\n```\r\nZ3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/ast/rewriter/pb2bv_rewriter.cpp\r\nLine: 648\r\n!k.is_neg()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: db02328",
    "priority": 1
  },
  "724": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(set-logic UF)\r\n(declare-sort S 1)\r\n(declare-datatypes ((b 0) (c 0)) (((d (g S))) ((h))))\r\n(declare-fun e (b b) Bool)\r\n(assert (forall ((f b) (i b)) (e f i)))\r\n(check-sat)\r\n```\r\nz3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/util/map.h\r\nLine: 151\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 0f566dd\r\n",
    "priority": 1
  },
  "725": {
    "body": "Hi, \r\non the following formula z3 throws an assertion violation\r\n```\r\n(declare-datatypes () ((Lst nil (cons (hd Int) (tl Lst)))))\r\n(declare-const l Lst)\r\n(assert (exists ((x Int)) (= l (cons x nil))))\r\n(apply qe2)\r\n```\r\n\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/qe/qsat.cpp\r\nLine: 884\r\nvalidate_assumptions(mdl, core)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: 8850000",
    "priority": 1
  },
  "726": {
    "body": "Hi, \r\non the following formula, Z3 throws an assertion violation \r\n\r\n```\r\n(declare-fun a () Int)\r\n(declare-fun f (Int) Int)\r\n(assert (forall ((x Int)) (= (f (+ x a)) 0)))\r\n(assert (= (f a) 1))\r\n(check-sat)\r\n```\r\n\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_arith_inv.h\r\nLine: 97\r\n!it->m_coeff.is_zero()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 8850000",
    "priority": 1
  },
  "727": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(push 1)\r\n(assert (= b 0))\r\n(check-sat)\r\n(assert (< (+ b 1) 0))\r\n(push 1)\r\n(assert (= (+ a b b) 0))\r\n(push 1)\r\n```\r\nZ3 smt.arith.solver=1 throws out an assertion violation:\r\n```\r\n(smt.diff_logic: non-diff logic expression (+ (* 2.0 b) a))\r\nASSERTION VIOLATION\r\nFile: ../src/smt/diff_logic.h\r\nLine: 522\r\n!r || is_feasible()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 2f6a9ba",
    "priority": 1
  },
  "728": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Int)\r\n(declare-fun b () Int)\r\n(declare-fun c () Int)\r\n(declare-fun d (Int) Bool)\r\n(declare-fun e (Int) Bool)\r\n(assert\r\n (not\r\n  (=\r\n   (ite (= 0 (ite (d 0) 0 1)) (ite (e c) 0 a) 0)\r\n   (ite (= 0 b) 0 (ite (d 0) (ite (e 0) 0 (ite (e 0) 0 (ite (e c) 0 a))) 0)))))\r\n(check-sat)\r\n(get-model)\r\n```\r\nz3 gives an incorrect model:\r\n```\r\n(model \r\n  (define-fun c () Int\r\n    0)\r\n  (define-fun a () Int\r\n    (- 1))\r\n  (define-fun b () Int\r\n    1)\r\n  (define-fun d ((x!0 Int)) Bool\r\n    true)\r\n  (define-fun e ((x!0 Int)) Bool\r\n    false)\r\n)\r\n```\r\nIf I feed this model to the formula, z3 will report unsat\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 2f6a9ba",
    "priority": 1
  },
  "729": {
    "body": "Z3 with `smt.arith.solver=1` option throws an assertion violation on this formula.\r\n```\r\n(assert (forall ((a Int)) (< a 1)))\r\n(check-sat)\r\n```\r\n\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/qe/qsat.cpp\r\nLine: 631\r\nvalidate_defs(\"check_sat\")\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: 28cb13f",
    "priority": 1
  },
  "730": {
    "body": "Hi, \r\n\r\nThe following formula throws an assertion violation when using z3 with `smt.arith.solver=1` option.\r\n\r\n```\r\n(declare-fun a () Int)\r\n(declare-fun b () Int)\r\n(assert (<= 0 a))\r\n(declare-fun c (Int) Bool)\r\n(declare-fun ab (Int) Int)\r\n(declare-fun j (Int) Bool)\r\n(declare-fun ac (Int) Int)\r\n(push)\r\n(assert (= (= 0 1) (j 0)))\r\n(assert (= (ac 0) (ite (= b 0) (ab 0) 0)))\r\n(assert (not (j 0)))\r\n(assert (let ((az (not (c 0)))) (and az az)))\r\n(check-sat)\r\n```\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/util/old_vector.h\r\nLine: 370\r\nidx < size()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: 28cb13f",
    "priority": 1
  },
  "731": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Int)\r\n(declare-fun b (Int) Bool)\r\n(assert (b (/ 0 a)))\r\n(check-sat)\r\n```\r\nz3 smt.arith.solver=1 throws out a segmentation fault.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 7b0327d\r\n",
    "priority": 1
  },
  "732": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a (Int) Bool)\r\n(declare-fun b () Int)\r\n(assert (forall ((c Int)) (= (= b 0) (a c))))\r\n(push)\r\n(check-sat)\r\n```\r\nZ3 smt.arith.solver=1 throws out:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_setup.cpp\r\nLine: 53\r\n!m_context.already_internalized()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 7b0327d",
    "priority": 1
  },
  "733": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () Int)\r\n(declare-fun b () Int)\r\n(declare-fun c () (Set Int))\r\n(assert (= (card c) (- a b)))\r\n(assert (>= a b))\r\n(check-sat)\r\n```\r\n`Z3 smt.arith.solver=1` throws out:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_theory.h\r\nLine: 64\r\n!is_attached_to_var(n)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n`Z3 smt.arith.solver=3` throws out:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_internalizer.cpp\r\nLine: 853\r\n!b_internalized(n)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: 7b0327d",
    "priority": 1
  },
  "734": {
    "body": "Hi, \r\nFor this formula,\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b (Real) Real)\r\n(assert (distinct (b a) (/ 0 a)))\r\n(check-sat)\r\n```\r\n`Z3 smt.arith.solver=1` throws out an assertion violation:\r\n```\r\n(smt.diff_logic: non-diff logic expression (/ 0.0 a))\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_internalizer.cpp\r\nLine: 771\r\ne_internalized(n)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 7b0327d",
    "priority": 1
  },
  "735": {
    "body": "Hi, \r\nFor this formula,\r\n```\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(declare-fun c () String)\r\n(assert (distinct (str.++ a b) (str.++ b a) c))\r\n(assert (distinct a c))\r\n(check-sat)\r\n```\r\n`Z3 smt.arith.solver=1` throws out an assertion violation:\r\n```\r\n(smt.diff_logic: non-diff logic expression (let ((a!1 (* (- 1) (+ 1 (str.len (seq.tail c 0))))))\r\n  (+ (str.len c) a!1)))\r\n(smt.diff_logic: non-diff logic expression (let ((a!1 (* (- 1) (+ 1 (str.len (seq.tail a 0))))))\r\n  (+ (str.len a) a!1)))\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_context.cpp\r\nLine: 976\r\nparent->is_cgr()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 7b0327d",
    "priority": 1
  },
  "736": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(set-logic ALL)\r\n(declare-fun a () String)\r\n(declare-fun b () Int)\r\n(assert\r\n (=\r\n  (str.replace \"\" (int.to.str b) a)\r\n  (str.++\r\n   (str.replace (str.substr a b 1) (str.substr a b 7) \"\")\r\n   (str.substr a (+ b 1) (str.len a)))))\r\n(check-sat)\r\n```\r\nZ3 smt.arith.solver=3 throws out an assertion violation:\r\n```\r\n(smt.diff_logic: non-diff logic expression (+ (- 1) (str.len a) (* (- 1) b)))\r\nASSERTION VIOLATION\r\nFile: ../src/util/old_vector.h\r\nLine: 370\r\nidx < size()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nIf we change `7` to `1`:\r\n```\r\n(set-logic ALL)\r\n(declare-fun a () String)\r\n(declare-fun b () Int)\r\n(assert\r\n (=\r\n  (str.replace \"\" (int.to.str b) a)\r\n  (str.++\r\n   (str.replace (str.substr a b 1) (str.substr a b 1) \"\")\r\n   (str.substr a (+ b 1) (str.len a)))))\r\n(check-sat)\r\n```\r\nZ3 smt.arith.solver=3 throws out a segmentation fault.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 17d67c1",
    "priority": 1
  },
  "737": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(set-logic QF_S)\r\n(declare-fun s () String)\r\n(assert (= (str.at s 2) \"\"))\r\n(push 1)\r\n(check-sat)\r\n```\r\nZ3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/util/old_vector.h\r\nLine: 375\r\nidx < size()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 23fcc21",
    "priority": 1
  },
  "738": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a (Int) Int)\r\n(declare-fun b (Int) Int)\r\n(declare-fun c (Int) Int)\r\n(declare-fun d () Int)\r\n(declare-fun h () Int)\r\n(declare-fun e () Int)\r\n(declare-fun f () Int)\r\n(declare-fun i () Int)\r\n(assert\r\n (let ((g d)\r\n       (j h)\r\n       (bb i)\r\n       (bi d)\r\n       (bj 0)\r\n       (cm (b h))\r\n       (dw h)\r\n       (dz (c f))\r\n       (eb (+ d i))\r\n       (ec (+ d h)))\r\n  (and\r\n   (or (and (distinct dz bb e) (= bi bj) (= cm f i)) (= dw f))\r\n   (distinct d e)\r\n   (distinct h e i)\r\n   (< d 7)\r\n   (< h 7)\r\n   (< (c (ite (< eb 7) eb d)) (c (ite (< ec 7) ec d))))))\r\n(check-sat)\r\n(get-model)\r\n```\r\nZ3 gives an incorrect model:\r\n```\r\n(define-fun i () Int\r\n    6)\r\n  (define-fun h () Int\r\n    1)\r\n  (define-fun f () Int\r\n    1)\r\n  (define-fun e () Int\r\n    3)\r\n  (define-fun d () Int\r\n    1)\r\n  (define-fun c ((x!0 Int)) Int\r\n    (ite (= x!0 2) 0\r\n      6))\r\n  (define-fun b ((x!0 Int)) Int\r\n    4)\r\n  (define-fun a ((x!0 Int)) Int\r\n    0)\r\n```\r\nIf I feed this model to the formula, z3 will report `unsat`\r\n\r\nOS: Ubuntu 18.04\r\nRevision: b371592",
    "priority": 1
  },
  "739": {
    "body": "Hi,\r\n\r\non the following formula z3 gives an incorrect model.\r\n\r\n```\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(declare-fun c () String)\r\n(declare-fun d () String)\r\n(assert\r\n (or\r\n  (distinct\r\n   (str.suffixof \"B\" (str.replace \"A\" b \"B\"))\r\n   (distinct (str.substr a 1 (str.len b )) \"A\")\r\n   )\r\n  (distinct\r\n   (= c \"A\")\r\n   (str.suffixof \"A\" (str.replace \"A\" c \"B\"))\r\n   )\r\n  )\r\n )\r\n(assert (distinct a (str.++ (str.++ b \"\") d)))\r\n(check-sat)\r\n(get-model)\r\n```\r\nThe reported model: \r\n```\r\n(model \r\n  (define-fun b () String\r\n    \"\")\r\n  (define-fun a () String\r\n    \"\")\r\n  (define-fun c () String\r\n    \"A\")\r\n  (define-fun d () String\r\n    \"\")\r\n)\r\n```\r\nClearly the model doesn't satisfy the last `assert`.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: cdf3c48",
    "priority": 1
  },
  "740": {
    "body": "Hi, \r\n\r\non the following formula, z3 throws an assertion violation:\r\n\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(assert (< 0 b a c))\r\n(minimize a)\r\n(minimize b)\r\n(minimize c)\r\n```\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/opt/opt_context.cpp\r\nLine: 1667\r\nr1 == r2\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: cdf3c48 \r\n",
    "priority": 0
  },
  "741": {
    "body": "Hi, \r\n\r\nconsider the following formula.\r\n\r\n```\r\n(declare-fun x () String)\r\n(declare-fun y () String)\r\n(assert (distinct (str.++ x y) (str.++ y x)))\r\n(assert (= (str.len x) 17))\r\n(check-sat)\r\n(get-model)\r\n```\r\n\r\nZ3 gives the following incorrect model:\r\n\r\n```\r\n(model \r\n  (define-fun y () String\r\n    \"\\x00\")\r\n  (define-fun x () String\r\n    \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\")\r\n)\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: a257ec0",
    "priority": 1
  },
  "742": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Real)\r\n(assert (and (forall ((b Real)) (= (/ (/ 0 (- b)) 0) 0)) (< (/ 1 0 a) 1)))\r\n(assert\r\n (forall ((c Real))\r\n  (forall ((d Real))\r\n   (forall ((e Real))\r\n    (forall ((f Real))\r\n     (and (= (* e f) 0) (= (* d (/ 0 c) (/ 0 e)) 0)))))))\r\n(check-sat)\r\n```\r\nz3str3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_enode.h\r\nLine: 217\r\nidx < get_num_args()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: a257ec0\r\n",
    "priority": 1
  },
  "743": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun s () String)\r\n(declare-fun x () Int)\r\n(assert (>= x 66))\r\n(assert (>= (str.indexof s \"goodbye\" x) 155))\r\n(check-sat)\r\n```\r\nz3 hangs on it while z3str3 throws out an segmentation fault:\r\n```\r\n[528] % timeout -s 9 60 z3 small.smt2\r\nKilled\r\n[529] % z3 smt.string_solver=z3str3 small.smt2\r\nSegmentation fault\r\n```\r\n\r\nOS: Ubuntu 18.04:\r\nRevision: 07dcb0a",
    "priority": 1
  },
  "744": {
    "body": "On the following formula Z3 throws an assertion violation\r\n\r\n```\r\n(set-logic QF_NIA)\r\n(declare-fun x () Int)\r\n(assert (not (= (div 1 x) (div (div 1 x) x))))\r\n(assert (>= x 0))\r\n(assert (<= x 7))\r\n(check-sat)\r\n```\r\n\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/util/parray.h\r\nLine: 587\r\nc->m_size == r_sz\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: ba03d99",
    "priority": 1
  },
  "745": {
    "body": "Hi, \r\n\r\nthe following formula triggers a crash bug in Z3 and `smt.string_solver=z3str3`. \r\n\r\n```\r\n(declare-fun x () String)\r\n(declare-fun z () Int)\r\n(assert\r\n (or\r\n  (not\r\n   (=\r\n    (str.replace \"A\" (int.to.str z) x)\r\n    (str.++ \"A\" (str.replace \"\" (int.to.str z) x))))\r\n  (or\r\n   (=\r\n    (str.replace x (str.at x z) \"\")\r\n    (str.++\r\n     (str.replace\r\n      (str.++ (str.substr x 48 z) (str.substr x z 33))\r\n      (str.substr x z 99)\r\n      \"\")\r\n     (str.substr x (+ 19 z) (str.len x)))))))\r\n(check-sat)\r\n```\r\n```\r\nNOT IMPLEMENTED YET!\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_str.cpp\r\nLine: 8935\r\nUNREACHABLE CODE WAS REACHED.\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: 05ad90c976be01b8dbd1e5025c819f405a3b49f5",
    "priority": 1
  },
  "746": {
    "body": "Hi, \r\nFor the following logic Z3 with `--smt.string_solver=z3str3` gives an assertion violation\r\n\r\n```\r\n(set-logic QF_S)\r\n(declare-fun a () String)\r\n(assert (= (str.indexof (str.++ \"x\" a) \"y\" 0) (str.indexof (str.++ a \"x\") \"y\" 2)))\r\n(check-sat)\r\n```\r\n\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/util/rational.h\r\nLine: 113\r\nis_unsigned()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: d95b549ff84b799e298f2f7db232499340460f05",
    "priority": 1
  },
  "747": {
    "body": "Hi,\r\n\r\nz3 with z3str3 crashes on the following formula using smt.string_solver=z3str3\r\n\r\n```\r\n(declare-fun b () Bool)\r\n(declare-fun c () Bool)\r\n(declare-fun d () Bool)\r\n(declare-fun j () Bool)\r\n(declare-fun g () Bool)\r\n(declare-fun h () Bool)\r\n(declare-fun a () String)\r\n(declare-fun e () String)\r\n(declare-fun f () String)\r\n(declare-fun i () String)\r\n(declare-fun k () String)\r\n(assert (= (= \"-\" (str.substr e 1 (str.len i))) b))\r\n(assert (not (= b c)))\r\n(assert (= j (= \"-\" i)))\r\n(assert (= (= \"\" (str.substr e 1 (str.len i))) (not (= d g)) d g))\r\n(assert (= (= \"\" (str.substr a (str.len f) (str.len k))) c))\r\n(assert (= a (str.++ f k)))\r\n(assert (= b (= b h)))\r\n(assert (= j c h))\r\n(assert (= e (str.++ i k)))\r\n(check-sat)\r\n```\r\n\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_context.cpp\r\nLine: 3544\r\n!inconsistent()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nOS: Ubuntu 18.04\r\nRevision: dd827ca ",
    "priority": 1
  },
  "748": {
    "body": "Hi,\r\n\r\nI found out that the following (probably invalid formula) is accepted by z3 compiled with assertions.\r\n\r\n```\r\n (assert (a  0  (let ())\r\n\r\n```\r\n\r\nz3 throws the following assertion violation\r\n\r\n```ASSERTION VIOLATION\r\nFile: ../src/util/ref_vector.h\r\nLine: 91\r\nsz <= m_nodes.size()\r\n\r\n```\r\n\r\nI'm curious, where do you typically put assertions and when you put them do you expect \r\nunintended behaviour at that very place?\r\n\r\nOS: Ubuntu 18.04 \r\nRevision: dee8a9f308f06b78a89ca829a5f4a6ca928e18a6",
    "priority": 1
  },
  "749": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun string () String)\r\n(assert\r\n (and\r\n  (and\r\n   (and (or (and (distinct (ite (> (str.indexof string \";\" 239) 57) 207 202) 202))))\r\n   (and (distinct (ite (or (distinct (str.len string) 244)) 57 193) 182)))\r\n  (or (or (distinct (ite (str.contains string \"\") 218 68) 87)))))\r\n(check-sat)\r\n```\r\nZ3str3 thorws out a segmentation fault while solving this formula.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 5f78ca9",
    "priority": 1
  },
  "750": {
    "body": "Hi, \r\nFor this formula,\r\n```\r\n(declare-fun a () String)\r\n(assert (and and (>= (- (str.indexof a \"x\" 2) 3) 0) (>= (str.indexof a \"y\" 0) 0)))\r\n(check-sat)\r\n```\r\nz3str3 throw out an segmentation fault on it, while z3 reports `unsat`:\r\n```\r\n[674] % z3 small.smt2\r\nsat\r\n[675] % z3 smt.string_solver=z3str3 small.smt2\r\nSegmentation fault\r\n[676] % cat small.smt2\r\n(declare-fun a () String)\r\n(assert (and and (>= (- (str.indexof a \"x\" 2) 3) 0) (>= (str.indexof a \"y\" 0) 0)))\r\n(check-sat)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: a0dcad0\r\n\r\nOS:",
    "priority": 1
  },
  "751": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () String)\r\n(assert (= (str.len a) 20000))\r\n(check-sat)\r\n```\r\nz3 will throw out a segmentation fault.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: a0dcad0",
    "priority": 1
  },
  "752": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun _substvar_140_ () String)\r\n(declare-fun _substvar_195_ () Int)\r\n(declare-fun _substvar_201_ () Int)\r\n(assert\r\n (let ((_let_0 (str.substr _substvar_140_ 10 (+ 0 (str.len _substvar_140_)))))\r\n  (let ((_let_3 (str.substr _let_0 0 (str.indexof _let_0 \"/\" 0))))\r\n   (let ((_let_4 (str.substr _let_3 0 36)))\r\n    (let ((_let_5 (str.substr _let_3 8 (- _substvar_201_ (str.len _let_3)))))\r\n     (and\r\n      (str.contains _substvar_140_ \"//\")\r\n      (str.contains _let_3 \"@\")\r\n      (str.contains _let_5 \",\")\r\n      (not (= (str.len (str.substr _let_0 (+ 20 (str.indexof _let_0 \"/\" 0)) _substvar_195_)) 0))\r\n      (not (= (str.len _let_4) 0))\r\n      (not (str.contains _let_0 \".sock\"))\r\n      (not (str.contains _let_4 \"@\"))\r\n      (not (= (str.len _let_5) 103))\r\n      (= \"mongodb://\" (str.substr _substvar_140_ 0 10))))))))\r\n(check-sat)\r\n```\r\nz3str3 throws out a segmentation fault.\r\n\r\nOS: Ubuntu 18.04\r\nCommandline:  z3 smt.string_solver=z3str3 file.smt2\r\nRevision: 3669543\r\n",
    "priority": 1
  },
  "753": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () (_ FloatingPoint 65 2))\r\n(assert (= (fp.abs (fp.neg a)) a))\r\n(check-sat)\r\n```\r\nz3 will throw out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/util/mpz.cpp\r\nLine: 1650\r\nis_int64(a)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: d95b549",
    "priority": 1
  },
  "754": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Bool)\r\n(push)\r\n(assert a)\r\n(check-sat)\r\n(assert false)\r\n(push)\r\n(check-sat)\r\n```\r\nz3 smt.string_solver=z3str3 will throw out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_conflict_resolution.cpp\r\nLine: 367\r\nidx > 0\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS:Ubuntu18.04\r\nRevision: d95b549",
    "priority": 1
  },
  "755": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a() Real)\r\n(declare-fun b() Real)\r\n(declare-fun c() Real)\r\n(declare-fun d() Real)\r\n(declare-fun e() Real)\r\n(declare-fun f() Real)\r\n(declare-fun g() Real)\r\n(declare-fun h() Real)\r\n(assert (forall ((i Real)) (> (/ 5 (- (+ b 1) i) (+ d e)) (+ c a i))))\r\n(assert (< g (+ d h)))\r\n(assert (< 0 g))\r\n(assert (= d (+ 2 h e)))\r\n(assert (= a (+ 2 f)))\r\n(check-sat)\r\n```\r\nZ3 throws out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_arith_core.h\r\nLine: 376\r\n!val.is_one()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: cb600a9\r\n",
    "priority": 1
  },
  "756": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () String)\r\n(declare-fun b () String)\r\n(declare-fun c () String)\r\n(declare-fun d () String)\r\n(declare-fun h () String)\r\n(declare-fun k () String)\r\n(declare-fun l () String)\r\n(declare-fun m () String)\r\n(declare-fun n () String)\r\n(declare-fun o () String)\r\n(declare-fun p () String)\r\n(declare-fun u () String)\r\n(declare-fun w () String)\r\n(declare-fun x () String)\r\n(declare-fun e () Bool)\r\n(declare-fun f () Bool)\r\n(declare-fun g () Bool)\r\n(declare-fun q () Bool)\r\n(declare-fun r () Bool)\r\n(declare-fun s () Bool)\r\n(declare-fun t () Bool)\r\n(declare-fun v () Bool)\r\n(declare-fun y () Bool)\r\n(declare-fun i () Int)\r\n(declare-fun j () Int)\r\n(assert (= (not (= e (not (= f r)))) (not (= \"\" (str.substr h 6 (str.len u))))))\r\n(assert (not (= e (not (= f r)))))\r\n(assert (= (not (= g v)) (not (= j 0))))\r\n(assert\r\n (ite\r\n  t\r\n  (and\r\n   (= j i)\r\n   (= u (str.++ k l))\r\n   (= i (str.len (str.substr x 0 (str.len o))))\r\n   (= l (str.++ (str.substr c 0 (str.len m)) (str.substr d 0 (str.len n))))\r\n   (= (str.substr c 0 (str.len m)) (str.++ (str.substr x 0 (str.len o)) p))\r\n   (= p \"**utma0168862645\")\r\n   )\r\n  (and (= j 0))))\r\n(assert\r\n (=\r\n  (not (= e q))\r\n  (= \"\"\r\n   (str.substr a (str.len k)\r\n    (str.len (str.substr b (str.len l)\r\n              (str.len (str.substr d (str.len n) (str.len w)))))))))\r\n(assert (= (not (= y s)) (not v)))\r\n(assert (not (= y s)))\r\n(assert (= a (str.++ k w)))\r\n(assert (= b (str.++ l w)))\r\n(assert (= d (str.++ n w)))\r\n(assert (= e (not (= q  r v))))\r\n(assert (=  g (not (= t v))))\r\n(assert (= h (str.++ u w)))\r\n(check-sat)\r\n```\r\nZ3 will correctly answer `sat`, but if model_validate is on, it will throw out an invalid model error:\r\n```\r\nz3 model_validate=true file.smt2\r\ndisequality failed: \"\" != w\r\n\"\"\r\n\"\"\r\nexclude \"\" = w = \"\"\r\nsat\r\n(error \"line 56 column 10: an invalid model was generated\")\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 16d4ccd",
    "priority": 1
  },
  "757": {
    "body": "Hi,\r\nFor this variable declaration:\r\n```\r\n(set-logic LRA) \r\n(declare-fun as () Real)\r\n```\r\nCVC4 will reject the formula because `as` is the reserved word \u00ef\u00bc\u02c6according to the [SMT-LIB standard, page 95](http://smtlib.cs.uiowa.edu/papers/smt-lib-reference-v2.6-r2017-07-18.pdf) ), while z3 accepts it.\r\nIs it expected?\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 376d2c1",
    "priority": 1
  },
  "758": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(assert (< (/ b (/ 0 (/ 1 a))) 0 a))\r\n(check-sat)\r\n```\r\nz3 will throw out an error when model_validate is on:\r\n```\r\n(error \"line 4 column 10: an invalid model was generated\")\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 376d2c1\r\nCommandline: z3 model_validate=true small.smt2 ",
    "priority": 1
  },
  "759": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(set-logic NRA)\r\n(declare-fun a () Real)  \r\n(declare-fun b () Real)  \r\n(declare-fun c () Real)  \r\n(declare-fun d () Real)  \r\n(declare-fun e () Real)  \r\n(declare-fun f () Real)  \r\n(declare-fun g () Real)   \r\n(declare-fun h () Real)   \r\n(declare-fun i () Real)   \r\n(declare-fun j () Real)   \r\n(declare-fun k () Real)    \r\n(declare-fun l () Real)   \r\n(declare-fun m () Real)   \r\n(declare-fun n () Real)   \r\n(declare-fun o () Real)   \r\n(declare-fun p () Real)   \r\n(declare-fun q () Real)    \r\n(declare-fun r () Real)   \r\n(declare-fun s () Real)   \r\n(declare-fun t () Real)   \r\n(declare-fun u () Real)   \r\n(declare-fun v () Real)   \r\n(declare-fun w () Real)   \r\n(declare-fun x () Real)   \r\n(declare-fun y () Real)   \r\n(declare-fun z () Real)   \r\n(declare-fun aa () Real)   \r\n(declare-fun ab () Real)   \r\n(declare-fun ac () Real)   \r\n(declare-fun ad () Real)   \r\n(declare-fun ae () Real)   \r\n(declare-fun af () Real)   \r\n(declare-fun ag () Real)   \r\n(declare-fun ah () Real)   \r\n(declare-fun ai () Real)   \r\n(declare-fun aj () Real)   \r\n(declare-fun ak () Real)   \r\n(declare-fun al () Real)   \r\n(declare-fun am () Real)   \r\n(declare-fun an () Real)   \r\n(declare-fun ao () Real)   \r\n(declare-fun ap () Real)  \r\n(declare-fun aq () Real)   \r\n(declare-fun ar () Real)   \r\n(declare-fun at () Real)  \r\n(declare-fun au () Real)   \r\n(declare-fun av () Real)   \r\n(declare-fun aw () Real)   \r\n(assert\r\n  (forall\r\n    ((x Real))\r\n    (or\r\n      (<= 0.0 v)\r\n      (and\r\n        (=>\r\n          (or (< 0.0 x) (>= x v))\r\n          (and\r\n            (or\r\n              (and\r\n                (<= 0.0 (/ 54 m al))\r\n                (> (/ 60 m al) ac)\r\n                (< 0.0 (+ c (* g v)))\r\n              )\r\n              (<= (- 4 c (/ 183 g v)) ac)\r\n            )\r\n            (>= x ae)\r\n          )\r\n        )\r\n        (= (* 67 e (* 154 g v)) 2.0)\r\n      )\r\n      (= aw (+ aa al))\r\n      (and\r\n        (or\r\n          (and\r\n            (or\r\n              (and (= ac q) (= (+ m al) 4))\r\n              (= t 0.0)\r\n            )\r\n            (= t 2.0)\r\n            (= u 2.0)\r\n            (>\r\n              (*\r\n                y\r\n                (-\r\n                  (/ 232 n n)\r\n                  (- (/ 19 ap (+ 64 f t)))\r\n                )\r\n              )\r\n              w\r\n            )\r\n            (> 0.0 n ac)\r\n            (<= ac (/ 245 b (/ 7 f t)))\r\n          )\r\n          (< 0.0 ac)\r\n        )\r\n        (< 0.0 ae)\r\n      )\r\n    )\r\n  )\r\n)\r\n(assert\r\n  (or\r\n    (and\r\n      (or\r\n        (and\r\n          (or\r\n            (and\r\n              (<\r\n                0.0\r\n                (+ (* (- ak) ai) (/ 85 b o))\r\n              )\r\n              (<= (+ ai (* b o)) (* j x))\r\n              (>= 0.0 ai ar)\r\n            )\r\n            (> 0.0 ar)\r\n          )\r\n          (= (+ 89 e s) 0)\r\n        )\r\n        (<= o 53)\r\n        (> (* b o) (/ 214 j x))\r\n      )\r\n      (= (+ aa af) 2.0)\r\n      (<=\r\n        (-\r\n          (/ 63 k z)\r\n          (- (- (/ 137 a n) (/ 21 a n) ak))\r\n        )\r\n        ah\r\n      )\r\n      (<= 0.0 ak)\r\n      (> 0.0 (+ 249 a))\r\n      (< (* a n) (* j x))\r\n      (<= 0.0 (* d q))\r\n      (< 0.0 (* j x))\r\n    )\r\n    (<= 0 (* j x))\r\n  )\r\n)\r\n(assert (= a (+ n am)))\r\n(assert (= b (+ 3 o aq)))\r\n(assert (= c (* p ao)))\r\n(assert (= d (* q aj aq r ai)))\r\n(assert (= e (+ s ao)))\r\n(assert (= f (/ 207 t aq)))\r\n(assert (= at (+ u am)))\r\n(assert (= g (+ 182 v ao)))\r\n(assert (= h (/ 17 ab aj)))\r\n(assert (= i (* w aj)))\r\n(assert (= j (+ x an)))\r\n(assert (= au (/ 119 y al)))\r\n(assert (= k (+ z aw ac)))\r\n(assert (= l (/ 9 ad ai)))\r\n(assert (= av (/ ae ak)))\r\n(assert (= aa (- af al)))\r\n(assert (= m (/ 0 ag al)))\r\n(check-sat)\r\n```\r\nZ3 will throw out the following assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/util/mpbq.cpp\r\nLine: 83\r\nr == new_r\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 376d2c1",
    "priority": 1
  },
  "760": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Real) \r\n(declare-fun b () Real) \r\n(declare-fun c () Real) \r\n(declare-fun d () Real) \r\n(declare-fun e () Real) \r\n(declare-fun f () Real) \r\n(declare-fun g () Real) \r\n(declare-fun h () Real) \r\n(declare-fun i () Real) \r\n(declare-fun j () Real) \r\n(declare-fun k () Real) \r\n(declare-fun l () Real) \r\n(declare-fun m () Real) \r\n(declare-fun n () Real) \r\n(declare-fun o () Real) \r\n(declare-fun q () Real) \r\n(declare-fun s () Real) \r\n(assert\r\n  (exists\r\n    ((r Real))\r\n    (or\r\n      (= m 0)\r\n      (< 0 (* b m))\r\n      (<= 0 s)\r\n      (< 0 d)\r\n      (=>\r\n        (> r l 0 (* (/ 9 m) r))\r\n        (= f 2)\r\n      )\r\n    )\r\n  )\r\n)\r\n(assert\r\n  (forall\r\n    ((p Real))\r\n    (and\r\n      (or\r\n        (and\r\n          (= 0 (+ (/ j n) g))\r\n          (>\r\n            (/\r\n              k\r\n              (/\r\n                (+\r\n                  (* j j)\r\n                  (* (- c s) (+ 126 c))\r\n                  (*\r\n                    g\r\n                    (- (+ (/ 2 k) s) g)\r\n                  )\r\n                )\r\n                (*\r\n                  (* j (- 173 c s))\r\n                  (+ (* k (* 8 c s)) (* 2 g))\r\n                )\r\n              )\r\n            )\r\n            0\r\n          )\r\n        )\r\n        (= q 0)\r\n        (>= 0 j)\r\n        (< 0 (/ 2 e) 0)\r\n      )\r\n      (<\r\n        (/\r\n          (* (/ 1 9) (* g o))\r\n          (/\r\n            (*\r\n              (+ (* j i) g)\r\n              (/ 7 (* j (/ a i)) g)\r\n            )\r\n            0\r\n          )\r\n        )\r\n        h\r\n      )\r\n    )\r\n  )\r\n)\r\n(check-sat)         \r\n```\r\nz3 will throw out a assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/math/polynomial/algebraic_numbers.cpp\r\nLine: 742\r\nacell_inv(*c)\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: a90529e (./confirgure -d)",
    "priority": 1
  },
  "761": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun c () Real)\r\n(assert\r\n (forall ((a Real))\r\n  (and\r\n   (exists ((g Real))\r\n    (exists ((b Real))\r\n     (forall ((e Real))\r\n      (and (>= (/ (/ (/ 0 (- g)) (* 20 a)) c) 20) (= (/ (* 54 g) (- a)) (* 4 1))))))\r\n   (forall ((f Real))\r\n    (forall ((g Real))\r\n     (forall ((b Real))\r\n      (forall ((e Real))\r\n       (and\r\n        (not (= 0 (- 1 22)))\r\n        (<= (- (/ (* (+ (- e) (- 7 b)) (/ 0 g)) (/ 6 f)) (+ 4 f)) 6)\r\n        (exists ((k Real))\r\n         (> (/ (/ (* (* (+ b (- 4 e)) (/ 0 g)) (* 18 f)) (/ 5 a)) 0) 7))\r\n        (exists ((k Real))\r\n         (and\r\n          (>= (* (- (* 8 a)) (* 18 c)) 0)\r\n          (= c (- 1))\r\n          (= (/ (* (+ (* (* (- 3 e) b) (/ 0 g)) (* 20 f)) (* (/ 0 0) a)) 0) 0)\r\n          ))))))))))\r\n(check-sat)\r\n```\r\nz3 will throw out a assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/mam.cpp\r\nLine: 834\r\ncm == NOT_CHECKED\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: a90529e (./configure -d)",
    "priority": 1
  },
  "762": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(declare-fun f () Real)\r\n(declare-fun k () Real)\r\n(declare-fun p () Real)\r\n(declare-fun u () Real)\r\n(declare-fun v () Real)\r\n(declare-fun w () Real)\r\n(assert\r\n (exists ((h Real))\r\n  (= (= d 0) (= (> 0 (- (/ 6 a))) (= (and (< u d) (< (/ h 0) 0)) (= f 2))))))\r\n(assert\r\n (forall ((g Real))\r\n  (=\r\n   (> (/ 1 k e) 0 b)\r\n   (=\r\n    (/ 5 c)\r\n    (/ 0 (- 9 (* (* (- 5 v) (- 8 (* w u) (+ 1 u))) (- (+ 2 (/ 1 w) k)))))\r\n    (* 35 (* (+ (* v w) k) k))\r\n    c))))\r\n(assert (= w (- u p) k))\r\n(check-sat)\r\n```\r\nz3 will throw out an assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_arith_nl.h\r\nLine: 1237\r\nUNREACHABLE CODE WAS REACHED.\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: d25c7e6 (./configure -d)",
    "priority": 1
  },
  "763": {
    "body": "Hi, \r\nFor this formula,\r\n```\r\n(set-logic QF_S)\r\n(declare-fun b () Bool)\r\n(declare-fun f () Bool)\r\n(declare-fun a () String)\r\n(declare-fun c () String)\r\n(declare-fun d () String)\r\n(declare-fun e () String)\r\n(declare-fun g () String)\r\n(declare-fun h () String)\r\n(assert (= (= b f) (not (= \"\" (str.substr a 32 (str.len c))))))\r\n(assert (= b f (= h (str.++ (str.substr a (str.len c) (str.len d)) e)) (= g \"\")))\r\n(check-sat)\r\n```\r\nZ3 will throw out a segfualt while solving:\r\n```\r\n$ z3 test.smt2\r\nSegmentation fault\r\n$ cat test.smt2\r\n(set-logic QF_S)\r\n(declare-fun b () Bool)\r\n(declare-fun f () Bool)\r\n(declare-fun a () String)\r\n(declare-fun c () String)\r\n(declare-fun d () String)\r\n(declare-fun e () String)\r\n(declare-fun g () String)\r\n(declare-fun h () String)\r\n(assert (= (= b f) (not (= \"\" (str.substr a 32 (str.len c))))))\r\n(assert (= b f (= h (str.++ (str.substr a (str.len c) (str.len d)) e)) (= g \"\")))\r\n(check-sat)\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 39edf73",
    "priority": 0
  },
  "764": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(set-logic ALL)\r\n(declare-fun a () Bool)\r\n(declare-fun b () Bool)\r\n(declare-fun d () Bool)\r\n(declare-fun g () Bool)\r\n(declare-fun i () Bool)\r\n(declare-fun f () Int)\r\n(declare-fun c () String)\r\n(declare-fun e () String)\r\n(declare-fun h () String)\r\n(assert (= d (not (= \"\" (str.substr c 0 (str.len e))))))\r\n(assert (not (= a (not (= b i)))))\r\n(assert (= (not (= b g)) (= \"-\" e)))\r\n(assert (not (= b g)))\r\n(assert (= f (str.len (str.substr c (str.len e) (str.len h)))))\r\n(assert (= (= b i) (= f 0) (= a d)))\r\n(check-sat)\r\n```\r\nz3 will throw out a assertion violation:\r\n```\r\nFailed to verify: m_util.str.is_length(l, e)\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_seq.cpp\r\nLine: 1910\r\nUNREACHABLE CODE WAS REACHED.\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 39edf73 (./configure -d)",
    "priority": 0
  },
  "765": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(declare-fun f () Real)\r\n(declare-fun g () Real)\r\n(declare-fun h () Real)\r\n(assert\r\n  (exists\r\n    ((i Real))\r\n    (or\r\n      (= (/ d g) 1)\r\n      (<\r\n        (+\r\n          (* (/ b c) (/ 1 h h))\r\n          (* (+ (/ 2 b c) h f) (+ (/ 3 b) h f))\r\n        )\r\n        (/ a e)\r\n      )\r\n    )\r\n  )\r\n)\r\n(check-sat)\r\n```\r\nz3 will throw out the assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/math/polynomial/polynomial.cpp\r\nLine: 800\r\nm_monomials.empty()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: a635049 (./configure -d)",
    "priority": 1
  },
  "766": {
    "body": "Hi,\r\nFor this formula,\r\n```\r\n(assert\r\n (forall ((a Real))\r\n  (> a (+ (/ 0 0) 0) 0)\r\n  )\r\n )\r\n(check-sat)\r\n```\r\nz3 will throw out the assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/qe/qsat.cpp\r\nLine: 631\r\nvalidate_defs(\"check_sat\")\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: a635049 (./configure -d)",
    "priority": 1
  },
  "767": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun b () Real) \r\n(declare-fun KjafX_new () Real) \r\n(declare-fun c () Real) \r\n(declare-fun e () Real) \r\n(declare-fun a () Real) \r\n(declare-fun s () Real) \r\n(declare-fun l () Real) \r\n(declare-fun f () Real) \r\n(declare-fun d () Real) \r\n(declare-fun aa () Real) \r\n(declare-fun ac () Real) \r\n(declare-fun ts2209uscore0 () Real) \r\n(declare-fun g () Real) \r\n(declare-fun A () Real) \r\n(declare-fun m () Real) \r\n(declare-fun h () Real) \r\n(declare-fun V () Real) \r\n(declare-fun i () Real) \r\n(declare-fun o () Real) \r\n(declare-fun j () Real) \r\n(declare-fun n () Real) \r\n(assert\r\n  (forall\r\n    ((ts2209uscore0 Real))\r\n    (or\r\n      (<= 0 (/ 74 KjafX_new (/ a ts2209uscore0)))\r\n      (>= 0 (/ e n))\r\n      (and\r\n        (>= (/ (/ s ts2209uscore0) aa) d)\r\n        (>= (/ ts2209uscore0 0) 0)\r\n      )\r\n    )\r\n  )\r\n)\r\n(assert\r\n  (forall\r\n    ((k Real))\r\n    (or\r\n      (and\r\n        (or\r\n          (and\r\n            (or (>= 0 (/ b s)) (>= (/ 7 b s) i))\r\n            (>= 0 j)\r\n          )\r\n          (>= (/ 5 c f) V)\r\n          (= m 2)\r\n          (>= 0 g)\r\n          (<= h V)\r\n        )\r\n        (<= 0 (/ 0 l))\r\n      )\r\n      (>= 0 V)\r\n    )\r\n  )\r\n)\r\n(assert (= b (/ s o)))\r\n(assert (= (/ ac A) a (/ ts2209uscore0 A)))\r\n(check-sat)\r\n```\r\nz3 will throw out the assertion violation:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/smt_context.h\r\nLine: 1229\r\nl != true_literal && l != false_literal\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nIf I change the name of variable `ts2209uscore0` to `ad`, z3 is able to report `sat`. \r\nIf I change the name of varibale `KjafX_new` to `KjafX`, z3 will report unknown.\r\n\r\nOS: Ubuntu 18.04\r\nRevision: fe7a7fe (./configure -d)\r\n\r\n",
    "priority": 1
  },
  "768": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(declare-fun f () Real)\r\n(declare-fun h () Real)\r\n(declare-fun i () Real)\r\n(declare-fun j () Real)\r\n(declare-fun k () Real)\r\n(declare-fun aa () Real)\r\n(assert\r\n (not\r\n  (exists ((g Real))\r\n   (=>\r\n    (and\r\n     (< (- (* (- (- h (- 24)) 1) (* (- (+ h (/ 8 k) (- k))) (* (+ 149 k) e)))) (- b d))\r\n     (> e (+ 8 a) (* b d) 86)\r\n     (> (/ 1 c i) (/ a j j))\r\n     )\r\n    (< e 0)))))\r\n(assert (= (- k f) (- aa)))\r\n(check-sat)\r\n```\r\nZ3 will throw out the assertion violation non-deterministically:\r\n```\r\n[700] % for i in $(seq 1 10); do echo \"### $i-th run ###\"; timeout -s 9 20 z3 small.smt2; echo; done;\r\n### 1-th run ###\r\nsat\r\n### 2-th run ###\r\nASSERTION VIOLATION\r\nFile: ../src/math/polynomial/polynomial.cpp\r\nLine: 800\r\nm_monomials.empty()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nKilled\r\n### 3-th run ###\r\nsat\r\n### 4-th run ###\r\nASSERTION VIOLATION\r\nFile: ../src/math/polynomial/polynomial.cpp\r\nLine: 800\r\nm_monomials.empty()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\nKilled\r\n### 5-th run ###\r\nsat\r\n### 6-th run ###\r\nsat\r\n### 7-th run ###\r\nsat\r\n### 8-th run ###\r\nsat\r\n### 9-th run ###\r\nsat\r\n### 10-th run ###\r\nsat\r\n[701] % cat small.smt2\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(declare-fun f () Real)\r\n(declare-fun h () Real)\r\n(declare-fun i () Real)\r\n(declare-fun j () Real)\r\n(declare-fun k () Real)\r\n(declare-fun aa () Real)\r\n(assert\r\n (not\r\n  (exists ((g Real))\r\n   (=>\r\n    (and\r\n     (< (- (* (- (- h (- 24)) 1) (* (- (+ h (/ 8 k) (- k))) (* (+ 149 k) e)))) (- b d))\r\n     (> e (+ 8 a) (* b d) 86)\r\n     (> (/ 1 c i) (/ a j j))\r\n     )\r\n    (< e 0)))))\r\n(assert (= (- k f) (- aa)))\r\n(check-sat)\r\n[702] %\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: a424ab9 (./configure -d)",
    "priority": 1
  },
  "769": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun g () Real)\r\n(declare-fun e () Real)\r\n(declare-fun f () Real)\r\n(declare-fun k () Real)\r\n(declare-fun h () Real)\r\n(assert\r\n  (forall\r\n    ((i Real))\r\n    (> 0 (- (/ 0 i)))\r\n  )\r\n)\r\n(assert\r\n  (not\r\n    (forall\r\n      ((j Real))\r\n      (not\r\n        (and\r\n          (= (- 2 b e) (/ d k))\r\n          (<\r\n            (-\r\n              (* (+ h 1) (- h 8 (- c f)) (- 1 c f) (- 1 a g))\r\n            )\r\n            (- 1 b e)\r\n            (+ a g)\r\n            (/ b e)\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )\r\n)\r\n(check-sat)\r\n```\r\nz3 will throw out a assertion violation while solving this formula: \r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_arith_nl.h\r\nLine: 1239\r\nUNREACHABLE CODE WAS REACHED.\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: deb45c0 (./configure -d)",
    "priority": 1
  },
  "770": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n( declare-fun a () Int )\r\n( declare-fun b () Int )\r\n( declare-fun c () Int )\r\n( declare-fun d () Int )\r\n( declare-fun i () Int )\r\n( declare-fun e () Int )\r\n( declare-fun f () Int )\r\n( declare-fun j () Int )\r\n( declare-fun g () Int )\r\n( declare-fun h () Int )\r\n(assert\r\n  (=\r\n    0\r\n    (/\r\n      6\r\n      (+\r\n        (*\r\n          7\r\n          (*\r\n            (+\r\n              (-\r\n                (- 8 (* (+ a g) 6))\r\n              )\r\n              (/ (* b (+ c j)) 9)\r\n            )\r\n            (+ (* 7 (/ e 2)) i (- f 3))\r\n            (- 2 d h)\r\n          )\r\n        )\r\n        (/ 7 0)\r\n      )\r\n      0\r\n    )\r\n  )\r\n)\r\n( check-sat )\r\n```\r\nz3 will throw out a assertion violation while solving this formula: \r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_arith_core.h\r\nLine: 351\r\nm->get_num_args() == 2\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 79d4502 (./configure -d)",
    "priority": 1
  },
  "771": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(declare-fun a () Real)\r\n(declare-fun b () Real)\r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(declare-fun f () Real)\r\n(declare-fun g () Real)\r\n(declare-fun h () Real)\r\n(declare-fun i () Real)\r\n(assert (exists ((j Real)) (= (< 0 d) (= (/ j 0) j))))\r\n(assert (and (= (/ 20 a c) 2) (= (/ g (* (* e (/ b e)) (/ 2 0))) f) (= 0 (/ 1 b))))\r\n(assert (= a (/ h i)))\r\n(check-sat)\r\n```\r\nz3 will throw out a assertion violation while solving this formula: (which is similar to #2581)\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/util/old_vector.h\r\nLine: 375\r\nidx < size()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 2a1f05e (./configure -d)",
    "priority": 1
  },
  "772": {
    "body": "Hi,\r\nFor this formula:\r\n```\r\n(set-logic NRA)\r\n(declare-fun a () Real)\r\n(declare-fun b () Real) \r\n(declare-fun c () Real)\r\n(declare-fun d () Real)\r\n(declare-fun e () Real)\r\n(declare-fun f () Real)\r\n(assert\r\n (not\r\n  (exists ((g Real))\r\n   (=>\r\n    (and (= (* c e) 0) (= (* c e) 1) (= (* (/ a (/ b f)) 2) f))\r\n    (= (= d 0) (not (= (= g 0) (< (/ g 0) 0))))\r\n    )\r\n   )\r\n  )\r\n )\r\n(check-sat)\r\n```\r\nz3 will throw out a assertion violation while solving this formula:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/util/old_vector.h\r\nLine: 370\r\nidx < size()\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\nIf I remove (set-logic NRA), z3 will throw out:\r\n```\r\nASSERTION VIOLATION\r\nFile: ../src/smt/theory_arith_core.h\r\nLine: 343\r\n!m_util.is_numeral(m->get_arg(1))\r\n(C)ontinue, (A)bort, (S)top, (T)hrow exception, Invoke (G)DB\r\n```\r\n\r\nOS: Ubuntu 18.04\r\nRevision: 1203af8 (./configure -d)",
    "priority": 1
  }
}